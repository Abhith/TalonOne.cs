//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace TalonOne
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.3.0")]
    public partial class Client : ClientBase
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string _baseUrl = "";
        
        public Client(ClientConfig configuration) : base(configuration)
        {
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Update a Customer Profile</summary>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IntegrationState> UpdateCustomerProfileAsync(string integrationId, NewCustomerProfile body)
        {
            return UpdateCustomerProfileAsync(integrationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a Customer Profile</summary>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IntegrationState> UpdateCustomerProfileAsync(string integrationId, NewCustomerProfile body, System.Threading.CancellationToken cancellationToken)
        {
            if (integrationId == null)
                throw new System.ArgumentNullException("integrationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/customer_profiles/{integrationId}");
            urlBuilder_.Replace("{integrationId}", System.Uri.EscapeDataString(System.Convert.ToString(integrationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IntegrationState); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationState>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IntegrationState);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a list of the customer profiles that match the given attributes</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetCustomerProfilesByAttributesAsync(CustomerProfileSearch body)
        {
            return GetCustomerProfilesByAttributesAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a list of the customer profiles that match the given attributes</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> GetCustomerProfilesByAttributesAsync(CustomerProfileSearch body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/customer_profiles_search");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a Customer Session</summary>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IntegrationState> UpdateCustomerSessionAsync(string customerSessionId, NewCustomerSession body)
        {
            return UpdateCustomerSessionAsync(customerSessionId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a Customer Session</summary>
        /// <param name="customerSessionId">The custom identifier for this session, must be unique within the account.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IntegrationState> UpdateCustomerSessionAsync(string customerSessionId, NewCustomerSession body, System.Threading.CancellationToken cancellationToken)
        {
            if (customerSessionId == null)
                throw new System.ArgumentNullException("customerSessionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/customer_sessions/{customerSessionId}");
            urlBuilder_.Replace("{customerSessionId}", System.Uri.EscapeDataString(System.Convert.ToString(customerSessionId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IntegrationState); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationState>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IntegrationState);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Track an Event</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IntegrationState> TrackEventAsync(NewEvent body)
        {
            return TrackEventAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Track an Event</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IntegrationState> TrackEventAsync(NewEvent body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/events");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IntegrationState); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationState>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IntegrationState);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a referral code for an advocate</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Referral> CreateReferralAsync(NewReferral body)
        {
            return CreateReferralAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a referral code for an advocate</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Referral> CreateReferralAsync(NewReferral body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/referrals");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Referral); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Referral>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Referral);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create an Application</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Application> CreateApplicationAsync(NewApplication body)
        {
            return CreateApplicationAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create an Application</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Application> CreateApplicationAsync(NewApplication body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Application); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Application);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Applications</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response2> GetApplicationsAsync(int? pageSize, int? skip, string sort)
        {
            return GetApplicationsAsync(pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Applications</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response2> GetApplicationsAsync(int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response2); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Application</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Application> GetApplicationAsync(int applicationId)
        {
            return GetApplicationAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Application</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Application> GetApplicationAsync(int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Application); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Application);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update Application data</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Application> UpdateApplicationAsync(int applicationId, NewApplication body)
        {
            return UpdateApplicationAsync(applicationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update Application data</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Application> UpdateApplicationAsync(int applicationId, NewApplication body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Application); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Application);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete an Application</summary>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteApplicationAsync(int applicationId)
        {
            return DeleteApplicationAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete an Application</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteApplicationAsync(int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a Campaign</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Campaign> CreateCampaignAsync(int applicationId, NewCampaign body)
        {
            return CreateCampaignAsync(applicationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a Campaign</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Campaign> CreateCampaignAsync(int applicationId, NewCampaign body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Campaign); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Campaign>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Campaign);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List your Campaigns</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response3> GetCampaignsAsync(int? pageSize, int? skip, string sort, int applicationId)
        {
            return GetCampaignsAsync(pageSize, skip, sort, applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List your Campaigns</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response3> GetCampaignsAsync(int? pageSize, int? skip, string sort, int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response3); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response3>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a Campaign Set</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CampaignSet> UpdateCampaignSetAsync(int applicationId, NewCampaignSet body)
        {
            return UpdateCampaignSetAsync(applicationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a Campaign Set</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CampaignSet> UpdateCampaignSetAsync(int applicationId, NewCampaignSet body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaign_set");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CampaignSet); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CampaignSet>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CampaignSet);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List CampaignSet</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CampaignSet> GetCampaignSetAsync(int applicationId)
        {
            return GetCampaignSetAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List CampaignSet</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CampaignSet> GetCampaignSetAsync(int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaign_set");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CampaignSet); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CampaignSet>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CampaignSet);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a Campaign</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Campaign> GetCampaignAsync(int applicationId, int campaignId)
        {
            return GetCampaignAsync(applicationId, campaignId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a Campaign</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Campaign> GetCampaignAsync(int applicationId, int campaignId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Campaign); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Campaign>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Campaign);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a Campaign</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync(int applicationId, int campaignId, NewCampaign body)
        {
            return UpdateCampaignAsync(applicationId, campaignId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a Campaign</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync(int applicationId, int campaignId, NewCampaign body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Campaign); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Campaign>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Campaign);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a Campaign</summary>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCampaignAsync(int applicationId, int campaignId)
        {
            return DeleteCampaignAsync(applicationId, campaignId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete a Campaign</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCampaignAsync(int applicationId, int campaignId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a Ruleset</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Ruleset> CreateRulesetAsync(int applicationId, int campaignId, NewRuleset body)
        {
            return CreateRulesetAsync(applicationId, campaignId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a Ruleset</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Ruleset> CreateRulesetAsync(int applicationId, int campaignId, NewRuleset body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Ruleset); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Ruleset>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Ruleset);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Campaign Rulesets</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response4> GetRulesetsAsync(int? pageSize, int? skip, string sort, int applicationId, int campaignId)
        {
            return GetRulesetsAsync(pageSize, skip, sort, applicationId, campaignId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Campaign Rulesets</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> GetRulesetsAsync(int? pageSize, int? skip, string sort, int applicationId, int campaignId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response4); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response4>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a Ruleset</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Ruleset> UpdateRulesetAsync(int applicationId, int campaignId, int rulesetId, NewRuleset body)
        {
            return UpdateRulesetAsync(applicationId, campaignId, rulesetId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a Ruleset</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Ruleset> UpdateRulesetAsync(int applicationId, int campaignId, int rulesetId, NewRuleset body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            if (rulesetId == null)
                throw new System.ArgumentNullException("rulesetId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{rulesetId}", System.Uri.EscapeDataString(System.Convert.ToString(rulesetId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Ruleset); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Ruleset>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Ruleset);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a Ruleset</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Ruleset> GetRulesetAsync(int applicationId, int campaignId, int rulesetId)
        {
            return GetRulesetAsync(applicationId, campaignId, rulesetId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a Ruleset</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Ruleset> GetRulesetAsync(int applicationId, int campaignId, int rulesetId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            if (rulesetId == null)
                throw new System.ArgumentNullException("rulesetId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{rulesetId}", System.Uri.EscapeDataString(System.Convert.ToString(rulesetId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Ruleset); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Ruleset>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Ruleset);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a Ruleset</summary>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteRulesetAsync(int applicationId, int campaignId, int rulesetId)
        {
            return DeleteRulesetAsync(applicationId, campaignId, rulesetId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete a Ruleset</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteRulesetAsync(int applicationId, int campaignId, int rulesetId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            if (rulesetId == null)
                throw new System.ArgumentNullException("rulesetId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{rulesetId}", System.Uri.EscapeDataString(System.Convert.ToString(rulesetId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create Coupons</summary>
        /// <param name="silent">If set to 'yes', response will be an empty 204, otherwise a list of the coupons generated.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response5> CreateCouponsAsync(string silent, int applicationId, int campaignId, NewCoupons body)
        {
            return CreateCouponsAsync(silent, applicationId, campaignId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create Coupons</summary>
        /// <param name="silent">If set to 'yes', response will be an empty 204, otherwise a list of the coupons generated.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response5> CreateCouponsAsync(string silent, int applicationId, int campaignId, NewCoupons body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            if (silent != null) urlBuilder_.Append("silent=").Append(System.Uri.EscapeDataString(System.Convert.ToString(silent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response5); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response5>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("No Content", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response5);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Coupons</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.</param>
        /// <param name="valid">Either "expired", "validNow", or "validFuture". The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.</param>
        /// <param name="usable">Either "true" or "false". If "true", only coupons where `usageCounter < usageLimit` will be returned, "false" will return only coupons where `usageCounter >= usageLimit`.</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response6> GetCouponsAsync(int? pageSize, int? skip, string sort, int applicationId, int campaignId, string value, System.DateTime? createdBefore, System.DateTime? createdAfter, Valid? valid, Usable? usable, int? referralId)
        {
            return GetCouponsAsync(pageSize, skip, sort, applicationId, campaignId, value, createdBefore, createdAfter, valid, usable, referralId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Coupons</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.</param>
        /// <param name="valid">Either "expired", "validNow", or "validFuture". The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.</param>
        /// <param name="usable">Either "true" or "false". If "true", only coupons where `usageCounter < usageLimit` will be returned, "false" will return only coupons where `usageCounter >= usageLimit`.</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response6> GetCouponsAsync(int? pageSize, int? skip, string sort, int applicationId, int campaignId, string value, System.DateTime? createdBefore, System.DateTime? createdAfter, Valid? valid, Usable? usable, int? referralId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (value != null) urlBuilder_.Append("value=").Append(System.Uri.EscapeDataString(System.Convert.ToString(value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdBefore != null) urlBuilder_.Append("createdBefore=").Append(System.Uri.EscapeDataString(createdBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdAfter != null) urlBuilder_.Append("createdAfter=").Append(System.Uri.EscapeDataString(createdAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (valid != null) urlBuilder_.Append("valid=").Append(System.Uri.EscapeDataString(System.Convert.ToString(valid.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (usable != null) urlBuilder_.Append("usable=").Append(System.Uri.EscapeDataString(System.Convert.ToString(usable.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (referralId != null) urlBuilder_.Append("referralId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(referralId.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response6); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response6>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response6);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete all of a Campaigns Coupons</summary>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAllCouponsAsync(int applicationId, int campaignId)
        {
            return DeleteAllCouponsAsync(applicationId, campaignId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete all of a Campaigns Coupons</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAllCouponsAsync(int applicationId, int campaignId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a Coupon</summary>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Coupon> UpdateCouponAsync(int applicationId, int campaignId, string couponId, UpdateCoupon body)
        {
            return UpdateCouponAsync(applicationId, campaignId, couponId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a Coupon</summary>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Coupon> UpdateCouponAsync(int applicationId, int campaignId, string couponId, UpdateCoupon body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            if (couponId == null)
                throw new System.ArgumentNullException("couponId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{couponId}", System.Uri.EscapeDataString(System.Convert.ToString(couponId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Coupon); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Coupon>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Coupon);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete one Coupon</summary>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCouponAsync(int applicationId, int campaignId, string couponId)
        {
            return DeleteCouponAsync(applicationId, campaignId, couponId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete one Coupon</summary>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCouponAsync(int applicationId, int campaignId, string couponId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            if (couponId == null)
                throw new System.ArgumentNullException("couponId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{couponId}", System.Uri.EscapeDataString(System.Convert.ToString(couponId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Referrals</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.</param>
        /// <param name="valid">Either "expired", "validNow", or "validFuture". The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.</param>
        /// <param name="usable">Either "true" or "false". If "true", only referrals where `usageCounter < usageLimit` will be returned, "false" will return only referrals where `usageCounter >= usageLimit`.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response7> GetReferralsAsync(int? pageSize, int? skip, string sort, int applicationId, int campaignId, string code, System.DateTime? createdBefore, System.DateTime? createdAfter, Valid2? valid, Usable2? usable)
        {
            return GetReferralsAsync(pageSize, skip, sort, applicationId, campaignId, code, createdBefore, createdAfter, valid, usable, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Referrals</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.</param>
        /// <param name="valid">Either "expired", "validNow", or "validFuture". The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.</param>
        /// <param name="usable">Either "true" or "false". If "true", only referrals where `usageCounter < usageLimit` will be returned, "false" will return only referrals where `usageCounter >= usageLimit`.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response7> GetReferralsAsync(int? pageSize, int? skip, string sort, int applicationId, int campaignId, string code, System.DateTime? createdBefore, System.DateTime? createdAfter, Valid2? valid, Usable2? usable, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (code != null) urlBuilder_.Append("code=").Append(System.Uri.EscapeDataString(System.Convert.ToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdBefore != null) urlBuilder_.Append("createdBefore=").Append(System.Uri.EscapeDataString(createdBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdAfter != null) urlBuilder_.Append("createdAfter=").Append(System.Uri.EscapeDataString(createdAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (valid != null) urlBuilder_.Append("valid=").Append(System.Uri.EscapeDataString(System.Convert.ToString(valid.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (usable != null) urlBuilder_.Append("usable=").Append(System.Uri.EscapeDataString(System.Convert.ToString(usable.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response7); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response7>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response7);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete one Referral</summary>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteReferralAsync(int applicationId, int campaignId, string referralId)
        {
            return DeleteReferralAsync(applicationId, campaignId, referralId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete one Referral</summary>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteReferralAsync(int applicationId, int campaignId, string referralId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            if (referralId == null)
                throw new System.ArgumentNullException("referralId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{referralId}", System.Uri.EscapeDataString(System.Convert.ToString(referralId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Enable a loyalty program for an application</summary>
        /// <param name="applicationId">The identifier for the application, must be unique within the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IntegrationState> EnableLoyaltyProgramAsync(string applicationId, LoyaltyMembership body)
        {
            return EnableLoyaltyProgramAsync(applicationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Enable a loyalty program for an application</summary>
        /// <param name="applicationId">The identifier for the application, must be unique within the account.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IntegrationState> EnableLoyaltyProgramAsync(string applicationId, LoyaltyMembership body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/loyalty/enable");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IntegrationState); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationState>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IntegrationState);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Disable a loyalty program for an application</summary>
        /// <param name="applicationId">The identifier for the application, must be unique within the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IntegrationState> DisableLoyaltyProgramAsync(string applicationId, LoyaltyMembership body)
        {
            return DisableLoyaltyProgramAsync(applicationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Disable a loyalty program for an application</summary>
        /// <param name="applicationId">The identifier for the application, must be unique within the account.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IntegrationState> DisableLoyaltyProgramAsync(string applicationId, LoyaltyMembership body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/loyalty/disable");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IntegrationState); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationState>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IntegrationState);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Join a loyalty program</summary>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IntegrationState> JoinLoyaltyProgramAsync(string integrationId, LoyaltyMembership body)
        {
            return JoinLoyaltyProgramAsync(integrationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Join a loyalty program</summary>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IntegrationState> JoinLoyaltyProgramAsync(string integrationId, LoyaltyMembership body, System.Threading.CancellationToken cancellationToken)
        {
            if (integrationId == null)
                throw new System.ArgumentNullException("integrationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/customer_profiles/{integrationId}/loyalty/join");
            urlBuilder_.Replace("{integrationId}", System.Uri.EscapeDataString(System.Convert.ToString(integrationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IntegrationState); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationState>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IntegrationState);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Leave a loyalty program</summary>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IntegrationState> LeaveLoyaltyProgramAsync(string integrationId, LoyaltyMembership body)
        {
            return LeaveLoyaltyProgramAsync(integrationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Leave a loyalty program</summary>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IntegrationState> LeaveLoyaltyProgramAsync(string integrationId, LoyaltyMembership body, System.Threading.CancellationToken cancellationToken)
        {
            if (integrationId == null)
                throw new System.ArgumentNullException("integrationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/customer_profiles/{integrationId}/loyalty/leave");
            urlBuilder_.Replace("{integrationId}", System.Uri.EscapeDataString(System.Convert.ToString(integrationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(IntegrationState); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationState>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(IntegrationState);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List point transactions for a customer and loyalty program</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="loyaltyProgramId">The custom identifier for the ledger.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response8> GetLedgerHistoryAsync(int? pageSize, int? skip, string sort, string integrationId, int loyaltyProgramId)
        {
            return GetLedgerHistoryAsync(pageSize, skip, sort, integrationId, loyaltyProgramId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List point transactions for a customer and loyalty program</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="loyaltyProgramId">The custom identifier for the ledger.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response8> GetLedgerHistoryAsync(int? pageSize, int? skip, string sort, string integrationId, int loyaltyProgramId, System.Threading.CancellationToken cancellationToken)
        {
            if (integrationId == null)
                throw new System.ArgumentNullException("integrationId");
    
            if (loyaltyProgramId == null)
                throw new System.ArgumentNullException("loyaltyProgramId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/customer_profiles/{integrationId}/ledger/{loyaltyProgramId}/history?");
            urlBuilder_.Replace("{integrationId}", System.Uri.EscapeDataString(System.Convert.ToString(integrationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{loyaltyProgramId}", System.Uri.EscapeDataString(System.Convert.ToString(loyaltyProgramId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response8); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response8>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response8);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List the current point balances for customer</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response9> GetLedgerBalancesAsync(int? pageSize, int? skip, string sort, string integrationId)
        {
            return GetLedgerBalancesAsync(pageSize, skip, sort, integrationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List the current point balances for customer</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="integrationId">The custom identifier for this profile, must be unique within the account.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response9> GetLedgerBalancesAsync(int? pageSize, int? skip, string sort, string integrationId, System.Threading.CancellationToken cancellationToken)
        {
            if (integrationId == null)
                throw new System.ArgumentNullException("integrationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/customer_profiles/{integrationId}/ledger/balances?");
            urlBuilder_.Replace("{integrationId}", System.Uri.EscapeDataString(System.Convert.ToString(integrationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response9); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response9>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response9);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a loyalty program</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LoyaltyProgram> CreateLoyaltyProgramAsync(NewLoyaltyProgram body)
        {
            return CreateLoyaltyProgramAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a loyalty program</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LoyaltyProgram> CreateLoyaltyProgramAsync(NewLoyaltyProgram body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/loyaltyprograms");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(LoyaltyProgram); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyProgram>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(LoyaltyProgram);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List loyalty programs</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response10> GetLoyaltyProgramsAsync(int? pageSize, int? skip, string sort)
        {
            return GetLoyaltyProgramsAsync(pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List loyalty programs</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response10> GetLoyaltyProgramsAsync(int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/loyaltyprograms?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response10); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response10>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response10);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get loyalty program</summary>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync(int loyaltyProgramId)
        {
            return GetLoyaltyProgramAsync(loyaltyProgramId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get loyalty program</summary>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync(int loyaltyProgramId, System.Threading.CancellationToken cancellationToken)
        {
            if (loyaltyProgramId == null)
                throw new System.ArgumentNullException("loyaltyProgramId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/loyaltyprograms/{loyaltyProgramId}");
            urlBuilder_.Replace("{loyaltyProgramId}", System.Uri.EscapeDataString(System.Convert.ToString(loyaltyProgramId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(LoyaltyProgram); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyProgram>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(LoyaltyProgram);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update loyalty program data</summary>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LoyaltyProgram> UpdateLoyaltyProgramAsync(int loyaltyProgramId, NewLoyaltyProgram body)
        {
            return UpdateLoyaltyProgramAsync(loyaltyProgramId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update loyalty program data</summary>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LoyaltyProgram> UpdateLoyaltyProgramAsync(int loyaltyProgramId, NewLoyaltyProgram body, System.Threading.CancellationToken cancellationToken)
        {
            if (loyaltyProgramId == null)
                throw new System.ArgumentNullException("loyaltyProgramId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/loyaltyprograms/{loyaltyProgramId}");
            urlBuilder_.Replace("{loyaltyProgramId}", System.Uri.EscapeDataString(System.Convert.ToString(loyaltyProgramId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(LoyaltyProgram); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyProgram>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(LoyaltyProgram);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a loyalty program</summary>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteLoyaltyProgramAsync(int loyaltyProgramId)
        {
            return DeleteLoyaltyProgramAsync(loyaltyProgramId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete a loyalty program</summary>
        /// <param name="loyaltyProgramId">The identifier for the loyalty program</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteLoyaltyProgramAsync(int loyaltyProgramId, System.Threading.CancellationToken cancellationToken)
        {
            if (loyaltyProgramId == null)
                throw new System.ArgumentNullException("loyaltyProgramId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/loyaltyprograms/{loyaltyProgramId}");
            urlBuilder_.Replace("{loyaltyProgramId}", System.Uri.EscapeDataString(System.Convert.ToString(loyaltyProgramId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get price for an item in all application subledger storages</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProductLoyaltyPoints> GetPointPriceAsync(int applicationId, NewProductLoyaltyPoints body)
        {
            return GetPointPriceAsync(applicationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get price for an item in all application subledger storages</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ProductLoyaltyPoints> GetPointPriceAsync(int applicationId, NewProductLoyaltyPoints body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/loyaltyPoints");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ProductLoyaltyPoints); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLoyaltyPoints>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ProductLoyaltyPoints);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create an API Key</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiKey> CreateAPIKeyAsync(NewApiKey body)
        {
            return CreateAPIKeyAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create an API Key</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiKey> CreateAPIKeyAsync(NewApiKey body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/api_keys");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiKey); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiKey>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApiKey);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List API Keys for the account</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response11> GetAPIKeysAsync(int? pageSize, int? skip, string sort)
        {
            return GetAPIKeysAsync(pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List API Keys for the account</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response11> GetAPIKeysAsync(int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/api_keys?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response11); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response11>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response11);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Renew the token for an API key</summary>
        /// <param name="apiKeyId">The identifier for the API key</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiKeyWithUsage> RenewAPITokenAsync(NewApiKey body, int apiKeyId)
        {
            return RenewAPITokenAsync(body, apiKeyId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Renew the token for an API key</summary>
        /// <param name="apiKeyId">The identifier for the API key</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiKeyWithUsage> RenewAPITokenAsync(NewApiKey body, int apiKeyId, System.Threading.CancellationToken cancellationToken)
        {
            if (apiKeyId == null)
                throw new System.ArgumentNullException("apiKeyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/api_keys/renew_token");
            urlBuilder_.Replace("{apiKeyId}", System.Uri.EscapeDataString(System.Convert.ToString(apiKeyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiKeyWithUsage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiKeyWithUsage>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApiKeyWithUsage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get API Key</summary>
        /// <param name="apiKeyId">The identifier for the API key</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiKeyWithUsage> GetAPIKeyAsync(int apiKeyId)
        {
            return GetAPIKeyAsync(apiKeyId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get API Key</summary>
        /// <param name="apiKeyId">The identifier for the API key</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiKeyWithUsage> GetAPIKeyAsync(int apiKeyId, System.Threading.CancellationToken cancellationToken)
        {
            if (apiKeyId == null)
                throw new System.ArgumentNullException("apiKeyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api_keys/{apiKeyId}");
            urlBuilder_.Replace("{apiKeyId}", System.Uri.EscapeDataString(System.Convert.ToString(apiKeyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiKeyWithUsage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiKeyWithUsage>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApiKeyWithUsage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update API key data</summary>
        /// <param name="apiKeyId">The identifier for the API key</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiKeyWithUsage> UpdateAPIKeyAsync(int apiKeyId, NewApiKey body)
        {
            return UpdateAPIKeyAsync(apiKeyId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update API key data</summary>
        /// <param name="apiKeyId">The identifier for the API key</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApiKeyWithUsage> UpdateAPIKeyAsync(int apiKeyId, NewApiKey body, System.Threading.CancellationToken cancellationToken)
        {
            if (apiKeyId == null)
                throw new System.ArgumentNullException("apiKeyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api_keys/{apiKeyId}");
            urlBuilder_.Replace("{apiKeyId}", System.Uri.EscapeDataString(System.Convert.ToString(apiKeyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApiKeyWithUsage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiKeyWithUsage>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApiKeyWithUsage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete an API key</summary>
        /// <param name="apiKeyId">The identifier for the API key</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAPIKeyAsync(int apiKeyId)
        {
            return DeleteAPIKeyAsync(apiKeyId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete an API key</summary>
        /// <param name="apiKeyId">The identifier for the API key</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAPIKeyAsync(int apiKeyId, System.Threading.CancellationToken cancellationToken)
        {
            if (apiKeyId == null)
                throw new System.ArgumentNullException("apiKeyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api_keys/{apiKeyId}");
            urlBuilder_.Replace("{apiKeyId}", System.Uri.EscapeDataString(System.Convert.ToString(apiKeyId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a role</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Role> CreateRoleAsync(NewRole body)
        {
            return CreateRoleAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a role</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Role> CreateRoleAsync(NewRole body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/roles");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Role); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Role>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Role);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List roles for the account</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response12> GetRolesAsync(int? pageSize, int? skip, string sort)
        {
            return GetRolesAsync(pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List roles for the account</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response12> GetRolesAsync(int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/roles?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response12); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response12>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response12);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get role</summary>
        /// <param name="roleId">The identifier for the role</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Role> GetRoleAsync(int roleId)
        {
            return GetRoleAsync(roleId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get role</summary>
        /// <param name="roleId">The identifier for the role</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync(int roleId, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/roles/{roleId}");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(System.Convert.ToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Role); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Role>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Role);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update role data</summary>
        /// <param name="roleId">The identifier for this role.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Role> UpdateRoleAsync(string roleId, NewRole body)
        {
            return UpdateRoleAsync(roleId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update role data</summary>
        /// <param name="roleId">The identifier for this role.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Role> UpdateRoleAsync(string roleId, NewRole body, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/roles/{roleId}");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(System.Convert.ToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Role); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Role>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Role);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a role</summary>
        /// <param name="roleId">The identifier for the role</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteRoleAsync(int roleId)
        {
            return DeleteRoleAsync(roleId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete a role</summary>
        /// <param name="roleId">The identifier for the role</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteRoleAsync(int roleId, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/roles/{roleId}");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(System.Convert.ToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create an application storage</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationStorage> CreateStorageAsync(int applicationId, NewApplicationStorage body)
        {
            return CreateStorageAsync(applicationId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create an application storage</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationStorage> CreateStorageAsync(int applicationId, NewApplicationStorage body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationStorage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationStorage>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApplicationStorage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List application storages</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="applicationId">The identifier for the application</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response13> GetStoragesAsync(int? pageSize, int? skip, string sort, int applicationId)
        {
            return GetStoragesAsync(pageSize, skip, sort, applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List application storages</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response13> GetStoragesAsync(int? pageSize, int? skip, string sort, int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response13); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response13>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response13);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get an application storage</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationStorage> GetStorageAsync(int applicationId, int storageId)
        {
            return GetStorageAsync(applicationId, storageId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get an application storage</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationStorage> GetStorageAsync(int applicationId, int storageId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (storageId == null)
                throw new System.ArgumentNullException("storageId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages/{storageId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{storageId}", System.Uri.EscapeDataString(System.Convert.ToString(storageId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationStorage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationStorage>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApplicationStorage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update an application storage</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationStorage> UpdateStorageAsync(int applicationId, int storageId, NewApplicationStorage body)
        {
            return UpdateStorageAsync(applicationId, storageId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update an application storage</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationStorage> UpdateStorageAsync(int applicationId, int storageId, NewApplicationStorage body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (storageId == null)
                throw new System.ArgumentNullException("storageId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages/{storageId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{storageId}", System.Uri.EscapeDataString(System.Convert.ToString(storageId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationStorage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationStorage>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApplicationStorage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create application storage data</summary>
        /// <param name="silent">If set to 'yes', response will be an empty 204, otherwise a list of the key value pairs generated.</param>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response14> CreateStorageDataAsync(string silent, int applicationId, int storageId, System.Collections.Generic.IEnumerable<NewApplicationStorageTuple> body)
        {
            return CreateStorageDataAsync(silent, applicationId, storageId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create application storage data</summary>
        /// <param name="silent">If set to 'yes', response will be an empty 204, otherwise a list of the key value pairs generated.</param>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response14> CreateStorageDataAsync(string silent, int applicationId, int storageId, System.Collections.Generic.IEnumerable<NewApplicationStorageTuple> body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (storageId == null)
                throw new System.ArgumentNullException("storageId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages/{storageId}?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{storageId}", System.Uri.EscapeDataString(System.Convert.ToString(storageId, System.Globalization.CultureInfo.InvariantCulture)));
            if (silent != null) urlBuilder_.Append("silent=").Append(System.Uri.EscapeDataString(System.Convert.ToString(silent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response14); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response14>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("No Content", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response14);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get application storage data</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response15> GetStorageDataAsync(int applicationId, int storageId)
        {
            return GetStorageDataAsync(applicationId, storageId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get application storage data</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response15> GetStorageDataAsync(int applicationId, int storageId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (storageId == null)
                throw new System.ArgumentNullException("storageId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages/{storageId}/data");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{storageId}", System.Uri.EscapeDataString(System.Convert.ToString(storageId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response15); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response15>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response15);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get application storage value</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="keyName">The key for the item</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationStorageTuple> GetStorageValueAsync(int applicationId, int storageId, string keyName)
        {
            return GetStorageValueAsync(applicationId, storageId, keyName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get application storage value</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="keyName">The key for the item</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationStorageTuple> GetStorageValueAsync(int applicationId, int storageId, string keyName, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (storageId == null)
                throw new System.ArgumentNullException("storageId");
    
            if (keyName == null)
                throw new System.ArgumentNullException("keyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages/{storageId}/data/{keyName}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{storageId}", System.Uri.EscapeDataString(System.Convert.ToString(storageId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{keyName}", System.Uri.EscapeDataString(System.Convert.ToString(keyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationStorageTuple); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationStorageTuple>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApplicationStorageTuple);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update one application storage value</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="keyName">The key for the item</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationStorageTuple> UpdateStorageValueAsync(int applicationId, int storageId, string keyName, NewApplicationStorageTuple body)
        {
            return UpdateStorageValueAsync(applicationId, storageId, keyName, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update one application storage value</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="keyName">The key for the item</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationStorageTuple> UpdateStorageValueAsync(int applicationId, int storageId, string keyName, NewApplicationStorageTuple body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (storageId == null)
                throw new System.ArgumentNullException("storageId");
    
            if (keyName == null)
                throw new System.ArgumentNullException("keyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages/{storageId}/data/{keyName}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{storageId}", System.Uri.EscapeDataString(System.Convert.ToString(storageId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{keyName}", System.Uri.EscapeDataString(System.Convert.ToString(keyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationStorageTuple); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationStorageTuple>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApplicationStorageTuple);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete one application storage value</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="keyName">The key for the item</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteStorageValueAsync(int applicationId, string storageId, string keyName)
        {
            return DeleteStorageValueAsync(applicationId, storageId, keyName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete one application storage value</summary>
        /// <param name="applicationId">The identifier for the application</param>
        /// <param name="storageId">The identifier for the storage</param>
        /// <param name="keyName">The key for the item</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteStorageValueAsync(int applicationId, string storageId, string keyName, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (storageId == null)
                throw new System.ArgumentNullException("storageId");
    
            if (keyName == null)
                throw new System.ArgumentNullException("keyName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/storages/{storageId}/data/{keyName}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{storageId}", System.Uri.EscapeDataString(System.Convert.ToString(storageId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{keyName}", System.Uri.EscapeDataString(System.Convert.ToString(keyName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get report of health of application API</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync(int applicationId)
        {
            return GetApplicationApiHealthAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get report of health of application API</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync(int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/health_report");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationApiHealth); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationApiHealth>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApplicationApiHealth);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get access logs for application</summary>
        /// <param name="path">Only return results where the request path matches the given regular expresssion.</param>
        /// <param name="method">Only return results where the request method matches the given regular expresssion.</param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response16> GetAccessLogsAsync(int applicationId, string path, string method, System.DateTime rangeStart, System.DateTime rangeEnd, int? pageSize, int? skip, string sort)
        {
            return GetAccessLogsAsync(applicationId, path, method, rangeStart, rangeEnd, pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get access logs for application</summary>
        /// <param name="path">Only return results where the request path matches the given regular expresssion.</param>
        /// <param name="method">Only return results where the request method matches the given regular expresssion.</param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response16> GetAccessLogsAsync(int applicationId, string path, string method, System.DateTime rangeStart, System.DateTime rangeEnd, int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (rangeStart == null)
                throw new System.ArgumentNullException("rangeStart");
    
            if (rangeEnd == null)
                throw new System.ArgumentNullException("rangeEnd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/access_logs?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (path != null) urlBuilder_.Append("path=").Append(System.Uri.EscapeDataString(System.Convert.ToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (method != null) urlBuilder_.Append("method=").Append(System.Uri.EscapeDataString(System.Convert.ToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeStart=").Append(System.Uri.EscapeDataString(rangeStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeEnd=").Append(System.Uri.EscapeDataString(rangeEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response16); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response16>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response16);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get all access logs</summary>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expresssion.</param>
        /// <param name="method">Only return results where the request method matches the given regular expresssion.</param>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response17> GetAllAccessLogsAsync(System.DateTime rangeStart, System.DateTime rangeEnd, string path, string method, int? pageSize, int? skip, string sort)
        {
            return GetAllAccessLogsAsync(rangeStart, rangeEnd, path, method, pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get all access logs</summary>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expresssion.</param>
        /// <param name="method">Only return results where the request method matches the given regular expresssion.</param>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response17> GetAllAccessLogsAsync(System.DateTime rangeStart, System.DateTime rangeEnd, string path, string method, int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            if (rangeStart == null)
                throw new System.ArgumentNullException("rangeStart");
    
            if (rangeEnd == null)
                throw new System.ArgumentNullException("rangeEnd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/access_logs?");
            urlBuilder_.Append("rangeStart=").Append(System.Uri.EscapeDataString(rangeStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeEnd=").Append(System.Uri.EscapeDataString(rangeEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (path != null) urlBuilder_.Append("path=").Append(System.Uri.EscapeDataString(System.Convert.ToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (method != null) urlBuilder_.Append("method=").Append(System.Uri.EscapeDataString(System.Convert.ToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response17); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response17>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response17);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get analytics of campaigns</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response18> GetCampaignAnalyticsAsync(int? pageSize, int? skip, string sort, System.DateTime rangeStart, System.DateTime rangeEnd, int applicationId, int campaignId)
        {
            return GetCampaignAnalyticsAsync(pageSize, skip, sort, rangeStart, rangeEnd, applicationId, campaignId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get analytics of campaigns</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response18> GetCampaignAnalyticsAsync(int? pageSize, int? skip, string sort, System.DateTime rangeStart, System.DateTime rangeEnd, int applicationId, int campaignId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (campaignId == null)
                throw new System.ArgumentNullException("campaignId");
    
            if (rangeStart == null)
                throw new System.ArgumentNullException("rangeStart");
    
            if (rangeEnd == null)
                throw new System.ArgumentNullException("rangeEnd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/campaigns/{campaignId}/analytics?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{campaignId}", System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeStart=").Append(System.Uri.EscapeDataString(rangeStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeEnd=").Append(System.Uri.EscapeDataString(rangeEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response18); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response18>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response18);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Application Customers</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response19> GetApplicationCustomersAsync(int applicationId)
        {
            return GetApplicationCustomersAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Application Customers</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response19> GetApplicationCustomersAsync(int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/customers");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response19); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response19>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response19);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Application Customer</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationProfile> GetApplicationCustomerAsync(int applicationId, int customerId)
        {
            return GetApplicationCustomerAsync(applicationId, customerId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Application Customer</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationProfile> GetApplicationCustomerAsync(int applicationId, int customerId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/customers/{customerId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(System.Convert.ToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationProfile); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationProfile>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApplicationProfile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Activity Reports for Application Customers</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="name">Only return reports matching the customer name</param>
        /// <param name="customerId">Only return reports matching the customerId</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response20> GetCustomerActivityReportsAsync(int? pageSize, int? skip, string sort, System.DateTime rangeStart, System.DateTime rangeEnd, int applicationId, string name, string customerId, string advocateName)
        {
            return GetCustomerActivityReportsAsync(pageSize, skip, sort, rangeStart, rangeEnd, applicationId, name, customerId, advocateName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Activity Reports for Application Customers</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="name">Only return reports matching the customer name</param>
        /// <param name="customerId">Only return reports matching the customerId</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response20> GetCustomerActivityReportsAsync(int? pageSize, int? skip, string sort, System.DateTime rangeStart, System.DateTime rangeEnd, int applicationId, string name, string customerId, string advocateName, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (rangeStart == null)
                throw new System.ArgumentNullException("rangeStart");
    
            if (rangeEnd == null)
                throw new System.ArgumentNullException("rangeEnd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/customer_activity_reports?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeStart=").Append(System.Uri.EscapeDataString(rangeStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeEnd=").Append(System.Uri.EscapeDataString(rangeEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (name != null) urlBuilder_.Append("name=").Append(System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerId != null) urlBuilder_.Append("customerId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (advocateName != null) urlBuilder_.Append("advocateName=").Append(System.Uri.EscapeDataString(System.Convert.ToString(advocateName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response20); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response20>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response20);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Activity Report for Single Customer</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync(int? pageSize, int? skip, System.DateTime rangeStart, System.DateTime rangeEnd, int applicationId, int customerId)
        {
            return GetCustomerActivityReportAsync(pageSize, skip, rangeStart, rangeEnd, applicationId, customerId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Activity Report for Single Customer</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync(int? pageSize, int? skip, System.DateTime rangeStart, System.DateTime rangeEnd, int applicationId, int customerId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");
    
            if (rangeStart == null)
                throw new System.ArgumentNullException("rangeStart");
    
            if (rangeEnd == null)
                throw new System.ArgumentNullException("rangeEnd");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/customer_activity_reports/{customerId}?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(System.Convert.ToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeStart=").Append(System.Uri.EscapeDataString(rangeStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("rangeEnd=").Append(System.Uri.EscapeDataString(rangeEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CustomerActivityReport); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerActivityReport>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CustomerActivityReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Application Sessions</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response21> GetApplicationSessionsAsync(int? pageSize, int? skip, string sort, string profile, int applicationId)
        {
            return GetApplicationSessionsAsync(pageSize, skip, sort, profile, applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Application Sessions</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response21> GetApplicationSessionsAsync(int? pageSize, int? skip, string sort, string profile, int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/sessions?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (profile != null) urlBuilder_.Append("profile=").Append(System.Uri.EscapeDataString(System.Convert.ToString(profile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response21); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response21>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response21);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Application Session</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync(int applicationId, int sessionId)
        {
            return GetApplicationSessionAsync(applicationId, sessionId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Application Session</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync(int applicationId, int sessionId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (sessionId == null)
                throw new System.ArgumentNullException("sessionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/sessions/{sessionId}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sessionId}", System.Uri.EscapeDataString(System.Convert.ToString(sessionId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ApplicationSession); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationSession>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ApplicationSession);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Applications Events</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es).</param>
        /// <param name="createdBefore">Only return events created before this date</param>
        /// <param name="createdAfter">Only return events created after this date</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match.</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match.</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively.</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively.</param>
        /// <param name="effectsQuery">Effects filter for events. Will perform a full-text search on the text content of the events effects, if any.</param>
        /// <param name="attributesQuery">Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response22> GetApplicationEventsAsync(int? pageSize, int? skip, string sort, string type, System.DateTime? createdBefore, System.DateTime? createdAfter, string session, string profile, string customerName, string customerEmail, string effectsQuery, string attributesQuery, int applicationId)
        {
            return GetApplicationEventsAsync(pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Applications Events</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es).</param>
        /// <param name="createdBefore">Only return events created before this date</param>
        /// <param name="createdAfter">Only return events created after this date</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match.</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match.</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively.</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively.</param>
        /// <param name="effectsQuery">Effects filter for events. Will perform a full-text search on the text content of the events effects, if any.</param>
        /// <param name="attributesQuery">Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response22> GetApplicationEventsAsync(int? pageSize, int? skip, string sort, string type, System.DateTime? createdBefore, System.DateTime? createdAfter, string session, string profile, string customerName, string customerEmail, string effectsQuery, string attributesQuery, int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/events?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (type != null) urlBuilder_.Append("type=").Append(System.Uri.EscapeDataString(System.Convert.ToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdBefore != null) urlBuilder_.Append("createdBefore=").Append(System.Uri.EscapeDataString(createdBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdAfter != null) urlBuilder_.Append("createdAfter=").Append(System.Uri.EscapeDataString(createdAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (session != null) urlBuilder_.Append("session=").Append(System.Uri.EscapeDataString(System.Convert.ToString(session, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (profile != null) urlBuilder_.Append("profile=").Append(System.Uri.EscapeDataString(System.Convert.ToString(profile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerName != null) urlBuilder_.Append("customerName=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customerName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (customerEmail != null) urlBuilder_.Append("customerEmail=").Append(System.Uri.EscapeDataString(System.Convert.ToString(customerEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (effectsQuery != null) urlBuilder_.Append("effectsQuery=").Append(System.Uri.EscapeDataString(System.Convert.ToString(effectsQuery, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (attributesQuery != null) urlBuilder_.Append("attributesQuery=").Append(System.Uri.EscapeDataString(System.Convert.ToString(attributesQuery, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response22); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response22>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response22);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Applications Event Types</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response23> GetApplicationEventTypesAsync(int? pageSize, int? skip, string sort, int applicationId)
        {
            return GetApplicationEventTypesAsync(pageSize, skip, sort, applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Applications Event Types</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response23> GetApplicationEventTypesAsync(int? pageSize, int? skip, string sort, int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/event_types?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response23); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response23>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response23);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Talang Environment</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Environment> GetTalangEnvironmentAsync(int applicationId)
        {
            return GetTalangEnvironmentAsync(applicationId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Talang Environment</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Environment> GetTalangEnvironmentAsync(int applicationId, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/talang_environment");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Environment); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Environment>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Environment);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a custom Talang template</summary>
        /// <param name="name">The name of the template. This is used in the Talang expressions of rules.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TemplateDef> UpdateTalangTemplateAsync(int applicationId, string name, NewTemplateDef body)
        {
            return UpdateTalangTemplateAsync(applicationId, name, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a custom Talang template</summary>
        /// <param name="name">The name of the template. This is used in the Talang expressions of rules.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TemplateDef> UpdateTalangTemplateAsync(int applicationId, string name, NewTemplateDef body, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/talang_templates/{name}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TemplateDef); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateDef>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(TemplateDef);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a custom Talang template</summary>
        /// <param name="name">The name of the template. This is used in the Talang expressions of rules.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteTalangTemplateAsync(int applicationId, string name)
        {
            return DeleteTalangTemplateAsync(applicationId, name, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete a custom Talang template</summary>
        /// <param name="name">The name of the template. This is used in the Talang expressions of rules.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteTalangTemplateAsync(int applicationId, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/applications/{applicationId}/talang_templates/{name}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the library of attributes</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response24> GetAttributeLibraryAsync(int? pageSize, int? skip, string sort)
        {
            return GetAttributeLibraryAsync(pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get the library of attributes</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response24> GetAttributeLibraryAsync(int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/attributes_library?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response24); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response24>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response24);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Define a new custom attribute</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Attribute> CreateAttributeAsync(NewAttribute body)
        {
            return CreateAttributeAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Define a new custom attribute</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Attribute> CreateAttributeAsync(NewAttribute body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/attributes");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Attribute); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Attribute>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Attribute);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List custom attributes</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response25> GetAttributesAsync(int? pageSize, int? skip, string sort)
        {
            return GetAttributesAsync(pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List custom attributes</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response25> GetAttributesAsync(int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/attributes?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response25); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response25>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response25);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a custom attribute</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Attribute> GetAttributeAsync(int attributeId)
        {
            return GetAttributeAsync(attributeId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a custom attribute</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Attribute> GetAttributeAsync(int attributeId, System.Threading.CancellationToken cancellationToken)
        {
            if (attributeId == null)
                throw new System.ArgumentNullException("attributeId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/attributes/{attributeId}");
            urlBuilder_.Replace("{attributeId}", System.Uri.EscapeDataString(System.Convert.ToString(attributeId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Attribute); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Attribute>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Attribute);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a custom attribute</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync(int attributeId, NewAttribute body)
        {
            return UpdateAttributeAsync(attributeId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update a custom attribute</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync(int attributeId, NewAttribute body, System.Threading.CancellationToken cancellationToken)
        {
            if (attributeId == null)
                throw new System.ArgumentNullException("attributeId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/attributes/{attributeId}");
            urlBuilder_.Replace("{attributeId}", System.Uri.EscapeDataString(System.Convert.ToString(attributeId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Attribute); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Attribute>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Attribute);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a custom attribute</summary>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAttributeAsync(int attributeId)
        {
            return DeleteAttributeAsync(attributeId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete a custom attribute</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAttributeAsync(int attributeId, System.Threading.CancellationToken cancellationToken)
        {
            if (attributeId == null)
                throw new System.ArgumentNullException("attributeId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/attributes/{attributeId}");
            urlBuilder_.Replace("{attributeId}", System.Uri.EscapeDataString(System.Convert.ToString(attributeId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Webhooks</summary>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response26> GetWebhooksAsync(string applicationIds, string sort, int? pageSize, int? skip)
        {
            return GetWebhooksAsync(applicationIds, sort, pageSize, skip, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Webhooks</summary>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response26> GetWebhooksAsync(string applicationIds, string sort, int? pageSize, int? skip, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/webhooks?");
            if (applicationIds != null) urlBuilder_.Append("applicationIds=").Append(System.Uri.EscapeDataString(System.Convert.ToString(applicationIds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response26); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response26>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response26);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create Webhook</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Webhook> CreateWebhookAsync(NewWebhook body)
        {
            return CreateWebhookAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create Webhook</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Webhook> CreateWebhookAsync(NewWebhook body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/webhooks");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Webhook); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Webhook>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Webhook);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Webhook</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Webhook> GetWebhookAsync(int webhookId)
        {
            return GetWebhookAsync(webhookId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Webhook</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookAsync(int webhookId, System.Threading.CancellationToken cancellationToken)
        {
            if (webhookId == null)
                throw new System.ArgumentNullException("webhookId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/webhooks/{webhookId}");
            urlBuilder_.Replace("{webhookId}", System.Uri.EscapeDataString(System.Convert.ToString(webhookId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Webhook); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Webhook>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Webhook);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update Webhook</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Webhook> UpdateWebhookAsync(int webhookId, Webhook body)
        {
            return UpdateWebhookAsync(webhookId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update Webhook</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Webhook> UpdateWebhookAsync(int webhookId, Webhook body, System.Threading.CancellationToken cancellationToken)
        {
            if (webhookId == null)
                throw new System.ArgumentNullException("webhookId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/webhooks/{webhookId}");
            urlBuilder_.Replace("{webhookId}", System.Uri.EscapeDataString(System.Convert.ToString(webhookId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Webhook); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Webhook>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Webhook);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete Webhook</summary>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteWebhookAsync(int webhookId)
        {
            return DeleteWebhookAsync(webhookId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete Webhook</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteWebhookAsync(int webhookId, System.Threading.CancellationToken cancellationToken)
        {
            if (webhookId == null)
                throw new System.ArgumentNullException("webhookId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/webhooks/{webhookId}");
            urlBuilder_.Replace("{webhookId}", System.Uri.EscapeDataString(System.Convert.ToString(webhookId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Webhook Log Entries</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="webhookId">Filter results by Webhook.</param>
        /// <param name="campaignId">Filter results by campaign.</param>
        /// <param name="requestUuid">Filter results by request UUID.</param>
        /// <param name="status">Filter results by HTTTP status codes.</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string.</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response27> GetWebhookLogsAsync(int? pageSize, int? skip, string sort, object webhookId, object applicationId, object campaignId, string requestUuid, Status? status, System.DateTime? createdBefore, System.DateTime? createdAfter)
        {
            return GetWebhookLogsAsync(pageSize, skip, sort, webhookId, applicationId, campaignId, requestUuid, status, createdBefore, createdAfter, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Webhook Log Entries</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="webhookId">Filter results by Webhook.</param>
        /// <param name="campaignId">Filter results by campaign.</param>
        /// <param name="requestUuid">Filter results by request UUID.</param>
        /// <param name="status">Filter results by HTTTP status codes.</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string.</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response27> GetWebhookLogsAsync(int? pageSize, int? skip, string sort, object webhookId, object applicationId, object campaignId, string requestUuid, Status? status, System.DateTime? createdBefore, System.DateTime? createdAfter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/webhook_logs?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (webhookId != null) urlBuilder_.Append("webhookId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(webhookId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (applicationId != null) urlBuilder_.Append("applicationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(applicationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (campaignId != null) urlBuilder_.Append("campaignId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(campaignId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (requestUuid != null) urlBuilder_.Append("requestUuid=").Append(System.Uri.EscapeDataString(System.Convert.ToString(requestUuid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(status.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdBefore != null) urlBuilder_.Append("createdBefore=").Append(System.Uri.EscapeDataString(createdBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (createdAfter != null) urlBuilder_.Append("createdAfter=").Append(System.Uri.EscapeDataString(createdAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response27); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response27>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response27);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Event Types</summary>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies `includeOldVersions`.</param>
        /// <param name="includeOldVersions">Include all versions of every event type.</param>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response28> GetEventTypesAsync(string applicationIds, string name, object includeOldVersions, int? pageSize, int? skip, string sort)
        {
            return GetEventTypesAsync(applicationIds, name, includeOldVersions, pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Event Types</summary>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies `includeOldVersions`.</param>
        /// <param name="includeOldVersions">Include all versions of every event type.</param>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response28> GetEventTypesAsync(string applicationIds, string name, object includeOldVersions, int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/event_types?");
            if (applicationIds != null) urlBuilder_.Append("applicationIds=").Append(System.Uri.EscapeDataString(System.Convert.ToString(applicationIds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (name != null) urlBuilder_.Append("name=").Append(System.Uri.EscapeDataString(System.Convert.ToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (includeOldVersions != null) urlBuilder_.Append("includeOldVersions=").Append(System.Uri.EscapeDataString(System.Convert.ToString(includeOldVersions, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response28); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response28>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response28);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create Event Type</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventType> CreateEventTypeAsync(NewEventType body)
        {
            return CreateEventTypeAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create Event Type</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventType> CreateEventTypeAsync(NewEventType body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/event_types");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(EventType); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<EventType>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(EventType);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Event Type</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventType> GetEventTypeAsync(int eventTypeId)
        {
            return GetEventTypeAsync(eventTypeId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Event Type</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventType> GetEventTypeAsync(int eventTypeId, System.Threading.CancellationToken cancellationToken)
        {
            if (eventTypeId == null)
                throw new System.ArgumentNullException("eventTypeId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/event_types/{eventTypeId}");
            urlBuilder_.Replace("{eventTypeId}", System.Uri.EscapeDataString(System.Convert.ToString(eventTypeId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(EventType); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<EventType>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(EventType);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete Event Type</summary>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteEventTypeAsync(int eventTypeId)
        {
            return DeleteEventTypeAsync(eventTypeId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Delete Event Type</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteEventTypeAsync(int eventTypeId, System.Threading.CancellationToken cancellationToken)
        {
            if (eventTypeId == null)
                throw new System.ArgumentNullException("eventTypeId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/event_types/{eventTypeId}");
            urlBuilder_.Replace("{eventTypeId}", System.Uri.EscapeDataString(System.Convert.ToString(eventTypeId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>List Users in your account</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response29> GetUsersAsync(int? pageSize, int? skip, string sort)
        {
            return GetUsersAsync(pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>List Users in your account</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response29> GetUsersAsync(int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/users?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response29); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response29>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response29);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a single User</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<User> GetUserAsync(int userId)
        {
            return GetUserAsync(userId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a single User</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User> GetUserAsync(int userId, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/users/{userId}");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(User); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<User>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(User);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update User data</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<User> UpdateUserAsync(int userId, UpdateUser body)
        {
            return UpdateUserAsync(userId, body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update User data</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync(int userId, UpdateUser body, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/users/{userId}");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(System.Convert.ToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(User); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<User>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(User);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a log of changes to an account</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response30> GetChangesAsync(int? pageSize, int? skip, string sort)
        {
            return GetChangesAsync(pageSize, skip, sort, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get a log of changes to an account</summary>
        /// <param name="pageSize">The number of items to include in this response.</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets.</param>
        /// <param name="sort">The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response30> GetChangesAsync(int? pageSize, int? skip, string sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/changes?");
            if (pageSize != null) urlBuilder_.Append("pageSize=").Append(System.Uri.EscapeDataString(System.Convert.ToString(pageSize.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null) urlBuilder_.Append("skip=").Append(System.Uri.EscapeDataString(System.Convert.ToString(skip.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response30); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response30>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response30);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new user invitation</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<User> CreateInviteAsync(NewInvitation body)
        {
            return CreateInviteAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a new user invitation</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User> CreateInviteAsync(NewInvitation body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/invites");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(User); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<User>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(User);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Send an invite token via email to the invited User</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NewInviteEmail> CreateInviteEmailAsync(NewInviteEmail body)
        {
            return CreateInviteEmailAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Send an invite token via email to the invited User</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NewInviteEmail> CreateInviteEmailAsync(NewInviteEmail body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/invite_emails");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(NewInviteEmail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<NewInviteEmail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(NewInviteEmail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Accept an invitation</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Session> AcceptInviteAsync(NewUser body)
        {
            return AcceptInviteAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Accept an invitation</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Session> AcceptInviteAsync(NewUser body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/accept_invite");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Session); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Session>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Session);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Send a link to recover password to the email of an existing account</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync(NewPasswordEmail body)
        {
            return CreatePasswordRecoveryEmailAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Send a link to recover password to the email of an existing account</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync(NewPasswordEmail body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/password_recovery_emails");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(NewPasswordEmail); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<NewPasswordEmail>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(NewPasswordEmail);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Reset a password following the link provided by the password recovery email</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync(NewPassword body)
        {
            return ResetPasswordAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Reset a password following the link provided by the password recovery email</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync(NewPassword body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/reset_password");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(NewPassword); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<NewPassword>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(NewPassword);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Account</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Account> GetAccountAsync(int accountId)
        {
            return GetAccountAsync(accountId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Account</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Account> GetAccountAsync(int accountId, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/accounts/{accountId}");
            urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(System.Convert.ToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Account); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Account>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Account);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update Account</summary>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Account> UpdateAccountAsync(UpdateAccount body, int accountId)
        {
            return UpdateAccountAsync(body, accountId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update Account</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Account> UpdateAccountAsync(UpdateAccount body, int accountId, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/accounts/{accountId}");
            urlBuilder_.Replace("{accountId}", System.Uri.EscapeDataString(System.Convert.ToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Account); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Account>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Account);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a Session</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Session> CreateSessionAsync(LoginParams body)
        {
            return CreateSessionAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a Session</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Session> CreateSessionAsync(LoginParams body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/sessions");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Session); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Session>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Session);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Destroy a Session</summary>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DestroySessionAsync()
        {
            return DestroySessionAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Destroy a Session</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DestroySessionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/sessions");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Campaign Manager config</summary>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerConfig> GetManagerConfigAsync()
        {
            return GetManagerConfigAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Campaign Manager config</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerConfig> GetManagerConfigAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/manager_config");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ManagerConfig); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ManagerConfig>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ManagerConfig);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update Campaign Manager config</summary>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerConfig> UpdateManagerConfigAsync(ManagerConfig body)
        {
            return UpdateManagerConfigAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Update Campaign Manager config</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerConfig> UpdateManagerConfigAsync(ManagerConfig body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/manager_config");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ManagerConfig); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ManagerConfig>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ManagerConfig);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Exports</summary>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response31> GetExportsAsync()
        {
            return GetExportsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Exports</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response31> GetExportsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/exports");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response31); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response31>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Response31);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Record new Export Timestamp</summary>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Export> CreateExportAsync(NewExport body)
        {
            return CreateExportAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Record new Export Timestamp</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="TalonOneException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Export> CreateExportAsync(NewExport body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/v1/exports");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Export); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Export>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception) 
                            {
                                throw new TalonOneException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new TalonOneException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Export);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ErrorResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;
        private System.Collections.ObjectModel.ObservableCollection<APIError> _errors;
    
        /// <summary>A message describing the error.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array of individual problems encountered during the request.</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<APIError> Errors
        {
            get { return _errors; }
            set 
            {
                if (_errors != value)
                {
                    _errors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class APIError : System.ComponentModel.INotifyPropertyChanged
    {
        private string _title;
        private string _details;
        private ErrorSource _source = new ErrorSource();
    
        /// <summary>Short description of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Longer description of this specific instance of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        public ErrorSource Source
        {
            get { return _source; }
            set 
            {
                if (_source != value)
                {
                    _source = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static APIError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<APIError>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>The source of the current error, exactly one of `pointer` or `parameter` will be defined.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ErrorSource : System.ComponentModel.INotifyPropertyChanged
    {
        private string _pointer;
        private string _parameter;
    
        /// <summary>Pointer to the path in the payload that caused this error.</summary>
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pointer
        {
            get { return _pointer; }
            set 
            {
                if (_pointer != value)
                {
                    _pointer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Query parameter that caused this error.</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter
        {
            get { return _parameter; }
            set 
            {
                if (_parameter != value)
                {
                    _parameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorSource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorSource>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CouponValue : System.ComponentModel.INotifyPropertyChanged
    {
        private string _value;
    
        /// <summary>The coupon code.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CouponValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CouponValue>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CouponConstraints : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _usageLimit;
        private System.DateTime? _startDate;
        private System.DateTime? _expiryDate;
    
        /// <summary>The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usageLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsageLimit
        {
            get { return _usageLimit; }
            set 
            {
                if (_usageLimit != value)
                {
                    _usageLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp at which point the coupon becomes valid.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpiryDate
        {
            get { return _expiryDate; }
            set 
            {
                if (_expiryDate != value)
                {
                    _expiryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CouponConstraints FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CouponConstraints>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CodeGeneratorSettings : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<string> _validCharacters = new System.Collections.ObjectModel.ObservableCollection<string>();
        private string _couponPattern;
    
        /// <summary>Set of characters to be used when generating random part of code. Defaults to [A-Z, 0-9] (in terms of RegExp).</summary>
        [Newtonsoft.Json.JsonProperty("validCharacters", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> ValidCharacters
        {
            get { return _validCharacters; }
            set 
            {
                if (_validCharacters != value)
                {
                    _validCharacters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The pattern that will be used to generate coupon codes. The character `#` acts as a placeholder and will be replaced by a random character from the `validCharacters` set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("couponPattern", Required = Newtonsoft.Json.Required.Always)]
        public string CouponPattern
        {
            get { return _couponPattern; }
            set 
            {
                if (_couponPattern != value)
                {
                    _couponPattern = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CodeGeneratorSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CodeGeneratorSettings>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Session : System.ComponentModel.INotifyPropertyChanged
    {
        private int _userId;
        private string _token;
        private System.DateTime _created;
    
        /// <summary>The ID of the user of this session</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId
        {
            get { return _userId; }
            set 
            {
                if (_userId != value)
                {
                    _userId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An opaque session identifier</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unix timestamp indicating when the session was first created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Session FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Session>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class LoginParams : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _password;
    
        /// <summary>The email address associated with your account.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The password for your account.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LoginParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginParams>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewApiKey : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _description;
        private int _roleId;
        private int? _applicationId;
    
        /// <summary>The name of this API key.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer description of the API key.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the role to be used.</summary>
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Always)]
        public int RoleId
        {
            get { return _roleId; }
            set 
            {
                if (_roleId != value)
                {
                    _roleId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the application to be used for integration requests.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewApiKey FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewApiKey>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ApiKey : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private int _accountId;
        private string _name;
        private string _description;
        private int _roleId;
        private int? _applicationId;
        private string _token;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of this API key.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer description of the API key.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the role to be used.</summary>
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Always)]
        public int RoleId
        {
            get { return _roleId; }
            set 
            {
                if (_roleId != value)
                {
                    _roleId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the application to be used for integration requests.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Token for the API Key.</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApiKey FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiKey>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ApiKeyWithUsage : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private int _accountId;
        private string _name;
        private string _description;
        private int _roleId;
        private int? _applicationId;
        private string _token;
        private int _usageCount;
        private System.DateTime _lastUsed;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of this API key.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer description of the API key.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the role to be used.</summary>
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Always)]
        public int RoleId
        {
            get { return _roleId; }
            set 
            {
                if (_roleId != value)
                {
                    _roleId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the application to be used for integration requests.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Token for the API Key.</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of times the API key was used.</summary>
        [Newtonsoft.Json.JsonProperty("usageCount", Required = Newtonsoft.Json.Required.Always)]
        public int UsageCount
        {
            get { return _usageCount; }
            set 
            {
                if (_usageCount != value)
                {
                    _usageCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp of the last usage of the API key.</summary>
        [Newtonsoft.Json.JsonProperty("lastUsed", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime LastUsed
        {
            get { return _lastUsed; }
            set 
            {
                if (_lastUsed != value)
                {
                    _lastUsed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApiKeyWithUsage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiKeyWithUsage>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewRole : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> _policy = new System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>();
    
        /// <summary>The name of this application.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> Policy
        {
            get { return _policy; }
            set 
            {
                if (_policy != value)
                {
                    _policy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewRole FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewRole>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Role : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> _policy = new System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>();
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private int _accountId;
    
        /// <summary>The name of this application.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> Policy
        {
            get { return _policy; }
            set 
            {
                if (_policy != value)
                {
                    _policy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Role FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Role>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewApplication : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _description;
        private string _type;
        private string _key;
        private string _timezone;
        private string _currency;
    
        /// <summary>The name of this application.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer description of the application.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Type of the application system ("applicationware", "woocommerce", "custom", …)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Hex key for HMAC-signing API calls as coming from this application (16 hex digits)</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A string containing an IANA timezone descriptor.</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Always)]
        public string Timezone
        {
            get { return _timezone; }
            set 
            {
                if (_timezone != value)
                {
                    _timezone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A string describing a default currency for new customer sessions.</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewApplication FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewApplication>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Application : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private int _accountId;
        private string _name;
        private string _description;
        private string _type;
        private string _key;
        private string _timezone;
        private string _currency;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of this application.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer description of the application.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Type of the application system ("applicationware", "woocommerce", "custom", …)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Hex key for HMAC-signing API calls as coming from this application (16 hex digits)</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A string containing an IANA timezone descriptor.</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Always)]
        public string Timezone
        {
            get { return _timezone; }
            set 
            {
                if (_timezone != value)
                {
                    _timezone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A string describing a default currency for new customer sessions.</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Application FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewCampaign : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _description;
        private System.DateTime? _startTime;
        private System.DateTime? _endTime;
        private object _attributes;
        private NewCampaignState _state = TalonOne.NewCampaignState.Enabled;
        private int? _activeRulesetId;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags = new System.Collections.ObjectModel.ObservableCollection<string>();
        private CodeGeneratorSettings _couponSettings;
        private CodeGeneratorSettings _referralSettings;
        private System.Collections.ObjectModel.ObservableCollection<LimitConfig> _limits = new System.Collections.ObjectModel.ObservableCollection<LimitConfig>();
    
        /// <summary>A friendly name for this campaign.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A detailed description of the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Datetime when the campaign will become active.</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartTime
        {
            get { return _startTime; }
            set 
            {
                if (_startTime != value)
                {
                    _startTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Datetime when the campaign will become in-active.</summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndTime
        {
            get { return _endTime; }
            set 
            {
                if (_endTime != value)
                {
                    _endTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary properties associated with this campaign</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A disabled or archived campaign is not evaluated for rules or coupons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewCampaignState State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of Ruleset this campaign applies on customer session evaluation.</summary>
        [Newtonsoft.Json.JsonProperty("activeRulesetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActiveRulesetId
        {
            get { return _activeRulesetId; }
            set 
            {
                if (_activeRulesetId != value)
                {
                    _activeRulesetId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A list of tags for the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("couponSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeGeneratorSettings CouponSettings
        {
            get { return _couponSettings; }
            set 
            {
                if (_couponSettings != value)
                {
                    _couponSettings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referralSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeGeneratorSettings ReferralSettings
        {
            get { return _referralSettings; }
            set 
            {
                if (_referralSettings != value)
                {
                    _referralSettings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The set of limits that will operate for this campaign</summary>
        [Newtonsoft.Json.JsonProperty("limits", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LimitConfig> Limits
        {
            get { return _limits; }
            set 
            {
                if (_limits != value)
                {
                    _limits = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewCampaign FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewCampaign>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Campaign : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _applicationId;
        private int _userId;
        private string _name;
        private string _description;
        private System.DateTime? _startTime;
        private System.DateTime? _endTime;
        private object _attributes;
        private CampaignState _state = TalonOne.CampaignState.Enabled;
        private int? _activeRulesetId;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags = new System.Collections.ObjectModel.ObservableCollection<string>();
        private CodeGeneratorSettings _couponSettings;
        private CodeGeneratorSettings _referralSettings;
        private System.Collections.ObjectModel.ObservableCollection<LimitConfig> _limits = new System.Collections.ObjectModel.ObservableCollection<LimitConfig>();
        private int? _couponRedemptionCount;
        private int? _discountCount;
        private System.DateTime? _lastActivity;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId
        {
            get { return _userId; }
            set 
            {
                if (_userId != value)
                {
                    _userId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A friendly name for this campaign.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A detailed description of the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Datetime when the campaign will become active.</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartTime
        {
            get { return _startTime; }
            set 
            {
                if (_startTime != value)
                {
                    _startTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Datetime when the campaign will become in-active.</summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndTime
        {
            get { return _endTime; }
            set 
            {
                if (_endTime != value)
                {
                    _endTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary properties associated with this campaign</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A disabled or archived campaign is not evaluated for rules or coupons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CampaignState State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of Ruleset this campaign applies on customer session evaluation.</summary>
        [Newtonsoft.Json.JsonProperty("activeRulesetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActiveRulesetId
        {
            get { return _activeRulesetId; }
            set 
            {
                if (_activeRulesetId != value)
                {
                    _activeRulesetId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A list of tags for the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("couponSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeGeneratorSettings CouponSettings
        {
            get { return _couponSettings; }
            set 
            {
                if (_couponSettings != value)
                {
                    _couponSettings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("referralSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeGeneratorSettings ReferralSettings
        {
            get { return _referralSettings; }
            set 
            {
                if (_referralSettings != value)
                {
                    _referralSettings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The set of limits that will operate for this campaign</summary>
        [Newtonsoft.Json.JsonProperty("limits", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LimitConfig> Limits
        {
            get { return _limits; }
            set 
            {
                if (_limits != value)
                {
                    _limits = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of coupons redeemed in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("couponRedemptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CouponRedemptionCount
        {
            get { return _couponRedemptionCount; }
            set 
            {
                if (_couponRedemptionCount != value)
                {
                    _couponRedemptionCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Total amount of discounts redeemed in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("discountCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiscountCount
        {
            get { return _discountCount; }
            set 
            {
                if (_discountCount != value)
                {
                    _discountCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp of the most recent event received by this campaign.</summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastActivity
        {
            get { return _lastActivity; }
            set 
            {
                if (_lastActivity != value)
                {
                    _lastActivity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Campaign FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Campaign>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewRuleset : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Rule> _rules = new System.Collections.ObjectModel.ObservableCollection<Rule>();
    
        /// <summary>Set of rules to apply.</summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Rule> Rules
        {
            get { return _rules; }
            set 
            {
                if (_rules != value)
                {
                    _rules = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewRuleset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewRuleset>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Ruleset : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _campaignId;
        private int _userId;
        private System.Collections.ObjectModel.ObservableCollection<Rule> _rules = new System.Collections.ObjectModel.ObservableCollection<Rule>();
        private System.DateTime? _activatedAt;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the campaign that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
        public int CampaignId
        {
            get { return _campaignId; }
            set 
            {
                if (_campaignId != value)
                {
                    _campaignId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId
        {
            get { return _userId; }
            set 
            {
                if (_userId != value)
                {
                    _userId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Set of rules to apply.</summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Rule> Rules
        {
            get { return _rules; }
            set 
            {
                if (_rules != value)
                {
                    _rules = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp indicating when this Ruleset was activated.</summary>
        [Newtonsoft.Json.JsonProperty("activatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ActivatedAt
        {
            get { return _activatedAt; }
            set 
            {
                if (_activatedAt != value)
                {
                    _activatedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Ruleset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Ruleset>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewApplicationStorage : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private object _datatype = new object();
        private string _description;
    
        /// <summary>Identifier for the information to be saved, e.g. "Loyalty points for SKU".</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A JSON Schema describing the information to be saved in the storage</summary>
        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.Always)]
        public object Datatype
        {
            get { return _datatype; }
            set 
            {
                if (_datatype != value)
                {
                    _datatype = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description of the application store</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewApplicationStorage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewApplicationStorage>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ApplicationStorage : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private int _applicationId;
        private string _name;
        private object _datatype = new object();
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _usedAt = new System.Collections.ObjectModel.ObservableCollection<string>();
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Identifier for the information to be saved, e.g. "Loyalty points for SKU".</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A JSON Schema describing the information to be saved in the storage</summary>
        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.Always)]
        public object Datatype
        {
            get { return _datatype; }
            set 
            {
                if (_datatype != value)
                {
                    _datatype = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description of the application store</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>array of rulesets where the application storage is used</summary>
        [Newtonsoft.Json.JsonProperty("usedAt", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> UsedAt
        {
            get { return _usedAt; }
            set 
            {
                if (_usedAt != value)
                {
                    _usedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationStorage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationStorage>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewApplicationStorageTuple : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
        private string _value;
    
        /// <summary>Key information that will map to a value, e.g. SKU number "LEV-JN-SL-36-GN".</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewApplicationStorageTuple FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewApplicationStorageTuple>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ApplicationStorageTuple : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private string _key;
        private string _value;
        private int _storageId;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Key information that will map to a value, e.g. SKU number "LEV-JN-SL-36-GN".</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the storage in which the data resides</summary>
        [Newtonsoft.Json.JsonProperty("storageId", Required = Newtonsoft.Json.Required.Always)]
        public int StorageId
        {
            get { return _storageId; }
            set 
            {
                if (_storageId != value)
                {
                    _storageId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationStorageTuple FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationStorageTuple>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewProductLoyaltyPoints : System.ComponentModel.INotifyPropertyChanged
    {
        private CartItem _cartItem;
    
        [Newtonsoft.Json.JsonProperty("cartItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CartItem CartItem
        {
            get { return _cartItem; }
            set 
            {
                if (_cartItem != value)
                {
                    _cartItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewProductLoyaltyPoints FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewProductLoyaltyPoints>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ProductLoyaltyPoints : System.ComponentModel.INotifyPropertyChanged
    {
        private CartItem _cartItem = new CartItem();
        private System.Collections.Generic.Dictionary<string, int> _pointPrices = new System.Collections.Generic.Dictionary<string, int>();
    
        [Newtonsoft.Json.JsonProperty("cartItem", Required = Newtonsoft.Json.Required.Always)]
        public CartItem CartItem
        {
            get { return _cartItem; }
            set 
            {
                if (_cartItem != value)
                {
                    _cartItem = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Prices in loyalty points.</summary>
        [Newtonsoft.Json.JsonProperty("pointPrices", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.Dictionary<string, int> PointPrices
        {
            get { return _pointPrices; }
            set 
            {
                if (_pointPrices != value)
                {
                    _pointPrices = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProductLoyaltyPoints FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLoyaltyPoints>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Binding : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private System.Collections.ObjectModel.ObservableCollection<object> _expression = new System.Collections.ObjectModel.ObservableCollection<object>();
    
        /// <summary>A descriptive name for the value to be bound.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A Talang expression that will be evaluated and its result attached to the name of the binding.</summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<object> Expression
        {
            get { return _expression; }
            set 
            {
                if (_expression != value)
                {
                    _expression = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Binding FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Binding>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Rule : System.ComponentModel.INotifyPropertyChanged
    {
        private string _title;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<Binding> _bindings;
        private System.Collections.ObjectModel.ObservableCollection<object> _condition = new System.Collections.ObjectModel.ObservableCollection<object>();
        private System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>> _effects = new System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>>();
    
        /// <summary>A short description of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer, more detailed description of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.</summary>
        [Newtonsoft.Json.JsonProperty("bindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Binding> Bindings
        {
            get { return _bindings; }
            set 
            {
                if (_bindings != value)
                {
                    _bindings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A Talang expression that will be evaluated in the context of the given event.</summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<object> Condition
        {
            get { return _condition; }
            set 
            {
                if (_condition != value)
                {
                    _condition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array of effectful Talang expressions in arrays that will be evaluated when a rule matches.</summary>
        [Newtonsoft.Json.JsonProperty("effects", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>> Effects
        {
            get { return _effects; }
            set 
            {
                if (_effects != value)
                {
                    _effects = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Rule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rule>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum LimitEntityEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = "Coupon")]
        Coupon = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Referral")]
        Referral = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Profile")]
        Profile = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class LimitConfig : System.ComponentModel.INotifyPropertyChanged
    {
        private LimitConfigAction _action;
        private double _limit;
        private System.Collections.ObjectModel.ObservableCollection<LimitEntityEnum> _entities = new System.Collections.ObjectModel.ObservableCollection<LimitEntityEnum>();
    
        /// <summary>The limitable action to which this limit will be applied</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LimitConfigAction Action
        {
            get { return _action; }
            set 
            {
                if (_action != value)
                {
                    _action = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The value to set for the limit</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public double Limit
        {
            get { return _limit; }
            set 
            {
                if (_limit != value)
                {
                    _limit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The entities that make the address of this limit</summary>
        [Newtonsoft.Json.JsonProperty("entities", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.ObjectModel.ObservableCollection<LimitEntityEnum> Entities
        {
            get { return _entities; }
            set 
            {
                if (_entities != value)
                {
                    _entities = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LimitConfig FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LimitConfig>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CampaignSet : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _applicationId;
        private CampaignSetBranchNode _set = new CampaignSetBranchNode();
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("set", Required = Newtonsoft.Json.Required.Always)]
        public CampaignSetBranchNode Set
        {
            get { return _set; }
            set 
            {
                if (_set != value)
                {
                    _set = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CampaignSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CampaignSet>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CampaignSetNode : System.ComponentModel.INotifyPropertyChanged
    {
        private string _type;
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CampaignSetNode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CampaignSetNode>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CampaignSetBranchNode : System.ComponentModel.INotifyPropertyChanged
    {
        private CampaignSetBranchNodeType _type;
        private string _name;
        private CampaignSetBranchNodeOperator _operator;
        private System.Collections.ObjectModel.ObservableCollection<CampaignSetNode> _elements = new System.Collections.ObjectModel.ObservableCollection<CampaignSetNode>();
    
        /// <summary>Indicates the node type</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CampaignSetBranchNodeType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the set</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>How does the set operates on its elements</summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CampaignSetBranchNodeOperator Operator
        {
            get { return _operator; }
            set 
            {
                if (_operator != value)
                {
                    _operator = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Child elements of this set</summary>
        [Newtonsoft.Json.JsonProperty("elements", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<CampaignSetNode> Elements
        {
            get { return _elements; }
            set 
            {
                if (_elements != value)
                {
                    _elements = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CampaignSetBranchNode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CampaignSetBranchNode>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CampaignSetLeafNode : System.ComponentModel.INotifyPropertyChanged
    {
        private CampaignSetLeafNodeType _type;
        private int _campaignId;
    
        /// <summary>Indicates the node type</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CampaignSetLeafNodeType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the campaign</summary>
        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
        public int CampaignId
        {
            get { return _campaignId; }
            set 
            {
                if (_campaignId != value)
                {
                    _campaignId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CampaignSetLeafNode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CampaignSetLeafNode>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewCampaignSet : System.ComponentModel.INotifyPropertyChanged
    {
        private int _applicationId;
        private CampaignSetBranchNode _set = new CampaignSetBranchNode();
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("set", Required = Newtonsoft.Json.Required.Always)]
        public CampaignSetBranchNode Set
        {
            get { return _set; }
            set 
            {
                if (_set != value)
                {
                    _set = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewCampaignSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewCampaignSet>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewReferral : System.ComponentModel.INotifyPropertyChanged
    {
        private int _campaignId;
        private string _advocateProfileIntegrationId;
        private string _friendProfileIntegrationId;
        private System.DateTime? _startDate;
        private System.DateTime? _expiryDate;
    
        /// <summary>Id of the referral's Campaign</summary>
        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
        public int CampaignId
        {
            get { return _campaignId; }
            set 
            {
                if (_campaignId != value)
                {
                    _campaignId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Integration Id of the Advocate's Profile</summary>
        [Newtonsoft.Json.JsonProperty("advocateProfileIntegrationId", Required = Newtonsoft.Json.Required.Always)]
        public string AdvocateProfileIntegrationId
        {
            get { return _advocateProfileIntegrationId; }
            set 
            {
                if (_advocateProfileIntegrationId != value)
                {
                    _advocateProfileIntegrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An optional Integration Id of the Friend's Profile</summary>
        [Newtonsoft.Json.JsonProperty("friendProfileIntegrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendProfileIntegrationId
        {
            get { return _friendProfileIntegrationId; }
            set 
            {
                if (_friendProfileIntegrationId != value)
                {
                    _friendProfileIntegrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp at which point the referral code becomes valid.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpiryDate
        {
            get { return _expiryDate; }
            set 
            {
                if (_expiryDate != value)
                {
                    _expiryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewReferral FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewReferral>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Referral : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _campaignId;
        private string _advocateProfileIntegrationId;
        private string _friendProfileIntegrationId;
        private System.DateTime? _startDate;
        private System.DateTime? _expiryDate;
        private string _code;
        private int _usageCounter;
        private int _usageLimit;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the referral's Campaign</summary>
        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
        public int CampaignId
        {
            get { return _campaignId; }
            set 
            {
                if (_campaignId != value)
                {
                    _campaignId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Integration Id of the Advocate's Profile</summary>
        [Newtonsoft.Json.JsonProperty("advocateProfileIntegrationId", Required = Newtonsoft.Json.Required.Always)]
        public string AdvocateProfileIntegrationId
        {
            get { return _advocateProfileIntegrationId; }
            set 
            {
                if (_advocateProfileIntegrationId != value)
                {
                    _advocateProfileIntegrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An optional Integration Id of the Friend's Profile</summary>
        [Newtonsoft.Json.JsonProperty("friendProfileIntegrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendProfileIntegrationId
        {
            get { return _friendProfileIntegrationId; }
            set 
            {
                if (_friendProfileIntegrationId != value)
                {
                    _friendProfileIntegrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp at which point the referral code becomes valid. Timestamp at which point the referral code becomes valid.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiry date of the referral code. A referral code never expires if this is omitted, zero, or negative. Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpiryDate
        {
            get { return _expiryDate; }
            set 
            {
                if (_expiryDate != value)
                {
                    _expiryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The referral code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of times this referral code has been successfully used.</summary>
        [Newtonsoft.Json.JsonProperty("usageCounter", Required = Newtonsoft.Json.Required.Always)]
        public int UsageCounter
        {
            get { return _usageCounter; }
            set 
            {
                if (_usageCounter != value)
                {
                    _usageCounter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usageLimit", Required = Newtonsoft.Json.Required.Always)]
        public int UsageLimit
        {
            get { return _usageLimit; }
            set 
            {
                if (_usageLimit != value)
                {
                    _usageLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Referral FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Referral>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Tier : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private int _minPoints;
        private double _collectMultiplier;
    
        /// <summary>The name of the tier</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Points needed to reach this level</summary>
        [Newtonsoft.Json.JsonProperty("minPoints", Required = Newtonsoft.Json.Required.Always)]
        public int MinPoints
        {
            get { return _minPoints; }
            set 
            {
                if (_minPoints != value)
                {
                    _minPoints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Collection multiplier</summary>
        [Newtonsoft.Json.JsonProperty("collectMultiplier", Required = Newtonsoft.Json.Required.Always)]
        public double CollectMultiplier
        {
            get { return _collectMultiplier; }
            set 
            {
                if (_collectMultiplier != value)
                {
                    _collectMultiplier = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tier>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class LoyaltyMembership : System.ComponentModel.INotifyPropertyChanged
    {
        private System.DateTime? _joined;
        private int _loyaltyProgramId;
    
        /// <summary>The moment in which the loyalty program was joined.</summary>
        [Newtonsoft.Json.JsonProperty("joined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Joined
        {
            get { return _joined; }
            set 
            {
                if (_joined != value)
                {
                    _joined = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the loyalty program belonging to this entity.</summary>
        [Newtonsoft.Json.JsonProperty("loyaltyProgramId", Required = Newtonsoft.Json.Required.Always)]
        public int LoyaltyProgramId
        {
            get { return _loyaltyProgramId; }
            set 
            {
                if (_loyaltyProgramId != value)
                {
                    _loyaltyProgramId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LoyaltyMembership FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyMembership>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class LoyaltyProgramActivation : System.ComponentModel.INotifyPropertyChanged
    {
        private int _applicationId;
        private int _collectStoreId;
        private int _spendStoreId;
    
        /// <summary>The ID of an application that has the loyalty program activated.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application storage for collection points for the loyalty program of an activated application.</summary>
        [Newtonsoft.Json.JsonProperty("collectStoreId", Required = Newtonsoft.Json.Required.Always)]
        public int CollectStoreId
        {
            get { return _collectStoreId; }
            set 
            {
                if (_collectStoreId != value)
                {
                    _collectStoreId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application storage for spending points for the loyalty program of an activated application.</summary>
        [Newtonsoft.Json.JsonProperty("spendStoreId", Required = Newtonsoft.Json.Required.Always)]
        public int SpendStoreId
        {
            get { return _spendStoreId; }
            set 
            {
                if (_spendStoreId != value)
                {
                    _spendStoreId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LoyaltyProgramActivation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyProgramActivation>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewLoyaltyProgram : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _description;
        private int _pointValidity;
        private int? _spendingRate;
        private bool? _allowFallback;
        private bool? _allowMixedPayment;
        private System.Collections.ObjectModel.ObservableCollection<Tier> _tiers;
    
        /// <summary>The name of this loyalty program</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer description of the loyalty program</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Validity of newly added points in months</summary>
        [Newtonsoft.Json.JsonProperty("pointValidity", Required = Newtonsoft.Json.Required.Always)]
        public int PointValidity
        {
            get { return _pointValidity; }
            set 
            {
                if (_pointValidity != value)
                {
                    _pointValidity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Exchange rate between loyalty points and currency for spending points</summary>
        [Newtonsoft.Json.JsonProperty("spendingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpendingRate
        {
            get { return _spendingRate; }
            set 
            {
                if (_spendingRate != value)
                {
                    _spendingRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Allow/disallow use of currency conversion rate for spending points</summary>
        [Newtonsoft.Json.JsonProperty("allowFallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowFallback
        {
            get { return _allowFallback; }
            set 
            {
                if (_allowFallback != value)
                {
                    _allowFallback = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Allow/disallow partial payment in currency for products bought with loyalty points</summary>
        [Newtonsoft.Json.JsonProperty("allowMixedPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMixedPayment
        {
            get { return _allowMixedPayment; }
            set 
            {
                if (_allowMixedPayment != value)
                {
                    _allowMixedPayment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Tier> Tiers
        {
            get { return _tiers; }
            set 
            {
                if (_tiers != value)
                {
                    _tiers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewLoyaltyProgram FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewLoyaltyProgram>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class LoyaltyProgram : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private int _accountId;
        private string _name;
        private string _description;
        private int _pointValidity;
        private int? _spendingRate;
        private bool _allowFallback;
        private bool _allowMixedPayment;
        private System.Collections.ObjectModel.ObservableCollection<Tier> _tiers;
        private System.Collections.ObjectModel.ObservableCollection<LoyaltyProgramActivation> _activeApplications;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of this loyalty program</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer description of the loyalty program</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Validity of newly added points in months</summary>
        [Newtonsoft.Json.JsonProperty("pointValidity", Required = Newtonsoft.Json.Required.Always)]
        public int PointValidity
        {
            get { return _pointValidity; }
            set 
            {
                if (_pointValidity != value)
                {
                    _pointValidity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Exchange rate between loyalty points and currency for spending points</summary>
        [Newtonsoft.Json.JsonProperty("spendingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpendingRate
        {
            get { return _spendingRate; }
            set 
            {
                if (_spendingRate != value)
                {
                    _spendingRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Allow/disallow use of currency conversion rate for spending points</summary>
        [Newtonsoft.Json.JsonProperty("allowFallback", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowFallback
        {
            get { return _allowFallback; }
            set 
            {
                if (_allowFallback != value)
                {
                    _allowFallback = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Allow/disallow partial payment in currency for products bought with loyalty points</summary>
        [Newtonsoft.Json.JsonProperty("allowMixedPayment", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowMixedPayment
        {
            get { return _allowMixedPayment; }
            set 
            {
                if (_allowMixedPayment != value)
                {
                    _allowMixedPayment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Tier> Tiers
        {
            get { return _tiers; }
            set 
            {
                if (_tiers != value)
                {
                    _tiers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A list of applications that have this loyalty program active</summary>
        [Newtonsoft.Json.JsonProperty("activeApplications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<LoyaltyProgramActivation> ActiveApplications
        {
            get { return _activeApplications; }
            set 
            {
                if (_activeApplications != value)
                {
                    _activeApplications = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LoyaltyProgram FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoyaltyProgram>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewCoupons : System.ComponentModel.INotifyPropertyChanged
    {
        private int _usageLimit;
        private System.DateTime? _startDate;
        private System.DateTime? _expiryDate;
        private System.Collections.ObjectModel.ObservableCollection<string> _validCharacters = new System.Collections.ObjectModel.ObservableCollection<string>();
        private string _couponPattern;
        private int _numberOfCoupons;
        private object _attributes;
    
        /// <summary>The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usageLimit", Required = Newtonsoft.Json.Required.Always)]
        public int UsageLimit
        {
            get { return _usageLimit; }
            set 
            {
                if (_usageLimit != value)
                {
                    _usageLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp at which point the coupon becomes valid.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpiryDate
        {
            get { return _expiryDate; }
            set 
            {
                if (_expiryDate != value)
                {
                    _expiryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Set of characters to be used when generating random part of code. Defaults to [A-Z, 0-9] (in terms of RegExp).</summary>
        [Newtonsoft.Json.JsonProperty("validCharacters", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> ValidCharacters
        {
            get { return _validCharacters; }
            set 
            {
                if (_validCharacters != value)
                {
                    _validCharacters = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The pattern that will be used to generate coupon codes. The character `#` acts as a placeholder and will be replaced by a random character from the `validCharacters` set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("couponPattern", Required = Newtonsoft.Json.Required.Always)]
        public string CouponPattern
        {
            get { return _couponPattern; }
            set 
            {
                if (_couponPattern != value)
                {
                    _couponPattern = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of new coupon codes to generate for the campaign. Must be at least 1.</summary>
        [Newtonsoft.Json.JsonProperty("numberOfCoupons", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfCoupons
        {
            get { return _numberOfCoupons; }
            set 
            {
                if (_numberOfCoupons != value)
                {
                    _numberOfCoupons = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary properties associated with this item</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewCoupons FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewCoupons>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class UpdateCoupon : System.ComponentModel.INotifyPropertyChanged
    {
        private string _value;
        private int _usageLimit;
        private System.DateTime? _startDate;
        private System.DateTime? _expiryDate;
    
        /// <summary>The coupon code.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usageLimit", Required = Newtonsoft.Json.Required.Always)]
        public int UsageLimit
        {
            get { return _usageLimit; }
            set 
            {
                if (_usageLimit != value)
                {
                    _usageLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp at which point the coupon becomes valid.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpiryDate
        {
            get { return _expiryDate; }
            set 
            {
                if (_expiryDate != value)
                {
                    _expiryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateCoupon FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateCoupon>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Coupon : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _campaignId;
        private string _value;
        private int _usageLimit;
        private System.DateTime? _startDate;
        private System.DateTime? _expiryDate;
        private int _usageCounter;
        private object _attributes;
        private int? _referralId;
        private string _recipientIntegrationId;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the campaign that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
        public int CampaignId
        {
            get { return _campaignId; }
            set 
            {
                if (_campaignId != value)
                {
                    _campaignId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The coupon code.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usageLimit", Required = Newtonsoft.Json.Required.Always)]
        public int UsageLimit
        {
            get { return _usageLimit; }
            set 
            {
                if (_usageLimit != value)
                {
                    _usageLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp at which point the coupon becomes valid.</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }
            set 
            {
                if (_startDate != value)
                {
                    _startDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpiryDate
        {
            get { return _expiryDate; }
            set 
            {
                if (_expiryDate != value)
                {
                    _expiryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of times this coupon has been successfully used.</summary>
        [Newtonsoft.Json.JsonProperty("usageCounter", Required = Newtonsoft.Json.Required.Always)]
        public int UsageCounter
        {
            get { return _usageCounter; }
            set 
            {
                if (_usageCounter != value)
                {
                    _usageCounter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary properties associated with this item</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the referral (if any) from which this coupon was created as an effect.</summary>
        [Newtonsoft.Json.JsonProperty("referralId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferralId
        {
            get { return _referralId; }
            set 
            {
                if (_referralId != value)
                {
                    _referralId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The integration id for this coupon's beneficiary's profile</summary>
        [Newtonsoft.Json.JsonProperty("recipientIntegrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientIntegrationId
        {
            get { return _recipientIntegrationId; }
            set 
            {
                if (_recipientIntegrationId != value)
                {
                    _recipientIntegrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Coupon FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Coupon>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CampaignAnalytics : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _campaignId;
        private double _couponRevenue;
        private double _couponDiscountCosts;
        private int _couponsCount;
        private int _couponRedemptions;
        private int _campaignRedemptionLimit;
        private int _couponRedemptionLimit;
        private int _couponRedemptionsRemaining;
        private int _campaignRedemptionsRemaining;
        private double _revenuePerRedemption;
        private int _unlimitedCoupons;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the campaign that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
        public int CampaignId
        {
            get { return _campaignId; }
            set 
            {
                if (_campaignId != value)
                {
                    _campaignId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Amount of revenue from campaign with coupons.</summary>
        [Newtonsoft.Json.JsonProperty("couponRevenue", Required = Newtonsoft.Json.Required.Always)]
        public double CouponRevenue
        {
            get { return _couponRevenue; }
            set 
            {
                if (_couponRevenue != value)
                {
                    _couponRevenue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Amount of cost caused by discounts given in the campaign with sessions involving coupons.</summary>
        [Newtonsoft.Json.JsonProperty("couponDiscountCosts", Required = Newtonsoft.Json.Required.Always)]
        public double CouponDiscountCosts
        {
            get { return _couponDiscountCosts; }
            set 
            {
                if (_couponDiscountCosts != value)
                {
                    _couponDiscountCosts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of coupons in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("couponsCount", Required = Newtonsoft.Json.Required.Always)]
        public int CouponsCount
        {
            get { return _couponsCount; }
            set 
            {
                if (_couponsCount != value)
                {
                    _couponsCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of redemptions in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("couponRedemptions", Required = Newtonsoft.Json.Required.Always)]
        public int CouponRedemptions
        {
            get { return _couponRedemptions; }
            set 
            {
                if (_couponRedemptions != value)
                {
                    _couponRedemptions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Limit on overall redemptions in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("campaignRedemptionLimit", Required = Newtonsoft.Json.Required.Always)]
        public int CampaignRedemptionLimit
        {
            get { return _campaignRedemptionLimit; }
            set 
            {
                if (_campaignRedemptionLimit != value)
                {
                    _campaignRedemptionLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Possible redemptions calculated over all coupons.</summary>
        [Newtonsoft.Json.JsonProperty("couponRedemptionLimit", Required = Newtonsoft.Json.Required.Always)]
        public int CouponRedemptionLimit
        {
            get { return _couponRedemptionLimit; }
            set 
            {
                if (_couponRedemptionLimit != value)
                {
                    _couponRedemptionLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of redemptions remaining on the coupon level in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("couponRedemptionsRemaining", Required = Newtonsoft.Json.Required.Always)]
        public int CouponRedemptionsRemaining
        {
            get { return _couponRedemptionsRemaining; }
            set 
            {
                if (_couponRedemptionsRemaining != value)
                {
                    _couponRedemptionsRemaining = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Hard limit of redemptions remaining on the campaign level.</summary>
        [Newtonsoft.Json.JsonProperty("campaignRedemptionsRemaining", Required = Newtonsoft.Json.Required.Always)]
        public int CampaignRedemptionsRemaining
        {
            get { return _campaignRedemptionsRemaining; }
            set 
            {
                if (_campaignRedemptionsRemaining != value)
                {
                    _campaignRedemptionsRemaining = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Composite to describe coupon performance.</summary>
        [Newtonsoft.Json.JsonProperty("revenuePerRedemption", Required = Newtonsoft.Json.Required.Always)]
        public double RevenuePerRedemption
        {
            get { return _revenuePerRedemption; }
            set 
            {
                if (_revenuePerRedemption != value)
                {
                    _revenuePerRedemption = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of unlimited coupons in the campaign.</summary>
        [Newtonsoft.Json.JsonProperty("unlimitedCoupons", Required = Newtonsoft.Json.Required.Always)]
        public int UnlimitedCoupons
        {
            get { return _unlimitedCoupons; }
            set 
            {
                if (_unlimitedCoupons != value)
                {
                    _unlimitedCoupons = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CampaignAnalytics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CampaignAnalytics>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Report of health of the API connection of an application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ApplicationApiHealth : System.ComponentModel.INotifyPropertyChanged
    {
        private ApplicationApiHealthSummary _summary;
        private System.DateTime _lastUsed;
    
        /// <summary>One-word summary of the health of the API connection of an application</summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationApiHealthSummary Summary
        {
            get { return _summary; }
            set 
            {
                if (_summary != value)
                {
                    _summary = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>time of last request relevant to the API health test</summary>
        [Newtonsoft.Json.JsonProperty("lastUsed", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime LastUsed
        {
            get { return _lastUsed; }
            set 
            {
                if (_lastUsed != value)
                {
                    _lastUsed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationApiHealth FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationApiHealth>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Log of application accesses</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class AccessLogEntry : System.ComponentModel.INotifyPropertyChanged
    {
        private string _uuid;
        private int _status;
        private string _method;
        private string _requestUri;
        private System.DateTime _time;
        private string _requestPayload;
        private string _responsePayload;
    
        /// <summary>UUID reference of request</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Always)]
        public string Uuid
        {
            get { return _uuid; }
            set 
            {
                if (_uuid != value)
                {
                    _uuid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>HTTP status code of response</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>HTTP method of request</summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Always)]
        public string Method
        {
            get { return _method; }
            set 
            {
                if (_method != value)
                {
                    _method = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>target URI of request</summary>
        [Newtonsoft.Json.JsonProperty("requestUri", Required = Newtonsoft.Json.Required.Always)]
        public string RequestUri
        {
            get { return _requestUri; }
            set 
            {
                if (_requestUri != value)
                {
                    _requestUri = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>timestamp of request</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Time
        {
            get { return _time; }
            set 
            {
                if (_time != value)
                {
                    _time = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>payload of request</summary>
        [Newtonsoft.Json.JsonProperty("requestPayload", Required = Newtonsoft.Json.Required.Always)]
        public string RequestPayload
        {
            get { return _requestPayload; }
            set 
            {
                if (_requestPayload != value)
                {
                    _requestPayload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>payload of response</summary>
        [Newtonsoft.Json.JsonProperty("responsePayload", Required = Newtonsoft.Json.Required.Always)]
        public string ResponsePayload
        {
            get { return _responsePayload; }
            set 
            {
                if (_responsePayload != value)
                {
                    _responsePayload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AccessLogEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccessLogEntry>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Log of webhook api calls</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class WebhookLogEntry : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;
        private string _integrationRequestUuid;
        private int _webhookId;
        private int? _applicationId;
        private string _url;
        private string _request;
        private string _response;
        private int? _status;
        private System.DateTime _requestTime;
        private System.DateTime? _responseTime;
    
        /// <summary>UUID reference of the webhook request</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>UUID reference of the integration request linked to this webhook request</summary>
        [Newtonsoft.Json.JsonProperty("integrationRequestUuid", Required = Newtonsoft.Json.Required.Always)]
        public string IntegrationRequestUuid
        {
            get { return _integrationRequestUuid; }
            set 
            {
                if (_integrationRequestUuid != value)
                {
                    _integrationRequestUuid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the webhook that triggered the request</summary>
        [Newtonsoft.Json.JsonProperty("webhookId", Required = Newtonsoft.Json.Required.Always)]
        public int WebhookId
        {
            get { return _webhookId; }
            set 
            {
                if (_webhookId != value)
                {
                    _webhookId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the application that triggered the webhook</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Target url of request</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Request message</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Always)]
        public string Request
        {
            get { return _request; }
            set 
            {
                if (_request != value)
                {
                    _request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Response message</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Response
        {
            get { return _response; }
            set 
            {
                if (_response != value)
                {
                    _response = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>HTTP status code of response</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp of request</summary>
        [Newtonsoft.Json.JsonProperty("requestTime", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime RequestTime
        {
            get { return _requestTime; }
            set 
            {
                if (_requestTime != value)
                {
                    _requestTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp of response</summary>
        [Newtonsoft.Json.JsonProperty("responseTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ResponseTime
        {
            get { return _responseTime; }
            set 
            {
                if (_responseTime != value)
                {
                    _responseTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WebhookLogEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebhookLogEntry>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class LedgerEntry : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private string _profileId;
        private int _accountId;
        private int _loyaltyProgramId;
        private int _eventId;
        private int _amount;
        private string _reason;
        private System.DateTime _expiryDate;
        private int? _referenceId;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID.</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Always)]
        public string ProfileId
        {
            get { return _profileId; }
            set 
            {
                if (_profileId != value)
                {
                    _profileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the Talon.One account that owns this profile.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the ledger</summary>
        [Newtonsoft.Json.JsonProperty("loyaltyProgramId", Required = Newtonsoft.Json.Required.Always)]
        public int LoyaltyProgramId
        {
            get { return _loyaltyProgramId; }
            set 
            {
                if (_loyaltyProgramId != value)
                {
                    _loyaltyProgramId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the related event</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Always)]
        public int EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Amount of points</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public int Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>reason for awarding/deducting points</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        public string Reason
        {
            get { return _reason; }
            set 
            {
                if (_reason != value)
                {
                    _reason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Expiry date of the points</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime ExpiryDate
        {
            get { return _expiryDate; }
            set 
            {
                if (_expiryDate != value)
                {
                    _expiryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the balancing ledgerEntry</summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferenceId
        {
            get { return _referenceId; }
            set 
            {
                if (_referenceId != value)
                {
                    _referenceId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LedgerEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LedgerEntry>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class LedgerBalance : System.ComponentModel.INotifyPropertyChanged
    {
        private int _loyaltyProgramId;
        private int _balance;
        private string _tierName;
    
        /// <summary>ID of the ledger</summary>
        [Newtonsoft.Json.JsonProperty("loyaltyProgramId", Required = Newtonsoft.Json.Required.Always)]
        public int LoyaltyProgramId
        {
            get { return _loyaltyProgramId; }
            set 
            {
                if (_loyaltyProgramId != value)
                {
                    _loyaltyProgramId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Amount of points</summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Always)]
        public int Balance
        {
            get { return _balance; }
            set 
            {
                if (_balance != value)
                {
                    _balance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of tier corresponding to the current balance</summary>
        [Newtonsoft.Json.JsonProperty("tierName", Required = Newtonsoft.Json.Required.Always)]
        public string TierName
        {
            get { return _tierName; }
            set 
            {
                if (_tierName != value)
                {
                    _tierName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LedgerBalance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LedgerBalance>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class User : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private string _email;
        private int _accountId;
        private string _inviteToken;
        private UserState _state;
        private string _name;
        private System.DateTime? _lastActivity;
        private System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> _policy = new System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>();
        private bool _releaseUpdate;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The email address associated with your account.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Invite token, empty if the user as already accepted their invite.</summary>
        [Newtonsoft.Json.JsonProperty("inviteToken", Required = Newtonsoft.Json.Required.Always)]
        public string InviteToken
        {
            get { return _inviteToken; }
            set 
            {
                if (_inviteToken != value)
                {
                    _inviteToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Current user state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserState State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Full name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Last time user used management API</summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastActivity
        {
            get { return _lastActivity; }
            set 
            {
                if (_lastActivity != value)
                {
                    _lastActivity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Access policy for the user as json object.</summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> Policy
        {
            get { return _policy; }
            set 
            {
                if (_policy != value)
                {
                    _policy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Update the user via email</summary>
        [Newtonsoft.Json.JsonProperty("releaseUpdate", Required = Newtonsoft.Json.Required.Always)]
        public bool ReleaseUpdate
        {
            get { return _releaseUpdate; }
            set 
            {
                if (_releaseUpdate != value)
                {
                    _releaseUpdate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Parameters for inviting a new user</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewInvitation : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _email;
        private System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> _acl = new System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>();
    
        /// <summary>Name of the user being invited.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("acl", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> Acl
        {
            get { return _acl; }
            set 
            {
                if (_acl != value)
                {
                    _acl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewInvitation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewInvitation>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Change : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _userId;
        private string _entity;
        private object _old;
        private object _new;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId
        {
            get { return _userId; }
            set 
            {
                if (_userId != value)
                {
                    _userId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>API endpoint on which the change was initiated.</summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Always)]
        public string Entity
        {
            get { return _entity; }
            set 
            {
                if (_entity != value)
                {
                    _entity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Resource before the change occured.</summary>
        [Newtonsoft.Json.JsonProperty("old", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Old
        {
            get { return _old; }
            set 
            {
                if (_old != value)
                {
                    _old = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Resource after the change occured.</summary>
        [Newtonsoft.Json.JsonProperty("new", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object New
        {
            get { return _new; }
            set 
            {
                if (_new != value)
                {
                    _new = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Change FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Change>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CustomerProfileSearch : System.ComponentModel.INotifyPropertyChanged
    {
        private object _attributes = new object();
    
        /// <summary>Properties to match against a customer profile. All provided attributes will be exactly matched against profile attributes</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerProfileSearch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerProfileSearch>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewCustomerProfile : System.ComponentModel.INotifyPropertyChanged
    {
        private object _attributes;
    
        /// <summary>Arbitrary properties associated with this item</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewCustomerProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewCustomerProfile>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CustomerProfile : System.ComponentModel.INotifyPropertyChanged
    {
        private string _integrationId;
        private System.DateTime _created;
        private object _attributes = new object();
        private int _accountId;
        private int _closedSessions;
        private double _totalSales;
        private System.Collections.ObjectModel.ObservableCollection<LoyaltyMembership> _loyaltyMemberships = new System.Collections.ObjectModel.ObservableCollection<LoyaltyMembership>();
        private System.DateTime _lastActivity;
    
        /// <summary>The ID used for this entity in the application system.</summary>
        [Newtonsoft.Json.JsonProperty("integrationId", Required = Newtonsoft.Json.Required.Always)]
        public string IntegrationId
        {
            get { return _integrationId; }
            set 
            {
                if (_integrationId != value)
                {
                    _integrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary properties associated with this item</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the Talon.One account that owns this profile.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedSessions", Required = Newtonsoft.Json.Required.Always)]
        public int ClosedSessions
        {
            get { return _closedSessions; }
            set 
            {
                if (_closedSessions != value)
                {
                    _closedSessions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalSales", Required = Newtonsoft.Json.Required.Always)]
        public double TotalSales
        {
            get { return _totalSales; }
            set 
            {
                if (_totalSales != value)
                {
                    _totalSales = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A list of loyalty programs joined by the customer</summary>
        [Newtonsoft.Json.JsonProperty("loyaltyMemberships", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LoyaltyMembership> LoyaltyMemberships
        {
            get { return _loyaltyMemberships; }
            set 
            {
                if (_loyaltyMemberships != value)
                {
                    _loyaltyMemberships = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp of the most recent event received from this customer</summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime LastActivity
        {
            get { return _lastActivity; }
            set 
            {
                if (_lastActivity != value)
                {
                    _lastActivity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerProfile>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewCustomerSession : System.ComponentModel.INotifyPropertyChanged
    {
        private string _profileId;
        private string _coupon;
        private string _referral;
        private NewCustomerSessionState? _state = TalonOne.NewCustomerSessionState.Open;
        private System.Collections.ObjectModel.ObservableCollection<CartItem> _cartItems;
        private double? _total;
        private object _attributes;
    
        /// <summary>Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID.</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfileId
        {
            get { return _profileId; }
            set 
            {
                if (_profileId != value)
                {
                    _profileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Any coupon code entered.</summary>
        [Newtonsoft.Json.JsonProperty("coupon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coupon
        {
            get { return _coupon; }
            set 
            {
                if (_coupon != value)
                {
                    _coupon = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Any referral code entered.</summary>
        [Newtonsoft.Json.JsonProperty("referral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Referral
        {
            get { return _referral; }
            set 
            {
                if (_referral != value)
                {
                    _referral = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates the current state of the session. All sessions must
        /// start in the "open" state, after which valid transitions are...
        /// 
        /// 1. open -> closed
        /// 2. open -> cancelled
        /// 3. closed -> cancelled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewCustomerSessionState? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Serialized JSON representation.</summary>
        [Newtonsoft.Json.JsonProperty("cartItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CartItem> CartItems
        {
            get { return _cartItems; }
            set 
            {
                if (_cartItems != value)
                {
                    _cartItems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total
        {
            get { return _total; }
            set 
            {
                if (_total != value)
                {
                    _total = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings. To learn more about how attributes work, please see [Attributes](#blah).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewCustomerSession FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewCustomerSession>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CustomerActivityReport : System.ComponentModel.INotifyPropertyChanged
    {
        private string _integrationId;
        private System.DateTime _created;
        private string _name;
        private int _customerId;
        private System.DateTime? _lastActivity;
        private int _couponRedemptions;
        private int _couponUseAttempts;
        private int _couponFailedAttempts;
        private double _accruedDiscounts;
        private double _accruedRevenue;
        private int _totalOrders;
        private int _totalOrdersNoCoupon;
    
        /// <summary>The ID used for this entity in the application system. The ID used for this entity in the application system.</summary>
        [Newtonsoft.Json.JsonProperty("integrationId", Required = Newtonsoft.Json.Required.Always)]
        public string IntegrationId
        {
            get { return _integrationId; }
            set 
            {
                if (_integrationId != value)
                {
                    _integrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name for this customer profile.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The internal Talon.One ID of the customer.</summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Always)]
        public int CustomerId
        {
            get { return _customerId; }
            set 
            {
                if (_customerId != value)
                {
                    _customerId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last activity of the customer.</summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastActivity
        {
            get { return _lastActivity; }
            set 
            {
                if (_lastActivity != value)
                {
                    _lastActivity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of coupon redemptions in all customer campaigns.</summary>
        [Newtonsoft.Json.JsonProperty("couponRedemptions", Required = Newtonsoft.Json.Required.Always)]
        public int CouponRedemptions
        {
            get { return _couponRedemptions; }
            set 
            {
                if (_couponRedemptions != value)
                {
                    _couponRedemptions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of coupon use attempts in all customer campaigns.</summary>
        [Newtonsoft.Json.JsonProperty("couponUseAttempts", Required = Newtonsoft.Json.Required.Always)]
        public int CouponUseAttempts
        {
            get { return _couponUseAttempts; }
            set 
            {
                if (_couponUseAttempts != value)
                {
                    _couponUseAttempts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of failed coupon use attempts in all customer campaigns.</summary>
        [Newtonsoft.Json.JsonProperty("couponFailedAttempts", Required = Newtonsoft.Json.Required.Always)]
        public int CouponFailedAttempts
        {
            get { return _couponFailedAttempts; }
            set 
            {
                if (_couponFailedAttempts != value)
                {
                    _couponFailedAttempts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of accrued discounts in all customer campaigns.</summary>
        [Newtonsoft.Json.JsonProperty("accruedDiscounts", Required = Newtonsoft.Json.Required.Always)]
        public double AccruedDiscounts
        {
            get { return _accruedDiscounts; }
            set 
            {
                if (_accruedDiscounts != value)
                {
                    _accruedDiscounts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Amount of accrued revenue in all customer campaigns.</summary>
        [Newtonsoft.Json.JsonProperty("accruedRevenue", Required = Newtonsoft.Json.Required.Always)]
        public double AccruedRevenue
        {
            get { return _accruedRevenue; }
            set 
            {
                if (_accruedRevenue != value)
                {
                    _accruedRevenue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of orders in all customer campaigns.</summary>
        [Newtonsoft.Json.JsonProperty("totalOrders", Required = Newtonsoft.Json.Required.Always)]
        public int TotalOrders
        {
            get { return _totalOrders; }
            set 
            {
                if (_totalOrders != value)
                {
                    _totalOrders = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of orders without coupon used in all customer campaigns.</summary>
        [Newtonsoft.Json.JsonProperty("totalOrdersNoCoupon", Required = Newtonsoft.Json.Required.Always)]
        public int TotalOrdersNoCoupon
        {
            get { return _totalOrdersNoCoupon; }
            set 
            {
                if (_totalOrdersNoCoupon != value)
                {
                    _totalOrdersNoCoupon = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerActivityReport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerActivityReport>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CustomerSession : System.ComponentModel.INotifyPropertyChanged
    {
        private string _integrationId;
        private System.DateTime _created;
        private int _applicationId;
        private string _profileId;
        private string _coupon;
        private string _referral;
        private CustomerSessionState _state = TalonOne.CustomerSessionState.Open;
        private System.Collections.ObjectModel.ObservableCollection<CartItem> _cartItems = new System.Collections.ObjectModel.ObservableCollection<CartItem>();
        private double _total;
        private object _attributes = new object();
        private bool _firstSession;
        private System.Collections.Generic.Dictionary<string, double> _discounts = new System.Collections.Generic.Dictionary<string, double>();
    
        /// <summary>The ID used for this entity in the application system.</summary>
        [Newtonsoft.Json.JsonProperty("integrationId", Required = Newtonsoft.Json.Required.Always)]
        public string IntegrationId
        {
            get { return _integrationId; }
            set 
            {
                if (_integrationId != value)
                {
                    _integrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID.</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Always)]
        public string ProfileId
        {
            get { return _profileId; }
            set 
            {
                if (_profileId != value)
                {
                    _profileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Any coupon code entered.</summary>
        [Newtonsoft.Json.JsonProperty("coupon", Required = Newtonsoft.Json.Required.Always)]
        public string Coupon
        {
            get { return _coupon; }
            set 
            {
                if (_coupon != value)
                {
                    _coupon = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Any referral code entered.</summary>
        [Newtonsoft.Json.JsonProperty("referral", Required = Newtonsoft.Json.Required.Always)]
        public string Referral
        {
            get { return _referral; }
            set 
            {
                if (_referral != value)
                {
                    _referral = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates the current state of the session. All sessions must
        /// start in the "open" state, after which valid transitions are...
        /// 
        /// 1. open -> closed
        /// 2. open -> cancelled
        /// 3. closed -> cancelled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerSessionState State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Serialized JSON representation.</summary>
        [Newtonsoft.Json.JsonProperty("cartItems", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<CartItem> CartItems
        {
            get { return _cartItems; }
            set 
            {
                if (_cartItems != value)
                {
                    _cartItems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public double Total
        {
            get { return _total; }
            set 
            {
                if (_total != value)
                {
                    _total = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings. To learn more about how attributes work, please see [Attributes](#blah).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates whether this is the first session for the profile. Will always be true for anonymous sessions.</summary>
        [Newtonsoft.Json.JsonProperty("firstSession", Required = Newtonsoft.Json.Required.Always)]
        public bool FirstSession
        {
            get { return _firstSession; }
            set 
            {
                if (_firstSession != value)
                {
                    _firstSession = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A map of labelled discount values, values will be in the same currency as the application associated with the session.</summary>
        [Newtonsoft.Json.JsonProperty("discounts", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.Dictionary<string, double> Discounts
        {
            get { return _discounts; }
            set 
            {
                if (_discounts != value)
                {
                    _discounts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerSession FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSession>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CartItemAdjustment : System.ComponentModel.INotifyPropertyChanged
    {
        private int _payFromLoyaltyProgram;
        private int _pointPayment;
        private double? _remainingPrice;
    
        [Newtonsoft.Json.JsonProperty("payFromLoyaltyProgram", Required = Newtonsoft.Json.Required.Always)]
        public int PayFromLoyaltyProgram
        {
            get { return _payFromLoyaltyProgram; }
            set 
            {
                if (_payFromLoyaltyProgram != value)
                {
                    _payFromLoyaltyProgram = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pointPayment", Required = Newtonsoft.Json.Required.Always)]
        public int PointPayment
        {
            get { return _pointPayment; }
            set 
            {
                if (_pointPayment != value)
                {
                    _pointPayment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("remainingPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RemainingPrice
        {
            get { return _remainingPrice; }
            set 
            {
                if (_remainingPrice != value)
                {
                    _remainingPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CartItemAdjustment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CartItemAdjustment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class CartItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _sku;
        private int _quantity;
        private double _price;
        private string _category;
        private double? _weight;
        private double? _height;
        private double? _width;
        private double? _length;
        private object _attributes;
        private CartItemAdjustment _adjustment;
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Always)]
        public string Sku
        {
            get { return _sku; }
            set 
            {
                if (_sku != value)
                {
                    _sku = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity
        {
            get { return _quantity; }
            set 
            {
                if (_quantity != value)
                {
                    _quantity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category
        {
            get { return _category; }
            set 
            {
                if (_category != value)
                {
                    _category = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>width in mm</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight
        {
            get { return _weight; }
            set 
            {
                if (_weight != value)
                {
                    _weight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>height in mm</summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height
        {
            get { return _height; }
            set 
            {
                if (_height != value)
                {
                    _height = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>width in mm</summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width
        {
            get { return _width; }
            set 
            {
                if (_width != value)
                {
                    _width = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>length in mm</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length
        {
            get { return _length; }
            set 
            {
                if (_length != value)
                {
                    _length = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary properties associated with this item</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("adjustment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CartItemAdjustment Adjustment
        {
            get { return _adjustment; }
            set 
            {
                if (_adjustment != value)
                {
                    _adjustment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CartItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CartItem>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewEvent : System.ComponentModel.INotifyPropertyChanged
    {
        private string _profileId;
        private string _sessionId;
        private string _type;
        private object _attributes = new object();
    
        /// <summary>Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID.</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfileId
        {
            get { return _profileId; }
            set 
            {
                if (_profileId != value)
                {
                    _profileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the session that this event occurred in.</summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Always)]
        public string SessionId
        {
            get { return _sessionId; }
            set 
            {
                if (_sessionId != value)
                {
                    _sessionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A string representing the event. Must not be a reserved event name.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary additional JSON data associated with the event.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewEvent>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Event : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _applicationId;
        private string _profileId;
        private string _sessionId;
        private string _type;
        private object _attributes = new object();
        private System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>> _effects = new System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>>();
        private System.Collections.ObjectModel.ObservableCollection<LedgerEntry> _ledgerEntries = new System.Collections.ObjectModel.ObservableCollection<LedgerEntry>();
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID.</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfileId
        {
            get { return _profileId; }
            set 
            {
                if (_profileId != value)
                {
                    _profileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the session that this event occurred in.</summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Always)]
        public string SessionId
        {
            get { return _sessionId; }
            set 
            {
                if (_sessionId != value)
                {
                    _sessionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A string representing the event. Must not be a reserved event name.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary additional JSON data associated with the event.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array of "effects" that must be applied in response to this event. Example effects include `addItemToCart` or `setDiscount`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effects", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>> Effects
        {
            get { return _effects; }
            set 
            {
                if (_effects != value)
                {
                    _effects = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Ledger entries for the event.</summary>
        [Newtonsoft.Json.JsonProperty("ledgerEntries", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LedgerEntry> LedgerEntries
        {
            get { return _ledgerEntries; }
            set 
            {
                if (_ledgerEntries != value)
                {
                    _ledgerEntries = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Event FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Event>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Contains all state that might interest application integration plugins. This is the response type returned by all of the Integration API operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class IntegrationState : System.ComponentModel.INotifyPropertyChanged
    {
        private CustomerSession _session = new CustomerSession();
        private CustomerProfile _profile = new CustomerProfile();
        private Event _event = new Event();
    
        [Newtonsoft.Json.JsonProperty("session", Required = Newtonsoft.Json.Required.Always)]
        public CustomerSession Session
        {
            get { return _session; }
            set 
            {
                if (_session != value)
                {
                    _session = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Always)]
        public CustomerProfile Profile
        {
            get { return _profile; }
            set 
            {
                if (_profile != value)
                {
                    _profile = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Always)]
        public Event Event
        {
            get { return _event; }
            set 
            {
                if (_event != value)
                {
                    _event = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IntegrationState FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IntegrationState>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ApplicationProfile : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private string _integrationId;
        private object _attributes = new object();
        private int _accountId;
        private int _closedSessions;
        private double _totalSales;
        private System.Collections.ObjectModel.ObservableCollection<LoyaltyMembership> _loyaltyMemberships = new System.Collections.ObjectModel.ObservableCollection<LoyaltyMembership>();
        private System.DateTime _lastActivity;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created. The exact moment this entity was created. The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID used for this entity in the application system. The ID used for this entity in the application system.</summary>
        [Newtonsoft.Json.JsonProperty("integrationId", Required = Newtonsoft.Json.Required.Always)]
        public string IntegrationId
        {
            get { return _integrationId; }
            set 
            {
                if (_integrationId != value)
                {
                    _integrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary properties associated with this item</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the Talon.One account that owns this profile. The ID of the Talon.One account that owns this profile.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("closedSessions", Required = Newtonsoft.Json.Required.Always)]
        public int ClosedSessions
        {
            get { return _closedSessions; }
            set 
            {
                if (_closedSessions != value)
                {
                    _closedSessions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("totalSales", Required = Newtonsoft.Json.Required.Always)]
        public double TotalSales
        {
            get { return _totalSales; }
            set 
            {
                if (_totalSales != value)
                {
                    _totalSales = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A list of loyalty programs joined by the customer</summary>
        [Newtonsoft.Json.JsonProperty("loyaltyMemberships", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LoyaltyMembership> LoyaltyMemberships
        {
            get { return _loyaltyMemberships; }
            set 
            {
                if (_loyaltyMemberships != value)
                {
                    _loyaltyMemberships = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp of the most recent event received from this customer</summary>
        [Newtonsoft.Json.JsonProperty("lastActivity", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime LastActivity
        {
            get { return _lastActivity; }
            set 
            {
                if (_lastActivity != value)
                {
                    _lastActivity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationProfile>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ApplicationSession : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _applicationId;
        private int? _profileId;
        private string _integrationId;
        private string _coupon;
        private string _referral;
        private ApplicationSessionState _state;
        private System.Collections.ObjectModel.ObservableCollection<CartItem> _cartItems = new System.Collections.ObjectModel.ObservableCollection<CartItem>();
        private System.Collections.Generic.Dictionary<string, double> _discounts = new System.Collections.Generic.Dictionary<string, double>();
        private object _attributes;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created. The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The globally unique Talon.One ID of the customer that created this entity.</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProfileId
        {
            get { return _profileId; }
            set 
            {
                if (_profileId != value)
                {
                    _profileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID used for this entity in the application system.</summary>
        [Newtonsoft.Json.JsonProperty("integrationId", Required = Newtonsoft.Json.Required.Always)]
        public string IntegrationId
        {
            get { return _integrationId; }
            set 
            {
                if (_integrationId != value)
                {
                    _integrationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Any coupon code entered.</summary>
        [Newtonsoft.Json.JsonProperty("coupon", Required = Newtonsoft.Json.Required.Always)]
        public string Coupon
        {
            get { return _coupon; }
            set 
            {
                if (_coupon != value)
                {
                    _coupon = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Any referal code entered.</summary>
        [Newtonsoft.Json.JsonProperty("referral", Required = Newtonsoft.Json.Required.Always)]
        public string Referral
        {
            get { return _referral; }
            set 
            {
                if (_referral != value)
                {
                    _referral = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicating if the customer session is in progress ("open"), "closed", or "cancelled".</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationSessionState State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Serialized JSON representation.</summary>
        [Newtonsoft.Json.JsonProperty("cartItems", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<CartItem> CartItems
        {
            get { return _cartItems; }
            set 
            {
                if (_cartItems != value)
                {
                    _cartItems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A map of labelled discount values, in the same currency as the session.</summary>
        [Newtonsoft.Json.JsonProperty("discounts", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.Dictionary<string, double> Discounts
        {
            get { return _discounts; }
            set 
            {
                if (_discounts != value)
                {
                    _discounts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary properties associated with this item</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationSession FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationSession>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ApplicationEvent : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _applicationId;
        private int? _profileId;
        private int? _sessionId;
        private string _type;
        private object _attributes = new object();
        private System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>> _effects = new System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>>();
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The globally unique Talon.One ID of the customer that created this entity.</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProfileId
        {
            get { return _profileId; }
            set 
            {
                if (_profileId != value)
                {
                    _profileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The globally unique Talon.One ID of the session that contains this event.</summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SessionId
        {
            get { return _sessionId; }
            set 
            {
                if (_sessionId != value)
                {
                    _sessionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A string representing the event. Must not be a reserved event name.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Additional JSON serialized data associated with the event.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public object Attributes
        {
            get { return _attributes; }
            set 
            {
                if (_attributes != value)
                {
                    _attributes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array containing the effects that were applied as a result of this event.</summary>
        [Newtonsoft.Json.JsonProperty("effects", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>> Effects
        {
            get { return _effects; }
            set 
            {
                if (_effects != value)
                {
                    _effects = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationEvent>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewAccount : System.ComponentModel.INotifyPropertyChanged
    {
        private string _companyName;
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
        public string CompanyName
        {
            get { return _companyName; }
            set 
            {
                if (_companyName != value)
                {
                    _companyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewAccount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewAccount>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class UpdateAccount : System.ComponentModel.INotifyPropertyChanged
    {
        private string _companyName;
        private string _billingEmail;
    
        /// <summary>Name of your company.</summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
        public string CompanyName
        {
            get { return _companyName; }
            set 
            {
                if (_companyName != value)
                {
                    _companyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The billing email address associated with your company account.</summary>
        [Newtonsoft.Json.JsonProperty("billingEmail", Required = Newtonsoft.Json.Required.Always)]
        public string BillingEmail
        {
            get { return _billingEmail; }
            set 
            {
                if (_billingEmail != value)
                {
                    _billingEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateAccount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateAccount>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Account : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private string _companyName;
        private string _domainName;
        private AccountState _state;
        private string _billingEmail;
        private string _planName;
        private System.DateTime? _planExpires;
        private int? _applicationLimit;
        private int? _userLimit;
        private int? _campaignLimit;
        private int? _apiLimit;
        private int? _applicationCount;
        private int? _userCount;
        private int? _campaignsActiveCount;
        private int? _campaignsInactiveCount;
        private int? _apiCallCount;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
        public string CompanyName
        {
            get { return _companyName; }
            set 
            {
                if (_companyName != value)
                {
                    _companyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Subdomain Name for yourcompany.talon.one</summary>
        [Newtonsoft.Json.JsonProperty("domainName", Required = Newtonsoft.Json.Required.Always)]
        public string DomainName
        {
            get { return _domainName; }
            set 
            {
                if (_domainName != value)
                {
                    _domainName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>State of the account (trial, active, trial_expired)</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountState State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The billing email address associated with your company account.</summary>
        [Newtonsoft.Json.JsonProperty("billingEmail", Required = Newtonsoft.Json.Required.Always)]
        public string BillingEmail
        {
            get { return _billingEmail; }
            set 
            {
                if (_billingEmail != value)
                {
                    _billingEmail = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of your booked plan.</summary>
        [Newtonsoft.Json.JsonProperty("planName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanName
        {
            get { return _planName; }
            set 
            {
                if (_planName != value)
                {
                    _planName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The point in time at which your current plan expires.</summary>
        [Newtonsoft.Json.JsonProperty("planExpires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? PlanExpires
        {
            get { return _planExpires; }
            set 
            {
                if (_planExpires != value)
                {
                    _planExpires = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The maximum number of Applications covered by your plan.</summary>
        [Newtonsoft.Json.JsonProperty("applicationLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationLimit
        {
            get { return _applicationLimit; }
            set 
            {
                if (_applicationLimit != value)
                {
                    _applicationLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The maximum number of Campaign Manager Users covered by your plan.</summary>
        [Newtonsoft.Json.JsonProperty("userLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserLimit
        {
            get { return _userLimit; }
            set 
            {
                if (_userLimit != value)
                {
                    _userLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The maximum number of Campaigns covered by your plan.</summary>
        [Newtonsoft.Json.JsonProperty("campaignLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CampaignLimit
        {
            get { return _campaignLimit; }
            set 
            {
                if (_campaignLimit != value)
                {
                    _campaignLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The maximum number of Integration API calls covered by your plan per billing period.</summary>
        [Newtonsoft.Json.JsonProperty("apiLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApiLimit
        {
            get { return _apiLimit; }
            set 
            {
                if (_apiLimit != value)
                {
                    _apiLimit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current number of Applications in your account.</summary>
        [Newtonsoft.Json.JsonProperty("applicationCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationCount
        {
            get { return _applicationCount; }
            set 
            {
                if (_applicationCount != value)
                {
                    _applicationCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current number of Campaign Manager Users in your account.</summary>
        [Newtonsoft.Json.JsonProperty("userCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserCount
        {
            get { return _userCount; }
            set 
            {
                if (_userCount != value)
                {
                    _userCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current number of active Campaigns in your account.</summary>
        [Newtonsoft.Json.JsonProperty("campaignsActiveCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CampaignsActiveCount
        {
            get { return _campaignsActiveCount; }
            set 
            {
                if (_campaignsActiveCount != value)
                {
                    _campaignsActiveCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The current number of inactive Campaigns in your account.</summary>
        [Newtonsoft.Json.JsonProperty("campaignsInactiveCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CampaignsInactiveCount
        {
            get { return _campaignsInactiveCount; }
            set 
            {
                if (_campaignsInactiveCount != value)
                {
                    _campaignsInactiveCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of Integration API calls that have been made.</summary>
        [Newtonsoft.Json.JsonProperty("apiCallCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApiCallCount
        {
            get { return _apiCallCount; }
            set 
            {
                if (_apiCallCount != value)
                {
                    _apiCallCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Account FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Account>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewAccountSignUp : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _password;
        private string _companyName;
    
        /// <summary>The email address associated with your account.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The password for your account.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
        public string CompanyName
        {
            get { return _companyName; }
            set 
            {
                if (_companyName != value)
                {
                    _companyName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewAccountSignUp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewAccountSignUp>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewUser : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _password;
        private string _name;
        private string _inviteToken;
    
        /// <summary>The email address associated with your account.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The password for your account.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Your name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("inviteToken", Required = Newtonsoft.Json.Required.Always)]
        public string InviteToken
        {
            get { return _inviteToken; }
            set 
            {
                if (_inviteToken != value)
                {
                    _inviteToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewUser>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class UpdateUser : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _name;
        private string _password;
        private string _newPassword;
        private System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> _policy;
        private UpdateUserState? _state;
        private bool? _releaseUpdate;
    
        /// <summary>The email address associated with your account.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Your name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Your old password.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Your new password.</summary>
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewPassword
        {
            get { return _newPassword; }
            set 
            {
                if (_newPassword != value)
                {
                    _newPassword = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>> Policy
        {
            get { return _policy; }
            set 
            {
                if (_policy != value)
                {
                    _policy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>New state ("deactivated" or "active") for the user. Only usable by admins for the user.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateUserState? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Update the user via email</summary>
        [Newtonsoft.Json.JsonProperty("releaseUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReleaseUpdate
        {
            get { return _releaseUpdate; }
            set 
            {
                if (_releaseUpdate != value)
                {
                    _releaseUpdate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateUser>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewInviteEmail : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
        private string _token;
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        public string Token
        {
            get { return _token; }
            set 
            {
                if (_token != value)
                {
                    _token = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewInviteEmail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewInviteEmail>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewPasswordEmail : System.ComponentModel.INotifyPropertyChanged
    {
        private string _email;
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewPasswordEmail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewPasswordEmail>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewPassword : System.ComponentModel.INotifyPropertyChanged
    {
        private string _password;
        private string _resetToken;
    
        /// <summary>The new password for your account.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        public string Password
        {
            get { return _password; }
            set 
            {
                if (_password != value)
                {
                    _password = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("resetToken", Required = Newtonsoft.Json.Required.Always)]
        public string ResetToken
        {
            get { return _resetToken; }
            set 
            {
                if (_resetToken != value)
                {
                    _resetToken = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewPassword FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewPassword>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Environment : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _applicationId;
        private System.Collections.ObjectModel.ObservableCollection<SlotDef> _slots = new System.Collections.ObjectModel.ObservableCollection<SlotDef>();
        private System.Collections.ObjectModel.ObservableCollection<FunctionDef> _functions = new System.Collections.ObjectModel.ObservableCollection<FunctionDef>();
        private System.Collections.ObjectModel.ObservableCollection<TemplateDef> _templates = new System.Collections.ObjectModel.ObservableCollection<TemplateDef>();
        private string _variables;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The slots defined for this application.</summary>
        [Newtonsoft.Json.JsonProperty("slots", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<SlotDef> Slots
        {
            get { return _slots; }
            set 
            {
                if (_slots != value)
                {
                    _slots = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The functions defined for this application.</summary>
        [Newtonsoft.Json.JsonProperty("functions", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<FunctionDef> Functions
        {
            get { return _functions; }
            set 
            {
                if (_functions != value)
                {
                    _functions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The templates defined for this application.</summary>
        [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<TemplateDef> Templates
        {
            get { return _templates; }
            set 
            {
                if (_templates != value)
                {
                    _templates = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Always)]
        public string Variables
        {
            get { return _variables; }
            set 
            {
                if (_variables != value)
                {
                    _variables = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Environment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Environment>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class SlotDef : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _type;
        private string _title;
        private string _description;
        private string _help;
        private bool _writable;
    
        /// <summary>The dot-separated path to this slot for use in Talang.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of this slot, one of string, number, boolean, or list[type].</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Campaigner-friendly name for the slot.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A short description of the slot.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Extended help text for the slot.</summary>
        [Newtonsoft.Json.JsonProperty("help", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Help
        {
            get { return _help; }
            set 
            {
                if (_help != value)
                {
                    _help = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether or not this slot can be updated by rule effects.</summary>
        [Newtonsoft.Json.JsonProperty("writable", Required = Newtonsoft.Json.Required.Always)]
        public bool Writable
        {
            get { return _writable; }
            set 
            {
                if (_writable != value)
                {
                    _writable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SlotDef FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SlotDef>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class FuncArgDef : System.ComponentModel.INotifyPropertyChanged
    {
        private FuncArgDefType _type;
        private string _description;
    
        /// <summary>The type of value this argument expects.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FuncArgDefType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A campaigner-friendly description of the argument, this will also be shown in the rule editor.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FuncArgDef FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FuncArgDef>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class TemplateArgDef : System.ComponentModel.INotifyPropertyChanged
    {
        private TemplateArgDefType _type;
        private string _description;
        private string _title;
        private object _ui = new object();
    
        /// <summary>The type of value this argument expects.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateArgDefType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A campaigner-friendly description of the argument, this will also be shown in the rule editor.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A campaigner friendly name for the argument, this will be shown in the rule editor.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Arbitrary metadata that may be used to render an input for this argument.</summary>
        [Newtonsoft.Json.JsonProperty("ui", Required = Newtonsoft.Json.Required.Always)]
        public object Ui
        {
            get { return _ui; }
            set 
            {
                if (_ui != value)
                {
                    _ui = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TemplateArgDef FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateArgDef>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class FunctionDef : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;
        private string _type;
        private string _description;
        private string _help;
        private System.Collections.ObjectModel.ObservableCollection<FuncArgDef> _args = new System.Collections.ObjectModel.ObservableCollection<FuncArgDef>();
    
        /// <summary>The function name used in Talang.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of this function argument.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A short description of the function.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Extended help text for the function.</summary>
        [Newtonsoft.Json.JsonProperty("help", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Help
        {
            get { return _help; }
            set 
            {
                if (_help != value)
                {
                    _help = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array of argument definitions.</summary>
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<FuncArgDef> Args
        {
            get { return _args; }
            set 
            {
                if (_args != value)
                {
                    _args = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FunctionDef FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionDef>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewTemplateDef : System.ComponentModel.INotifyPropertyChanged
    {
        private string _title;
        private string _description;
        private string _help;
        private string _category;
        private System.Collections.ObjectModel.ObservableCollection<object> _expr = new System.Collections.ObjectModel.ObservableCollection<object>();
        private System.Collections.ObjectModel.ObservableCollection<TemplateArgDef> _args = new System.Collections.ObjectModel.ObservableCollection<TemplateArgDef>();
    
        /// <summary>Campaigner-friendly name for the template that will be shown in the rule editor.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A short description of the template that will be shown in the rule editor.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Extended help text for the template.</summary>
        [Newtonsoft.Json.JsonProperty("help", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Help
        {
            get { return _help; }
            set 
            {
                if (_help != value)
                {
                    _help = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Used for grouping templates in the rule editor sidebar.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        public string Category
        {
            get { return _category; }
            set 
            {
                if (_category != value)
                {
                    _category = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A Talang expression that contains variable bindings referring to args.</summary>
        [Newtonsoft.Json.JsonProperty("expr", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<object> Expr
        {
            get { return _expr; }
            set 
            {
                if (_expr != value)
                {
                    _expr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array of argument definitions.</summary>
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<TemplateArgDef> Args
        {
            get { return _args; }
            set 
            {
                if (_args != value)
                {
                    _args = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewTemplateDef FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewTemplateDef>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class TemplateDef : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _applicationId;
        private string _title;
        private string _description;
        private string _help;
        private string _category;
        private System.Collections.ObjectModel.ObservableCollection<object> _expr = new System.Collections.ObjectModel.ObservableCollection<object>();
        private System.Collections.ObjectModel.ObservableCollection<TemplateArgDef> _args = new System.Collections.ObjectModel.ObservableCollection<TemplateArgDef>();
        private string _name;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the application that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId
        {
            get { return _applicationId; }
            set 
            {
                if (_applicationId != value)
                {
                    _applicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Campaigner-friendly name for the template that will be shown in the rule editor.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A short description of the template that will be shown in the rule editor.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Extended help text for the template.</summary>
        [Newtonsoft.Json.JsonProperty("help", Required = Newtonsoft.Json.Required.Always)]
        public string Help
        {
            get { return _help; }
            set 
            {
                if (_help != value)
                {
                    _help = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Used for grouping templates in the rule editor sidebar.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        public string Category
        {
            get { return _category; }
            set 
            {
                if (_category != value)
                {
                    _category = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A Talang expression that contains variable bindings referring to args.</summary>
        [Newtonsoft.Json.JsonProperty("expr", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<object> Expr
        {
            get { return _expr; }
            set 
            {
                if (_expr != value)
                {
                    _expr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array of argument definitions.</summary>
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<TemplateArgDef> Args
        {
            get { return _args; }
            set 
            {
                if (_args != value)
                {
                    _args = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The template name used in Talang.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TemplateDef FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateDef>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewAttribute : System.ComponentModel.INotifyPropertyChanged
    {
        private NewAttributeEntity _entity;
        private string _eventType;
        private string _name;
        private string _title;
        private NewAttributeType _type;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags = new System.Collections.ObjectModel.ObservableCollection<string>();
        private bool _editable;
    
        /// <summary>The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.</summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewAttributeEntity Entity
        {
            get { return _entity; }
            set 
            {
                if (_entity != value)
                {
                    _entity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventType
        {
            get { return _eventType; }
            set 
            {
                if (_eventType != value)
                {
                    _eventType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The attribute name that will be used in API requests and Talang. E.g. if `name == "region"` then you would set the region attribute by including an `attributes.region` property in your request payload.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewAttributeType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A description of this attribute.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A list of tags for the attribute.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether or not this attribute can be edited.</summary>
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Always)]
        public bool Editable
        {
            get { return _editable; }
            set 
            {
                if (_editable != value)
                {
                    _editable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewAttribute FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewAttribute>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Attribute : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private int _accountId;
        private AttributeEntity _entity;
        private string _eventType;
        private string _name;
        private string _title;
        private AttributeType _type;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags = new System.Collections.ObjectModel.ObservableCollection<string>();
        private bool _editable;
        private bool _locked = false;
        private System.DateTime? _lastUsed;
        private string _lastUsedRequestUuid;
        private int? _lastUsedApplicationId;
        private System.Collections.ObjectModel.ObservableCollection<string> _usedAt = new System.Collections.ObjectModel.ObservableCollection<string>();
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.</summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeEntity Entity
        {
            get { return _entity; }
            set 
            {
                if (_entity != value)
                {
                    _entity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventType
        {
            get { return _eventType; }
            set 
            {
                if (_eventType != value)
                {
                    _eventType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The attribute name that will be used in API requests and Talang. E.g. if `name == "region"` then you would set the region attribute by including an `attributes.region` property in your request payload.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttributeType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A description of this attribute.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A list of tags for the attribute.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether or not this attribute can be edited.</summary>
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Always)]
        public bool Editable
        {
            get { return _editable; }
            set 
            {
                if (_editable != value)
                {
                    _editable = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates whether this attribute is in use. If in use only title can be changed and other operations are prohibited.</summary>
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Always)]
        public bool Locked
        {
            get { return _locked; }
            set 
            {
                if (_locked != value)
                {
                    _locked = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timestamp that indicates last time this attribute was used by integration API call.</summary>
        [Newtonsoft.Json.JsonProperty("lastUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastUsed
        {
            get { return _lastUsed; }
            set 
            {
                if (_lastUsed != value)
                {
                    _lastUsed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique id of integration API request that contained this attribute.</summary>
        [Newtonsoft.Json.JsonProperty("lastUsedRequestUuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastUsedRequestUuid
        {
            get { return _lastUsedRequestUuid; }
            set 
            {
                if (_lastUsedRequestUuid != value)
                {
                    _lastUsedRequestUuid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates which application used this attribute in integration API call.</summary>
        [Newtonsoft.Json.JsonProperty("lastUsedApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LastUsedApplicationId
        {
            get { return _lastUsedApplicationId; }
            set 
            {
                if (_lastUsedApplicationId != value)
                {
                    _lastUsedApplicationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>array of rulesets where the attribute is used</summary>
        [Newtonsoft.Json.JsonProperty("usedAt", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> UsedAt
        {
            get { return _usedAt; }
            set 
            {
                if (_usedAt != value)
                {
                    _usedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Attribute FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Attribute>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewEventType : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<int> _applicationIds = new System.Collections.ObjectModel.ObservableCollection<int>();
        private string _title;
        private string _name;
        private string _description;
        private NewEventTypeMimeType _mimeType;
        private string _examplePayload;
        private object _schema;
        private NewEventTypeHandlerLanguage? _handlerLanguage;
        private string _handler;
        private int _version;
    
        /// <summary>The IDs of the applications that are related to this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<int> ApplicationIds
        {
            get { return _applicationIds; }
            set 
            {
                if (_applicationIds != value)
                {
                    _applicationIds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The human-friendly display name for this event type. Use a short, past-tense, description of the event.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:
        /// 
        /// > The "Payment Accepted" event is triggered after successful processing of a payment by our payment gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This defines how the request payload will be parsed before your handler code is run.</summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewEventTypeMimeType MimeType
        {
            get { return _mimeType; }
            set 
            {
                if (_mimeType != value)
                {
                    _mimeType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>It is often helpful to include an example payload with the event type definition for documentation purposes.</summary>
        [Newtonsoft.Json.JsonProperty("examplePayload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExamplePayload
        {
            get { return _examplePayload; }
            set 
            {
                if (_examplePayload != value)
                {
                    _examplePayload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>It is strongly recommended to define a JSON schema that will be used to perform structural validation of request payloads after parsing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema
        {
            get { return _schema; }
            set 
            {
                if (_schema != value)
                {
                    _schema = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The language of the handler code. Currently only `"talang"` is supported.</summary>
        [Newtonsoft.Json.JsonProperty("handlerLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewEventTypeHandlerLanguage? HandlerLanguage
        {
            get { return _handlerLanguage; }
            set 
            {
                if (_handlerLanguage != value)
                {
                    _handlerLanguage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Code that will be run after successful parsing & validation of the payload for this event.
        /// This code _may_ choose to evaluate campaign rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("handler", Required = Newtonsoft.Json.Required.Always)]
        public string Handler
        {
            get { return _handler; }
            set 
            {
                if (_handler != value)
                {
                    _handler = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The version of this event type. When updating an existing event type this must be **exactly** `currentVersion + 1`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version
        {
            get { return _version; }
            set 
            {
                if (_version != value)
                {
                    _version = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewEventType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewEventType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class EventType : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.Collections.ObjectModel.ObservableCollection<int> _applicationIds = new System.Collections.ObjectModel.ObservableCollection<int>();
        private string _title;
        private string _name;
        private string _description;
        private EventTypeMimeType _mimeType;
        private string _examplePayload;
        private object _schema;
        private EventTypeHandlerLanguage? _handlerLanguage;
        private string _handler;
        private int _version;
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The IDs of the applications that are related to this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<int> ApplicationIds
        {
            get { return _applicationIds; }
            set 
            {
                if (_applicationIds != value)
                {
                    _applicationIds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The human-friendly display name for this event type. Use a short, past-tense, description of the event.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:
        /// 
        /// > The "Payment Accepted" event is triggered after successful processing of a payment by our payment gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This defines how the request payload will be parsed before your handler code is run.</summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventTypeMimeType MimeType
        {
            get { return _mimeType; }
            set 
            {
                if (_mimeType != value)
                {
                    _mimeType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>It is often helpful to include an example payload with the event type definition for documentation purposes.</summary>
        [Newtonsoft.Json.JsonProperty("examplePayload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExamplePayload
        {
            get { return _examplePayload; }
            set 
            {
                if (_examplePayload != value)
                {
                    _examplePayload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>It is strongly recommended to define a JSON schema that will be used to perform structural validation of request payloads after parsing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema
        {
            get { return _schema; }
            set 
            {
                if (_schema != value)
                {
                    _schema = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The language of the handler code. Currently only `"talang"` is supported.</summary>
        [Newtonsoft.Json.JsonProperty("handlerLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventTypeHandlerLanguage? HandlerLanguage
        {
            get { return _handlerLanguage; }
            set 
            {
                if (_handlerLanguage != value)
                {
                    _handlerLanguage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Code that will be run after successful parsing & validation of the payload for this event.
        /// This code _may_ choose to evaluate campaign rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("handler", Required = Newtonsoft.Json.Required.Always)]
        public string Handler
        {
            get { return _handler; }
            set 
            {
                if (_handler != value)
                {
                    _handler = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The version of this event type. When updating an existing event type this must be **exactly** `currentVersion + 1`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version
        {
            get { return _version; }
            set 
            {
                if (_version != value)
                {
                    _version = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EventType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EventType>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewWebhook : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<int> _applicationIds = new System.Collections.ObjectModel.ObservableCollection<int>();
        private string _title;
        private NewWebhookVerb _verb;
        private string _url;
        private System.Collections.ObjectModel.ObservableCollection<string> _headers = new System.Collections.ObjectModel.ObservableCollection<string>();
        private string _payload;
        private System.Collections.ObjectModel.ObservableCollection<TemplateArgDef> _params = new System.Collections.ObjectModel.ObservableCollection<TemplateArgDef>();
        private bool _enabled;
    
        /// <summary>The IDs of the applications that are related to this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<int> ApplicationIds
        {
            get { return _applicationIds; }
            set 
            {
                if (_applicationIds != value)
                {
                    _applicationIds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Friendly title for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>API method for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("verb", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewWebhookVerb Verb
        {
            get { return _verb; }
            set 
            {
                if (_verb != value)
                {
                    _verb = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>API url (supports templating using parameters) for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of API HTTP headers for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Headers
        {
            get { return _headers; }
            set 
            {
                if (_headers != value)
                {
                    _headers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>API payload (supports templating using parameters) for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload
        {
            get { return _payload; }
            set 
            {
                if (_payload != value)
                {
                    _payload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of template argument definitions</summary>
        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<TemplateArgDef> Params
        {
            get { return _params; }
            set 
            {
                if (_params != value)
                {
                    _params = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Enables or disables webhook from showing in rule builder</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled
        {
            get { return _enabled; }
            set 
            {
                if (_enabled != value)
                {
                    _enabled = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewWebhook FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewWebhook>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Webhook : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private System.DateTime _modified;
        private System.Collections.ObjectModel.ObservableCollection<int> _applicationIds = new System.Collections.ObjectModel.ObservableCollection<int>();
        private string _title;
        private WebhookVerb _verb;
        private string _url;
        private System.Collections.ObjectModel.ObservableCollection<string> _headers = new System.Collections.ObjectModel.ObservableCollection<string>();
        private string _payload;
        private System.Collections.ObjectModel.ObservableCollection<TemplateArgDef> _params = new System.Collections.ObjectModel.ObservableCollection<TemplateArgDef>();
        private bool _enabled;
        private System.Collections.ObjectModel.ObservableCollection<string> _usedAt = new System.Collections.ObjectModel.ObservableCollection<string>();
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was last modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Modified
        {
            get { return _modified; }
            set 
            {
                if (_modified != value)
                {
                    _modified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The IDs of the applications that are related to this entity. The IDs of the applications that are related to this entity.</summary>
        [Newtonsoft.Json.JsonProperty("applicationIds", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<int> ApplicationIds
        {
            get { return _applicationIds; }
            set 
            {
                if (_applicationIds != value)
                {
                    _applicationIds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Friendly title for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>API method for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("verb", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WebhookVerb Verb
        {
            get { return _verb; }
            set 
            {
                if (_verb != value)
                {
                    _verb = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>API url (supports templating using parameters) for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        public string Url
        {
            get { return _url; }
            set 
            {
                if (_url != value)
                {
                    _url = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of API HTTP headers for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Headers
        {
            get { return _headers; }
            set 
            {
                if (_headers != value)
                {
                    _headers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>API payload (supports templating using parameters) for this webhook</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload
        {
            get { return _payload; }
            set 
            {
                if (_payload != value)
                {
                    _payload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of template argument definitions</summary>
        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<TemplateArgDef> Params
        {
            get { return _params; }
            set 
            {
                if (_params != value)
                {
                    _params = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Enables or disables webhook from showing in rule builder</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled
        {
            get { return _enabled; }
            set 
            {
                if (_enabled != value)
                {
                    _enabled = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>array of rulesets where webhook is used</summary>
        [Newtonsoft.Json.JsonProperty("usedAt", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> UsedAt
        {
            get { return _usedAt; }
            set 
            {
                if (_usedAt != value)
                {
                    _usedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Webhook FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Webhook>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class ManagerConfig : System.ComponentModel.INotifyPropertyChanged
    {
        private int _schemaVersion;
    
        [Newtonsoft.Json.JsonProperty("schemaVersion", Required = Newtonsoft.Json.Required.Always)]
        public int SchemaVersion
        {
            get { return _schemaVersion; }
            set 
            {
                if (_schemaVersion != value)
                {
                    _schemaVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ManagerConfig FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ManagerConfig>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class NewExport : System.ComponentModel.INotifyPropertyChanged
    {
        private NewExportEntity _entity;
        private object _filter = new object();
    
        /// <summary>The name of the entity type being exported.</summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewExportEntity Entity
        {
            get { return _entity; }
            set 
            {
                if (_entity != value)
                {
                    _entity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Map of keys and values that were used to filter the exported rows</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        public object Filter
        {
            get { return _filter; }
            set 
            {
                if (_filter != value)
                {
                    _filter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NewExport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewExport>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Export : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.DateTime _created;
        private int _accountId;
        private int _userId;
        private ExportEntity _entity;
        private object _filter = new object();
    
        /// <summary>Unique ID for this entity.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exact moment this entity was created.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId
        {
            get { return _accountId; }
            set 
            {
                if (_accountId != value)
                {
                    _accountId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ID of the account that owns this entity.</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public int UserId
        {
            get { return _userId; }
            set 
            {
                if (_userId != value)
                {
                    _userId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of the entity type being exported.</summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExportEntity Entity
        {
            get { return _entity; }
            set 
            {
                if (_entity != value)
                {
                    _entity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Map of keys and values that were used to filter the exported rows</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Always)]
        public object Filter
        {
            get { return _filter; }
            set 
            {
                if (_filter != value)
                {
                    _filter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Export FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Export>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class LibraryAttribute : System.ComponentModel.INotifyPropertyChanged
    {
        private LibraryAttributeEntity _entity;
        private string _name;
        private string _title;
        private LibraryAttributeType _type;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _presets = new System.Collections.ObjectModel.ObservableCollection<string>();
        private System.Collections.ObjectModel.ObservableCollection<string> _tags = new System.Collections.ObjectModel.ObservableCollection<string>();
    
        /// <summary>The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.</summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LibraryAttributeEntity Entity
        {
            get { return _entity; }
            set 
            {
                if (_entity != value)
                {
                    _entity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The attribute name that will be used in API requests and Talang. E.g. if `name == "region"` then you would set the region attribute by including an `attributes.region` property in your request payload.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LibraryAttributeType Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A description of the attribute.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The presets that indicate to which industry the attribute applies to.</summary>
        [Newtonsoft.Json.JsonProperty("presets", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Presets
        {
            get { return _presets; }
            set 
            {
                if (_presets != value)
                {
                    _presets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Short tags that are used to group attributes.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LibraryAttribute FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LibraryAttribute>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Either "expired", "validNow", or "validFuture". The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum Valid
    {
        [System.Runtime.Serialization.EnumMember(Value = "expired")]
        Expired = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "validNow")]
        ValidNow = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "validFuture")]
        ValidFuture = 2,
    
    }
    
    /// <summary>Either "true" or "false". If "true", only coupons where `usageCounter < usageLimit` will be returned, "false" will return only coupons where `usageCounter >= usageLimit`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum Usable
    {
        [System.Runtime.Serialization.EnumMember(Value = "true")]
        True = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "false")]
        False = 1,
    
    }
    
    /// <summary>Either "expired", "validNow", or "validFuture". The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum Valid2
    {
        [System.Runtime.Serialization.EnumMember(Value = "expired")]
        Expired = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "validNow")]
        ValidNow = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "validFuture")]
        ValidFuture = 2,
    
    }
    
    /// <summary>Either "true" or "false". If "true", only referrals where `usageCounter < usageLimit` will be returned, "false" will return only referrals where `usageCounter >= usageLimit`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum Usable2
    {
        [System.Runtime.Serialization.EnumMember(Value = "true")]
        True = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "false")]
        False = 1,
    
    }
    
    /// <summary>Filter results by HTTTP status codes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = "success")]
        Success = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "error")]
        Error = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<CustomerProfile> _data = new System.Collections.ObjectModel.ObservableCollection<CustomerProfile>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerProfile> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response2 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Application> _data = new System.Collections.ObjectModel.ObservableCollection<Application>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Application> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response3 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Campaign> _data = new System.Collections.ObjectModel.ObservableCollection<Campaign>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Campaign> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response3>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response4 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Ruleset> _data = new System.Collections.ObjectModel.ObservableCollection<Ruleset>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Ruleset> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response4>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response5 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Coupon> _data = new System.Collections.ObjectModel.ObservableCollection<Coupon>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Coupon> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response5>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response6 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Coupon> _data = new System.Collections.ObjectModel.ObservableCollection<Coupon>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Coupon> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response6>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response7 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Referral> _data = new System.Collections.ObjectModel.ObservableCollection<Referral>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Referral> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response7>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response8 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<LedgerEntry> _data = new System.Collections.ObjectModel.ObservableCollection<LedgerEntry>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LedgerEntry> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response8>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response9 : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<LedgerBalance> _data = new System.Collections.ObjectModel.ObservableCollection<LedgerBalance>();
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LedgerBalance> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response9>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response10 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<LoyaltyProgram> _data = new System.Collections.ObjectModel.ObservableCollection<LoyaltyProgram>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LoyaltyProgram> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response10>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response11 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<ApiKeyWithUsage> _data = new System.Collections.ObjectModel.ObservableCollection<ApiKeyWithUsage>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ApiKeyWithUsage> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response11>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response12 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Role> _data = new System.Collections.ObjectModel.ObservableCollection<Role>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Role> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response12>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response13 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<ApplicationStorage> _data = new System.Collections.ObjectModel.ObservableCollection<ApplicationStorage>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationStorage> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response13>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response14 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<ApplicationStorageTuple> _data = new System.Collections.ObjectModel.ObservableCollection<ApplicationStorageTuple>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationStorageTuple> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response14>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response15 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<ApplicationStorageTuple> _data = new System.Collections.ObjectModel.ObservableCollection<ApplicationStorageTuple>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationStorageTuple> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response15>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response16 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<AccessLogEntry> _data = new System.Collections.ObjectModel.ObservableCollection<AccessLogEntry>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<AccessLogEntry> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response16>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response17 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<AccessLogEntry> _data = new System.Collections.ObjectModel.ObservableCollection<AccessLogEntry>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<AccessLogEntry> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response17>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response18 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<CampaignAnalytics> _data = new System.Collections.ObjectModel.ObservableCollection<CampaignAnalytics>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<CampaignAnalytics> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response18 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response18>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response19 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<ApplicationProfile> _data = new System.Collections.ObjectModel.ObservableCollection<ApplicationProfile>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationProfile> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response19 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response19>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response20 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<CustomerActivityReport> _data = new System.Collections.ObjectModel.ObservableCollection<CustomerActivityReport>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<CustomerActivityReport> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response20 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response20>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response21 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<ApplicationSession> _data = new System.Collections.ObjectModel.ObservableCollection<ApplicationSession>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationSession> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response21 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response21>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response22 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<ApplicationEvent> _data = new System.Collections.ObjectModel.ObservableCollection<ApplicationEvent>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationEvent> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response22 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response22>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response23 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<string> _data = new System.Collections.ObjectModel.ObservableCollection<string>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<string> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response23 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response23>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response24 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<LibraryAttribute> _data = new System.Collections.ObjectModel.ObservableCollection<LibraryAttribute>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<LibraryAttribute> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response24 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response24>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response25 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Attribute> _data = new System.Collections.ObjectModel.ObservableCollection<Attribute>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Attribute> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response25 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response25>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response26 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Webhook> _data = new System.Collections.ObjectModel.ObservableCollection<Webhook>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Webhook> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response26 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response26>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response27 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<WebhookLogEntry> _data = new System.Collections.ObjectModel.ObservableCollection<WebhookLogEntry>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<WebhookLogEntry> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response27 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response27>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response28 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<EventType> _data = new System.Collections.ObjectModel.ObservableCollection<EventType>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<EventType> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response28 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response28>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response29 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<User> _data = new System.Collections.ObjectModel.ObservableCollection<User>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<User> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response29 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response29>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response30 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Change> _data = new System.Collections.ObjectModel.ObservableCollection<Change>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Change> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response30 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response30>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public partial class Response31 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _totalResultSize;
        private System.Collections.ObjectModel.ObservableCollection<Export> _data = new System.Collections.ObjectModel.ObservableCollection<Export>();
    
        [Newtonsoft.Json.JsonProperty("totalResultSize", Required = Newtonsoft.Json.Required.Always)]
        public int TotalResultSize
        {
            get { return _totalResultSize; }
            set 
            {
                if (_totalResultSize != value)
                {
                    _totalResultSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Export> Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response31 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response31>(data);
        }
    
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum NewCampaignState
    {
        [System.Runtime.Serialization.EnumMember(Value = "enabled")]
        Enabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "disabled")]
        Disabled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "archived")]
        Archived = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum CampaignState
    {
        [System.Runtime.Serialization.EnumMember(Value = "enabled")]
        Enabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "disabled")]
        Disabled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "archived")]
        Archived = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum LimitConfigAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "redeemCoupon")]
        RedeemCoupon = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "redeemReferral")]
        RedeemReferral = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "setDiscount")]
        SetDiscount = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum CampaignSetBranchNodeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SET")]
        SET = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum CampaignSetBranchNodeOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = "ALL")]
        ALL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FIRST")]
        FIRST = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum CampaignSetLeafNodeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "CAMPAIGN")]
        CAMPAIGN = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum ApplicationApiHealthSummary
    {
        [System.Runtime.Serialization.EnumMember(Value = "OK")]
        OK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "WARNING")]
        WARNING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ERROR")]
        ERROR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CRITICAL")]
        CRITICAL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "NONE")]
        NONE = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum UserState
    {
        [System.Runtime.Serialization.EnumMember(Value = "invited")]
        Invited = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "deactivated")]
        Deactivated = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum NewCustomerSessionState
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "cancelled")]
        Cancelled = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum CustomerSessionState
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "cancelled")]
        Cancelled = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum ApplicationSessionState
    {
        [System.Runtime.Serialization.EnumMember(Value = "open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "cancelled")]
        Cancelled = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum AccountState
    {
        [System.Runtime.Serialization.EnumMember(Value = "trial")]
        Trial = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "trial_expired")]
        Trial_expired = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum UpdateUserState
    {
        [System.Runtime.Serialization.EnumMember(Value = "deactivated")]
        Deactivated = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "activated")]
        Activated = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum FuncArgDefType
    {
        [System.Runtime.Serialization.EnumMember(Value = "string")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "boolean")]
        Boolean = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "number")]
        Number = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum TemplateArgDefType
    {
        [System.Runtime.Serialization.EnumMember(Value = "string")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "boolean")]
        Boolean = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "number")]
        Number = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum NewAttributeEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = "Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Campaign")]
        Campaign = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerProfile")]
        CustomerProfile = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerSession")]
        CustomerSession = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CartItem")]
        CartItem = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Coupon")]
        Coupon = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Event")]
        Event = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum NewAttributeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "string")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "number")]
        Number = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "boolean")]
        Boolean = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "time")]
        Time = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum AttributeEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = "Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Campaign")]
        Campaign = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerProfile")]
        CustomerProfile = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerSession")]
        CustomerSession = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CartItem")]
        CartItem = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Coupon")]
        Coupon = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Event")]
        Event = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum AttributeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "string")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "number")]
        Number = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "boolean")]
        Boolean = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "time")]
        Time = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum NewEventTypeMimeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "application/json")]
        Application_json = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "application/x-www-form-urlencoded")]
        Application_xWwwFormUrlencoded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum NewEventTypeHandlerLanguage
    {
        [System.Runtime.Serialization.EnumMember(Value = "talang")]
        Talang = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum EventTypeMimeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "application/json")]
        Application_json = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "application/x-www-form-urlencoded")]
        Application_xWwwFormUrlencoded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum EventTypeHandlerLanguage
    {
        [System.Runtime.Serialization.EnumMember(Value = "talang")]
        Talang = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum NewWebhookVerb
    {
        [System.Runtime.Serialization.EnumMember(Value = "POST")]
        POST = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PUT")]
        PUT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "GET")]
        GET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DELETE")]
        DELETE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PATCH")]
        PATCH = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum WebhookVerb
    {
        [System.Runtime.Serialization.EnumMember(Value = "POST")]
        POST = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PUT")]
        PUT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "GET")]
        GET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DELETE")]
        DELETE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PATCH")]
        PATCH = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum NewExportEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = "Coupon")]
        Coupon = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum ExportEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = "Coupon")]
        Coupon = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum LibraryAttributeEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = "Application")]
        Application = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Campaign")]
        Campaign = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerProfile")]
        CustomerProfile = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomerSession")]
        CustomerSession = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CartItem")]
        CartItem = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Coupon")]
        Coupon = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Event")]
        Event = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.2.0")]
    public enum LibraryAttributeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "string")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "number")]
        Number = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "boolean")]
        Boolean = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "time")]
        Time = 3,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.3.0")]
    public class TalonOneException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public TalonOneException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.3.3.0")]
    public class TalonOneException<TResult> : TalonOneException
    {
        public TResult Result { get; private set; }

        public TalonOneException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}