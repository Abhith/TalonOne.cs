{
  "swagger": "2.0",
  "info": {
    "title": "Talon.One API",
    "version": "1.0.0",
    "description": "The Talon.One API is used to manage applications and campaigns, as well as to\nintegrate with your application. The operations in the _Integration API_ section\nare used to integrate with our platform, while the other operations are\nused to manage applications and campaigns.\n\n### Where is the API?\n\nThe API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`\n\n[updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put\n"
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "integration_auth": {
      "type": "apiKey",
      "name": "Content-Signature",
      "in": "header",
      "summary": "Requests are signed using the secret key of an Application.",
      "description": "Requests from application integrations must authenticate themselves by sending a\n`Content-Signature` header. The value of this header must be an HMAC\nsignature of the request payload generated with the secret key for the application.\n\n**Example signature generation (PHP)**\n\nThe code below demonstrates how to generate the signature for a request in PHP, assuming `$json_string` is the JSON encoded payload of the request, `$application_id` is the ID of the application sending the request, and `$application_key` is the secret key from your application (e.g. \"fefecafedeadbeef\").\n\n```php\n$key = hex2bin($application_key);\n$signature = hash_hmac('md5', $json_string, $key);\n\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array(\n    'Content-Type: application/json',\n    'Content-Signature: signer='.\n    $application_id .'; signature='.$signature\n));\n```\n\n**Example signature generation (Node.js)**\n\nHere is the same example for Node.js, assuming `jsonString`, `applicationId`, and `applicationKey` have been defined.\n\n```javascript\nvar crypto = require('crypto')\nvar hmac = crypto.createHmac('md5', new Buffer(applicationKey, 'hex'));\nhmac.write(jsonString);\nhmac.end()\nvar signature = hmac.read().toString('hex')\nreq.setHeader('Content-Signature', 'signer=' + applicationId + '; signature=' + signature)\nreq.write(buff)\n```\n"
    },
    "manager_auth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "The Management API operations use a simple bearer token to authenticate requests. You can obtain a bearer token from your credentials using the [createSession](#createSession) operation. This `token` property of the session is used to authenticate Campaign Manager requests with an HTTP header like `Authorization: Bearer $TOKEN`.\n"
    }
  },
  "security": [
    {
      "manager_auth": []
    }
  ],
  "tags": [
    {
      "name": "Integration API",
      "description": "The Integration API is how you push data into the Talon.One environment. You can create profiles for your customers, sessions to group their activity, and custom events to track specific actions that do not fit into the session data model.\nYou will need [Authentication][] to make requests to the API.\n[Authentication]: /integration-api/authentication\n"
    },
    {
      "name": "Sessions",
      "description": "Operations for logging in/out of the Campaign Manager.\n"
    },
    {
      "name": "Applications"
    },
    {
      "name": "Campaigns",
      "description": "Campaigns are the primary resource used to control the behaviour of the Talon.One Rule Engine. They combine rulesets, coupons, and limits into a single unit.\n"
    },
    {
      "name": "Coupons",
      "description": "Coupons are unique codes belonging to a particular campaign. They don't define any behaviour on their own, instead the campaign ruleset can include rules that validate coupons and carry out particular effects.\n"
    },
    {
      "name": "Customization",
      "description": "Talon.One is extremely customizable. These API operations allow you to alter the data model and rule builder to better suit Talon.One to the needs of your business."
    },
    {
      "name": "Campaign Analytics",
      "description": "Campaign Analytics are used to retrieve statistical data about the performance of a specific campaign.\n"
    },
    {
      "name": "Customer Data",
      "description": "Customer Data operations are used to retrieve data about customers/sessions/events for reporting and debugging in the Campaign Manager.\n"
    },
    {
      "name": "Logs",
      "description": "The Talon.One API records all incoming and outgoing requests. These API operations allow you to query those logs.\n"
    }
  ],
  "paths": {
    "/v1/customer_profiles/{integrationId}": {
      "put": {
        "operationId": "updateCustomerProfile",
        "summary": "Update a Customer Profile",
        "description": "Update (or create) a [Customer Profile][]. This profile information can then be matched and/or updated by campaign [Rules][].\n\nThe `integrationId` may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the `integrationId`. It is vital that this ID **not** change over time, so **don't** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.\n\nUpdating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.\n\n[Customer Profile]: /entities/#customer-profile\n[Rules]: /entities/#campaigns-rulesets-and-coupons\n",
        "security": [
          {
            "integration_auth": []
          }
        ],
        "tags": [
          "Integration API"
        ],
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "type": "string",
            "description": "The custom identifier for this profile, must be unique within the account.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewCustomerProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IntegrationState"
            }
          }
        }
      }
    },
    "/v1/customer_profiles_search": {
      "post": {
        "operationId": "getCustomerProfilesByAttributes",
        "summary": "Get a list of the customer profiles that match the given attributes",
        "description": "Gets a list of all the cusomer profiles for the account that exactly match a set of attributes.\n\nThe match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.\n\n[Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id=14115#customer-profile\n",
        "security": [
          {
            "integration_auth": []
          }
        ],
        "tags": [
          "Integration API"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerProfileSearch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CustomerProfile"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer_sessions/{customerSessionId}": {
      "put": {
        "operationId": "updateCustomerSession",
        "summary": "Update a Customer Session",
        "description": "Update (or create) a [Customer Session][]. For example, the items in a customers cart are part of a session.\n\nThe Talon.One platform supports multiple simultaneous sessions for the same profile, so if you have multiple ways of accessing the same application you have the option of either tracking multiple independent sessions or using the same session across all of them. You should share sessions when application access points share other state, such as the users cart. If two points of access to the application have independent state (e.g. a user can have different items in their cart across the two) they should use independent customer session ID's.\n\nThe `profileId` parameter in the request body should correspond to an `integrationId` for a customer profile, to track an anonymous session use the empty string (`\"\"`) as the `profileId`. Note that you do **not** need to create a customer profile first: if the specified profile does not yet exist, an empty profile will be created automatically.\n\nUpdating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.\n\nThe currency for the session and the cart items in the session is the same as that of the application with which the session is associated.\n\n[Customer Session]: /entities/#customer-session\n",
        "security": [
          {
            "integration_auth": []
          }
        ],
        "tags": [
          "Integration API"
        ],
        "parameters": [
          {
            "name": "customerSessionId",
            "in": "path",
            "type": "string",
            "description": "The custom identifier for this session, must be unique within the account.",
            "required": true,
            "example": "C156902"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewCustomerSession"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IntegrationState"
            }
          }
        }
      }
    },
    "/v1/events": {
      "post": {
        "operationId": "trackEvent",
        "summary": "Track an Event",
        "description": "Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.\n\nThe `sessionId` body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same `profileId` or an error will be returned.\n\nAs with customer sessions, you can use an empty string for `profileId` to indicate that this is an anonymous session.\n\nUpdating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.\n",
        "security": [
          {
            "integration_auth": []
          }
        ],
        "tags": [
          "Integration API"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "example": {
              "type": "page_visit",
              "value": {
                "url": "http://myapplication.com",
                "profileId": "foo",
                "sessionId": "bar"
              }
            },
            "schema": {
              "$ref": "#/definitions/NewEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/IntegrationState"
            }
          }
        }
      }
    },
    "/v1/referrals": {
      "post": {
        "operationId": "createReferral",
        "summary": "Create a referral code for an advocate",
        "description": "Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the `campaignId` parameter, and will be associated with the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile.\n",
        "security": [
          {
            "integration_auth": []
          }
        ],
        "tags": [
          "Integration API"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewReferral"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Referral"
            }
          }
        }
      }
    },
    "/v1/applications": {
      "post": {
        "operationId": "createApplication",
        "summary": "Create an Application",
        "description": "Create a new application in the current account.",
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApplication"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          }
        }
      },
      "get": {
        "operationId": "getApplications",
        "summary": "List Applications",
        "description": "List all application in the current account.",
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Application"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}": {
      "get": {
        "operationId": "getApplication",
        "summary": "Get Application",
        "description": "Get the application specified by the ID.",
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          }
        }
      },
      "put": {
        "operationId": "updateApplication",
        "summary": "Update Application data",
        "description": "Change the application specified by the ID.",
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApplication"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteApplication",
        "summary": "Delete an Application",
        "description": "Delete the application specified by the ID. Also deletes associated data.",
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns": {
      "post": {
        "operationId": "createCampaign",
        "summary": "Create a Campaign",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewCampaign"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Campaign"
            }
          }
        }
      },
      "get": {
        "operationId": "getCampaigns",
        "summary": "List your Campaigns",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Campaign"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaign_set": {
      "put": {
        "operationId": "updateCampaignSet",
        "summary": "Update a Campaign Set",
        "description": "",
        "tags": [
          "Manage Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewCampaignSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CampaignSet"
            }
          }
        }
      },
      "get": {
        "operationId": "getCampaignSet",
        "summary": "List CampaignSet",
        "description": "",
        "tags": [
          "Manage Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CampaignSet"
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns/{campaignId}": {
      "get": {
        "operationId": "getCampaign",
        "summary": "Get a Campaign",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Campaign"
            }
          }
        }
      },
      "put": {
        "operationId": "updateCampaign",
        "summary": "Update a Campaign",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewCampaign"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Campaign"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteCampaign",
        "summary": "Delete a Campaign",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets": {
      "post": {
        "operationId": "createRuleset",
        "summary": "Create a Ruleset",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewRuleset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Ruleset"
            }
          }
        }
      },
      "get": {
        "operationId": "getRulesets",
        "summary": "List Campaign Rulesets",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Ruleset"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}": {
      "put": {
        "operationId": "updateRuleset",
        "summary": "Update a Ruleset",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          },
          {
            "name": "rulesetId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 1234
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewRuleset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ruleset"
            }
          }
        }
      },
      "get": {
        "operationId": "getRuleset",
        "summary": "Get a Ruleset",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          },
          {
            "name": "rulesetId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 1234
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ruleset"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteRuleset",
        "summary": "Delete a Ruleset",
        "description": "",
        "tags": [
          "Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          },
          {
            "name": "rulesetId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 1234
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons": {
      "post": {
        "operationId": "createCoupons",
        "summary": "Create Coupons",
        "description": "",
        "tags": [
          "Coupons"
        ],
        "parameters": [
          {
            "name": "silent",
            "in": "query",
            "description": "If set to 'yes', response will be an empty 204, otherwise a list of the coupons generated.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewCoupons"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coupon"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "operationId": "getCoupons",
        "summary": "List Coupons",
        "description": "",
        "tags": [
          "Coupons"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "example": 97
          },
          {
            "name": "value",
            "in": "query",
            "description": "Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "valid",
            "in": "query",
            "enum": [
              "expired",
              "validNow",
              "validFuture"
            ],
            "description": "Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "usable",
            "in": "query",
            "enum": [
              "true",
              "false"
            ],
            "description": "Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`.\n"
          },
          {
            "name": "referralId",
            "in": "query",
            "description": "Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coupon"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAllCoupons",
        "summary": "Delete all of a Campaigns Coupons",
        "description": "",
        "tags": [
          "Coupons"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}": {
      "put": {
        "operationId": "updateCoupon",
        "summary": "Update a Coupon",
        "description": "",
        "tags": [
          "Coupons"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "couponId",
            "in": "path",
            "description": "The ID of the coupon code to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateCoupon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteCoupon",
        "summary": "Delete one Coupon",
        "description": "",
        "tags": [
          "Coupons"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "couponId",
            "in": "path",
            "description": "The ID of the coupon code to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals": {
      "get": {
        "operationId": "getReferrals",
        "summary": "List Referrals",
        "description": "",
        "tags": [
          "Manage Campaigns"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "valid",
            "in": "query",
            "enum": [
              "expired",
              "validNow",
              "validFuture"
            ],
            "description": "Either \"expired\", \"validNow\", or \"validFuture\". The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "usable",
            "in": "query",
            "enum": [
              "true",
              "false"
            ],
            "description": "Either \"true\" or \"false\". If \"true\", only referrals where `usageCounter < usageLimit` will be returned, \"false\" will return only referrals where `usageCounter >= usageLimit`.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Referral"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}": {
      "delete": {
        "operationId": "deleteReferral",
        "summary": "Delete one Referral",
        "description": "",
        "tags": [
          "Manage Campaigns"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "referralId",
            "in": "path",
            "description": "The ID of the referral code to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/loyalty/enable": {
      "put": {
        "operationId": "enableLoyaltyProgram",
        "summary": "Enable a loyalty program for an application",
        "description": "Enable an existing loyalty program for an application.",
        "tags": [
          "Loyalty"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "type": "string",
            "description": "The identifier for the application, must be unique within the account.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoyaltyMembership"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IntegrationState"
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/loyalty/disable": {
      "put": {
        "operationId": "disableLoyaltyProgram",
        "summary": "Disable a loyalty program for an application",
        "description": "Disable an existing loyalty program for an application.",
        "tags": [
          "Loyalty"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "type": "string",
            "description": "The identifier for the application, must be unique within the account.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoyaltyMembership"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IntegrationState"
            }
          }
        }
      }
    },
    "/v1/customer_profiles/{integrationId}/loyalty/join": {
      "put": {
        "operationId": "joinLoyaltyProgram",
        "summary": "Join a loyalty program",
        "description": "Sign a customer on to an existing loyalty program.",
        "tags": [
          "Loyalty"
        ],
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "type": "string",
            "description": "The custom identifier for this profile, must be unique within the account.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoyaltyMembership"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IntegrationState"
            }
          }
        }
      }
    },
    "/v1/customer_profiles/{integrationId}/loyalty/leave": {
      "put": {
        "operationId": "leaveLoyaltyProgram",
        "summary": "Leave a loyalty program",
        "description": "Sign customer off a loyalty program that they had joined earlier. Remaining points will be expired.",
        "tags": [
          "Loyalty"
        ],
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "type": "string",
            "description": "The custom identifier for this profile, must be unique within the account.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoyaltyMembership"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IntegrationState"
            }
          }
        }
      }
    },
    "/v1/customer_profiles/{integrationId}/ledger/{loyaltyProgramId}/history": {
      "get": {
        "operationId": "getLedgerHistory",
        "summary": "List point transactions for a customer and loyalty program",
        "description": "Show transactions for a customer in a certain loyalty program. Collecting points are recorded as positive amounts referencing an event that triggered the point collection. Similarily, spending points are recorded as negative amounts tied to an event that triggered spending.  Pairs of collected and spent points reference each other to show the clearing of points. The amount spent will link to the same positive amount of points. If only parts of a positive transaction needs to be spend, the whole amount is subtracted and the remaining points added with the same expiration date as the original collected points.\n",
        "tags": [
          "Loyalty"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "integrationId",
            "in": "path",
            "type": "string",
            "description": "The custom identifier for this profile, must be unique within the account.",
            "required": true
          },
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "type": "integer",
            "description": "The custom identifier for the ledger.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LedgerEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer_profiles/{integrationId}/ledger/balances": {
      "get": {
        "operationId": "getLedgerBalances",
        "summary": "List the current point balances for customer",
        "description": "Show the current balances accrued by this customer for loyalty programs with non-expired points and positive balances.",
        "tags": [
          "Loyalty"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "integrationId",
            "in": "path",
            "type": "string",
            "description": "The custom identifier for this profile, must be unique within the account.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LedgerBalance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyaltyprograms": {
      "post": {
        "operationId": "createLoyaltyProgram",
        "summary": "Create a loyalty program",
        "description": "Create a new loyalty program in the account. The name of the program must be unique within the application.",
        "tags": [
          "Ledger"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewLoyaltyProgram"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgram"
            }
          }
        }
      },
      "get": {
        "operationId": "getLoyaltyPrograms",
        "summary": "List loyalty programs",
        "description": "Get a list of the current loyalty programs defined in the account.",
        "tags": [
          "Ledger"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoyaltyProgram"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyaltyprograms/{loyaltyProgramId}": {
      "get": {
        "operationId": "getLoyaltyProgram",
        "summary": "Get loyalty program",
        "description": "Get information about a specific loyalty program.",
        "tags": [
          "Ledger"
        ],
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the loyalty program",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgram"
            }
          }
        }
      },
      "put": {
        "operationId": "updateLoyaltyProgram",
        "summary": "Update loyalty program data",
        "description": "Change an existing loyalty program.",
        "tags": [
          "Ledger"
        ],
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the loyalty program",
            "example": 42
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewLoyaltyProgram"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgram"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyProgram",
        "summary": "Delete a loyalty program",
        "description": "Delete a loalty program. This action may fail if there are still ledger entries linked to the program.",
        "tags": [
          "Ledger"
        ],
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the loyalty program",
            "example": 42
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/loyaltyPoints": {
      "get": {
        "operationId": "getPointPrice",
        "summary": "Get price for an item in all application subledger storages",
        "description": "Get a list of the price for an SKU in loyalty points for all eligible loyalty programs.",
        "tags": [
          "Ledger"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the application",
            "example": 42
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewProductLoyaltyPoints"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductLoyaltyPoints"
            }
          }
        }
      }
    },
    "/v1/api_keys": {
      "post": {
        "operationId": "createAPIKey",
        "summary": "Create an API Key",
        "description": "Create a new API key in the account.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApiKey"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          }
        }
      },
      "get": {
        "operationId": "getAPIKeys",
        "summary": "List API Keys for the account",
        "description": "Show API keys for this account.\n",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApiKeyWithUsage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/api_keys/renew_token": {
      "put": {
        "operationId": "renewAPIToken",
        "summary": "Renew the token for an API key",
        "description": "Renew the token for an API key.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApiKey"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the API key",
            "example": 42
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiKeyWithUsage"
            }
          }
        }
      }
    },
    "/api_keys/{apiKeyId}": {
      "get": {
        "operationId": "getAPIKey",
        "summary": "Get API Key",
        "description": "Get a specific API key.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the API key",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiKeyWithUsage"
            }
          }
        }
      },
      "put": {
        "operationId": "updateAPIKey",
        "summary": "Update API key data",
        "description": "Change an existing API key.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the API key",
            "example": 42
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApiKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiKeyWithUsage"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAPIKey",
        "summary": "Delete an API key",
        "description": "Delete an API Key.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the API key",
            "example": 42
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/roles": {
      "post": {
        "operationId": "createRole",
        "summary": "Create a role",
        "description": "Create a new role in the account.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewRole"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        }
      },
      "get": {
        "operationId": "getRoles",
        "summary": "List roles for the account",
        "description": "Show roles for this account.\n",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Role"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/{roleId}": {
      "get": {
        "operationId": "getRole",
        "summary": "Get role",
        "description": "Get a specific role.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the role",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        }
      },
      "put": {
        "operationId": "updateRole",
        "summary": "Update role data",
        "description": "Change an existing role.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "type": "string",
            "description": "The identifier for this role.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteRole",
        "summary": "Delete a role",
        "description": "Delete a role.",
        "tags": [
          "API Key"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The identifier for the role",
            "example": 42
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/storages": {
      "post": {
        "operationId": "createStorage",
        "summary": "Create an application storage",
        "description": "",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The identifier for the application",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApplicationStorage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApplicationStorage"
            }
          }
        }
      },
      "get": {
        "operationId": "getStorages",
        "summary": "List application storages",
        "description": "Lists all storages for this application.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "applicationId",
            "description": "The identifier for the application",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationStorage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/storages/{storageId}": {
      "get": {
        "operationId": "getStorage",
        "summary": "Get an application storage",
        "description": "Receive the configuration of a specific storage.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "description": "The identifier for the application",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "storageId",
            "description": "The identifier for the storage",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationStorage"
            }
          }
        }
      },
      "put": {
        "operationId": "updateStorage",
        "summary": "Update an application storage",
        "description": "",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The identifier for the application",
            "required": true,
            "type": "integer"
          },
          {
            "name": "storageId",
            "in": "path",
            "description": "The identifier for the storage",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApplicationStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationStorage"
            }
          }
        }
      },
      "post": {
        "operationId": "createStorageData",
        "summary": "Create application storage data",
        "description": "Creates new application storage data.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "silent",
            "in": "query",
            "description": "If set to 'yes', response will be an empty 204, otherwise a list of the key value pairs generated.",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The identifier for the application",
            "required": true,
            "type": "integer"
          },
          {
            "name": "storageId",
            "description": "The identifier for the storage",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApplicationStorageData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationStorageTuple"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/storages/{storageId}/data": {
      "get": {
        "operationId": "getStorageData",
        "summary": "Get application storage data",
        "description": "Receive the data of a specific storage.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "description": "The identifier for the application",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "storageId",
            "description": "The identifier for the storage",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationStorageTuple"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/storages/{storageId}/data/{keyName}": {
      "get": {
        "operationId": "getStorageValue",
        "summary": "Get application storage value",
        "description": "Receive a value for a key from an application storage.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "description": "The identifier for the application",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "storageId",
            "description": "The identifier for the storage",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "keyName",
            "description": "The key for the item",
            "in": "path",
            "required": true,
            "type": "string",
            "example": "testKey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationStorageTuple"
            }
          }
        }
      },
      "put": {
        "operationId": "updateStorageValue",
        "summary": "Update one application storage value",
        "description": "Update an existing application storage value.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The identifier for the application",
            "required": true,
            "type": "integer"
          },
          {
            "name": "storageId",
            "description": "The identifier for the storage",
            "in": "path",
            "required": true,
            "type": "integer",
            "example": 42
          },
          {
            "name": "keyName",
            "description": "The key for the item",
            "in": "path",
            "required": true,
            "type": "string",
            "example": "testKey"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewApplicationStorageTuple"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationStorageTuple"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteStorageValue",
        "summary": "Delete one application storage value",
        "description": "Deletes a key-value pair.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The identifier for the application",
            "required": true,
            "type": "integer"
          },
          {
            "name": "storageId",
            "in": "path",
            "description": "The identifier for the storage",
            "required": true,
            "type": "string",
            "example": 42
          },
          {
            "name": "keyName",
            "in": "path",
            "description": "The key for the item",
            "required": true,
            "type": "string",
            "example": "testKey"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/applications/{applicationId}/health_report": {
      "get": {
        "operationId": "getApplicationApiHealth",
        "summary": "Get report of health of application API",
        "description": "",
        "tags": [
          "Manage Applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationApiHealth"
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/access_logs": {
      "get": {
        "operationId": "getAccessLogs",
        "summary": "Get access logs for application",
        "description": "",
        "tags": [
          "Logs"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "path",
            "in": "query",
            "type": "string",
            "description": "Only return results where the request path matches the given regular expresssion."
          },
          {
            "name": "method",
            "in": "query",
            "type": "string",
            "description": "Only return results where the request method matches the given regular expresssion."
          },
          {
            "name": "rangeStart",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from after this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "rangeEnd",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from before this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AccessLogEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/access_logs": {
      "get": {
        "operationId": "getAllAccessLogs",
        "summary": "Get all access logs",
        "description": "Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs.\n",
        "tags": [
          "Logs"
        ],
        "parameters": [
          {
            "name": "rangeStart",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from after this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "rangeEnd",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from before this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "path",
            "in": "query",
            "type": "string",
            "description": "Only return results where the request path matches the given regular expresssion."
          },
          {
            "name": "method",
            "in": "query",
            "type": "string",
            "description": "Only return results where the request method matches the given regular expresssion."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AccessLogEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/campaigns/{campaignId}/analytics": {
      "get": {
        "operationId": "getCampaignAnalytics",
        "summary": "Get analytics of campaigns",
        "description": "",
        "tags": [
          "Campaign Analytics"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "rangeStart",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from after this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "rangeEnd",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from before this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CampaignAnalytics"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/customers": {
      "get": {
        "operationId": "getApplicationCustomers",
        "summary": "List Application Customers",
        "description": "",
        "tags": [
          "Customer Data"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationProfile"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/customers/{customerId}": {
      "get": {
        "operationId": "getApplicationCustomer",
        "summary": "Get Application Customer",
        "description": "",
        "tags": [
          "Customer Data"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationProfile"
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/customer_activity_reports": {
      "get": {
        "operationId": "getCustomerActivityReports",
        "summary": "Get Activity Reports for Application Customers",
        "description": "Fetch summary reports for all application customers based on a time range",
        "tags": [
          "Customer Data"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "rangeStart",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from after this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "rangeEnd",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from before this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Only return reports matching the customer name",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Only return reports matching the customerId",
            "required": false,
            "type": "string"
          },
          {
            "name": "advocateName",
            "in": "query",
            "description": "Only return reports matching the current customer referrer name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CustomerActivityReport"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/customer_activity_reports/{customerId}": {
      "get": {
        "operationId": "getCustomerActivityReport",
        "summary": "Get Activity Report for Single Customer",
        "description": "Fetch summary report for single application customer based on a time range",
        "tags": [
          "Customer Data"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "rangeStart",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from after this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "rangeEnd",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time",
            "description": "Only return results from before this timestamp, must be an RFC3339 timestamp string"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerActivityReport"
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/sessions": {
      "get": {
        "operationId": "getApplicationSessions",
        "summary": "List Application Sessions",
        "description": "",
        "tags": [
          "Customer Data"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "profile",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Profile integration ID filter for sessions. Must be exact match."
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/sessions/{sessionId}": {
      "get": {
        "operationId": "getApplicationSession",
        "summary": "Get Application Session",
        "description": "",
        "tags": [
          "Customer Data"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationSession"
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/events": {
      "get": {
        "operationId": "getApplicationEvents",
        "description": "Lists all events recorded for an application.\n",
        "summary": "List Applications Events",
        "tags": [
          "Customer Data"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma-separated list of types by which to filter events. Must be exact match(es)."
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return events created before this date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return events created after this date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "session",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Session integration ID filter for events. Must be exact match."
          },
          {
            "name": "profile",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Profile integration ID filter for events. Must be exact match."
          },
          {
            "name": "customerName",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Customer name filter for events. Will match substrings case-insensitively.",
            "minLength": 2
          },
          {
            "name": "customerEmail",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Customer e-mail address filter for events. Will match substrings case-insensitively.",
            "minLength": 2
          },
          {
            "name": "effectsQuery",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Effects filter for events. Will perform a full-text search on the text content of the events effects, if any."
          },
          {
            "name": "attributesQuery",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values."
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/event_types": {
      "get": {
        "operationId": "getApplicationEventTypes",
        "summary": "List Applications Event Types",
        "description": "Get all of the distinct values of the Event `type` property for events recorded in the application.\n\nSee also: [Track an event](/integration-api/reference/#trackEvent)\n",
        "tags": [
          "Customer Data"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApplicationEventType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/talang_environment": {
      "get": {
        "operationId": "getTalangEnvironment",
        "summary": "Get Talang Environment",
        "description": "",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/v1/applications/{applicationId}/talang_templates/{name}": {
      "put": {
        "operationId": "updateTalangTemplate",
        "summary": "Update a custom Talang template",
        "description": "This operation allows developers to create & update custom templates for rules, conditions, and effects.\nThese custom templates are available to campaign managers in the sidebar of the campaign rule editor.\n",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template. This is used in the Talang expressions of rules.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewTemplateDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TemplateDef"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteTalangTemplate",
        "summary": "Delete a custom Talang template",
        "description": "Delete a custom Talang template. **Warning:** this operation does not check if the template is in use by any rules.\n",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the template. This is used in the Talang expressions of rules.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/attributes_library": {
      "get": {
        "operationId": "getAttributeLibrary",
        "summary": "Get the library of attributes",
        "description": "Returns all the attributes in the library\n",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LibraryAttribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/attributes": {
      "post": {
        "operationId": "createAttribute",
        "summary": "Define a new custom attribute",
        "description": "Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a `zipCode` field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.\n\nThese attributes are shared across all applications in your account, and are never required.\n",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewAttribute"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Attribute"
            }
          }
        }
      },
      "get": {
        "operationId": "getAttributes",
        "summary": "List custom attributes",
        "description": "Returns all the defined custom attributes for the account.\n",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Attribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/attributes/{attributeId}": {
      "get": {
        "operationId": "getAttribute",
        "summary": "Get a custom attribute",
        "description": "Returns custom attribute for the account by its id.\n",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Attribute"
            }
          }
        }
      },
      "put": {
        "operationId": "updateAttribute",
        "summary": "Update a custom attribute",
        "description": "Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name `region`, and your integration is sending `attributes.region` with customer profile updates, changing the name to `locale` would cause the integration requests to begin failing.\n\nIf you **really** need to change the `type` or `name` property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one.\n",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewAttribute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Attribute"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAttribute",
        "summary": "Delete a custom attribute",
        "description": "Removes a defined custom attribute.\n\n**Warning:** this will also destroy all data associated with the attribute!\n",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/webhooks": {
      "get": {
        "operationId": "getWebhooks",
        "summary": "List Webhooks",
        "description": "",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "applicationIds",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by one or more application ids separated by comma"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Webhook"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createWebhook",
        "summary": "Create Webhook",
        "description": "Creates a new webhook.",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewWebhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        }
      }
    },
    "/v1/webhooks/{webhookId}": {
      "get": {
        "operationId": "getWebhook",
        "summary": "Get Webhook",
        "description": "Returns an webhook by its id.",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        }
      },
      "put": {
        "operationId": "updateWebhook",
        "summary": "Update Webhook",
        "description": "Updates an existing webhook.",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteWebhook",
        "summary": "Delete Webhook",
        "description": "Removes an existing webhook.",
        "tags": [
          "Customization"
        ],
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/webhook_logs": {
      "get": {
        "operationId": "getWebhookLogs",
        "summary": "List Webhook Log Entries",
        "description": "",
        "tags": [
          "Logs"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          },
          {
            "name": "webhookId",
            "in": "query",
            "description": "Filter results by Webhook.",
            "required": false,
            "type": "int"
          },
          {
            "name": "applicationId",
            "in": "query",
            "required": false,
            "type": "int"
          },
          {
            "name": "campaignId",
            "in": "query",
            "description": "Filter results by campaign.",
            "required": false,
            "type": "int"
          },
          {
            "name": "requestUuid",
            "in": "query",
            "description": "Filter results by request UUID.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter results by HTTTP status codes.",
            "required": false,
            "type": "string",
            "enum": [
              "success",
              "error"
            ]
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WebhookLogEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/event_types": {
      "get": {
        "operationId": "getEventTypes",
        "summary": "List Event Types",
        "description": "Fetch all event type definitions for your account. Each event type can be\n",
        "tags": [
          "Customization",
          "Undocumented"
        ],
        "parameters": [
          {
            "name": "applicationIds",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by one or more application ids separated by comma"
          },
          {
            "name": "name",
            "type": "string",
            "in": "query",
            "description": "Filter results to event types with the given name. This parameter implies `includeOldVersions`."
          },
          {
            "name": "includeOldVersions",
            "type": "bool",
            "in": "query",
            "default": false,
            "description": "Include all versions of every event type."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EventType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createEventType",
        "summary": "Create Event Type",
        "description": "Define a new event type. Due to event types being immutable, this operation also\nserves the purpose of updating an event type. To create a new version of an existing\nevent type use the same name with a new `version` (by convention the new version is\n`oldVersion + 1`, but any unique `(name, version)` combination is allowed.\n",
        "tags": [
          "Customization",
          "Undocumented"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewEventType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventType"
            }
          }
        }
      }
    },
    "/v1/event_types/{eventTypeId}": {
      "get": {
        "operationId": "getEventType",
        "summary": "Get Event Type",
        "tags": [
          "Customization",
          "Undocumented"
        ],
        "parameters": [
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventType"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteEventType",
        "summary": "Delete Event Type",
        "description": "Removes an existing event type.",
        "tags": [
          "Customization",
          "Undocumented"
        ],
        "parameters": [
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "operationId": "getUsers",
        "summary": "List Users in your account",
        "description": "",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "operationId": "getUser",
        "summary": "Get a single User",
        "description": "Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves.\n",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "operationId": "updateUser",
        "summary": "Update User data",
        "description": "",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/v1/changes": {
      "get": {
        "operationId": "getChanges",
        "summary": "Get a log of changes to an account",
        "description": "Get list of changes caused by API calls for an account. Only accessible for admins.",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of items to include in this response."
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Skips the given number of items when paging through large result sets."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with `-` to sort in descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Change"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/invites": {
      "post": {
        "operationId": "createInvite",
        "summary": "Create a new user invitation",
        "description": "",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewInvitation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/v1/invite_emails": {
      "post": {
        "operationId": "createInviteEmail",
        "summary": "Send an invite token via email to the invited User",
        "description": "",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewInviteEmail"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NewInviteEmail"
            }
          }
        }
      }
    },
    "/v1/accept_invite": {
      "post": {
        "operationId": "acceptInvite",
        "summary": "Accept an invitation",
        "description": "Consumes the supplied invitation code and creates a new user with the given email & password.\n",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        }
      }
    },
    "/v1/password_recovery_emails": {
      "post": {
        "operationId": "createPasswordRecoveryEmail",
        "summary": "Send a link to recover password to the email of an existing account",
        "description": "",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewPasswordEmail"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NewPasswordEmail"
            }
          }
        }
      }
    },
    "/v1/reset_password": {
      "post": {
        "operationId": "resetPassword",
        "summary": "Reset a password following the link provided by the password recovery email",
        "description": "Consumes the supplied password request code and resets a password for an account.\n",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewPassword"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NewPassword"
            }
          }
        }
      }
    },
    "/v1/accounts/{accountId}": {
      "get": {
        "operationId": "getAccount",
        "summary": "Get Account",
        "description": "",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      },
      "put": {
        "operationId": "updateAccount",
        "summary": "Update Account",
        "description": "",
        "tags": [
          "Accounts & Users"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateAccount"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/v1/sessions": {
      "post": {
        "operationId": "createSession",
        "summary": "Create a Session",
        "description": "",
        "tags": [
          "Sessions"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        }
      },
      "delete": {
        "operationId": "destroySession",
        "summary": "Destroy a Session",
        "description": "",
        "tags": [
          "Sessions"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/v1/manager_config": {
      "get": {
        "operationId": "getManagerConfig",
        "summary": "Get Campaign Manager config",
        "description": "Get the current users individual campaign manager configuration. This\nconfiguration contains settings for the UI that have no effect on the\noperation of the API or environment.\n",
        "tags": [
          "Campaign Manager"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ManagerConfig"
            }
          }
        }
      },
      "put": {
        "operationId": "updateManagerConfig",
        "summary": "Update Campaign Manager config",
        "description": "Updates your personal configuration of the Campaign Manager. As mentioned above, this configuration has no effect on the behaviour of the API or environment.\n",
        "tags": [
          "Campaign Manager"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ManagerConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ManagerConfig"
            }
          }
        }
      }
    },
    "/v1/exports": {
      "get": {
        "operationId": "getExports",
        "summary": "Get Exports",
        "description": "Get a list of all past exports\n",
        "tags": [
          "Campaign Manager"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "required": [
                "totalResultSize",
                "data"
              ],
              "properties": {
                "totalResultSize": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Export"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createExport",
        "summary": "Record new Export Timestamp",
        "description": "This endpoint can be used to record the date and time of an Export.\n",
        "tags": [
          "Campaign Manager"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewExport"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Export"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "A message describing the error."
        },
        "errors": {
          "type": "array",
          "description": "An array of individual problems encountered during the request.",
          "items": {
            "$ref": "#/definitions/APIError"
          }
        }
      }
    },
    "APIError": {
      "type": "object",
      "required": [
        "source",
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "Short description of the problem."
        },
        "details": {
          "type": "string",
          "description": "Longer description of this specific instance of the problem."
        },
        "source": {
          "$ref": "#/definitions/ErrorSource"
        }
      }
    },
    "ErrorSource": {
      "type": "object",
      "description": "The source of the current error, exactly one of `pointer` or `parameter` will be defined.\n",
      "properties": {
        "pointer": {
          "type": "string",
          "description": "Pointer to the path in the payload that caused this error."
        },
        "parameter": {
          "type": "string",
          "description": "Query parameter that caused this error."
        }
      }
    },
    "CouponValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The coupon code.",
          "minLength": 4
        }
      }
    },
    "CouponConstraints": {
      "type": "object",
      "properties": {
        "usageLimit": {
          "type": "integer",
          "minimum": 0,
          "description": "The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.\n"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Timestamp at which point the coupon becomes valid."
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative."
        }
      }
    },
    "CodeGeneratorSettings": {
      "type": "object",
      "properties": {
        "validCharacters": {
          "type": "array",
          "description": "Set of characters to be used when generating random part of code. Defaults to [A-Z, 0-9] (in terms of RegExp).",
          "items": {
            "type": "string"
          }
        },
        "couponPattern": {
          "type": "string",
          "description": "The pattern that will be used to generate coupon codes. The character `#` acts as a placeholder and will be replaced by a random character from the `validCharacters` set.\n",
          "minLength": 3
        }
      },
      "additionalProperties": false,
      "required": [
        "couponPattern",
        "validCharacters"
      ]
    },
    "Session": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "description": "The ID of the user of this session"
        },
        "token": {
          "type": "string",
          "description": "An opaque session identifier"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Unix timestamp indicating when the session was first created."
        }
      },
      "required": [
        "userId",
        "token",
        "created"
      ]
    },
    "LoginParams": {
      "type": "object",
      "description": "",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email address associated with your account."
        },
        "password": {
          "type": "string",
          "description": "The password for your account."
        }
      },
      "additionalProperties": false
    },
    "NewApiKey": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this API key.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A longer description of the API key."
        },
        "roleId": {
          "type": "integer",
          "description": "ID of the role to be used."
        },
        "applicationId": {
          "type": "integer",
          "description": "ID of the application to be used for integration requests."
        }
      },
      "required": [
        "name",
        "roleId"
      ]
    },
    "ApiKey": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "accountId",
        "name",
        "roleId",
        "token"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "name": {
          "type": "string",
          "description": "The name of this API key.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A longer description of the API key."
        },
        "roleId": {
          "type": "integer",
          "description": "ID of the role to be used."
        },
        "applicationId": {
          "type": "integer",
          "description": "ID of the application to be used for integration requests."
        },
        "token": {
          "type": "string",
          "description": "Token for the API Key."
        }
      },
      "additionalProperties": false
    },
    "ApiKeyWithUsage": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "accountId",
        "name",
        "roleId",
        "token",
        "usageCount",
        "lastUsed"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "name": {
          "type": "string",
          "description": "The name of this API key.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A longer description of the API key."
        },
        "roleId": {
          "type": "integer",
          "description": "ID of the role to be used."
        },
        "applicationId": {
          "type": "integer",
          "description": "ID of the application to be used for integration requests."
        },
        "token": {
          "type": "string",
          "description": "Token for the API Key."
        },
        "usageCount": {
          "type": "integer",
          "description": "Number of times the API key was used."
        },
        "lastUsed": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last usage of the API key."
        }
      },
      "additionalProperties": false
    },
    "NewRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this application.",
          "minLength": 1
        },
        "policy": {
          "$ref": "#/definitions/AccessControlList"
        }
      },
      "required": [
        "name",
        "policy"
      ]
    },
    "Role": {
      "type": "object",
      "description": "",
      "required": [
        "name",
        "policy",
        "id",
        "created",
        "modified",
        "accountId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this application.",
          "minLength": 1
        },
        "policy": {
          "$ref": "#/definitions/AccessControlList"
        },
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        }
      },
      "additionalProperties": false
    },
    "NewApplication": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this application.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A longer description of the application."
        },
        "type": {
          "type": "string",
          "description": "Type of the application system (\"applicationware\", \"woocommerce\", \"custom\", …)"
        },
        "key": {
          "type": "string",
          "description": "Hex key for HMAC-signing API calls as coming from this application (16 hex digits)",
          "minLength": 16,
          "maxLength": 16,
          "pattern": "^[a-fA-F0-9]{16}$"
        },
        "timezone": {
          "type": "string",
          "description": "A string containing an IANA timezone descriptor.",
          "minLength": 1
        },
        "currency": {
          "type": "string",
          "description": "A string describing a default currency for new customer sessions.",
          "minLength": 1
        }
      },
      "required": [
        "name",
        "timezone",
        "currency",
        "key"
      ]
    },
    "Application": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "accountId",
        "name",
        "timezone",
        "currency",
        "key"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "name": {
          "type": "string",
          "description": "The name of this application.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A longer description of the application."
        },
        "type": {
          "type": "string",
          "description": "Type of the application system (\"applicationware\", \"woocommerce\", \"custom\", …)"
        },
        "key": {
          "type": "string",
          "description": "Hex key for HMAC-signing API calls as coming from this application (16 hex digits)",
          "minLength": 16,
          "maxLength": 16,
          "pattern": "^[a-fA-F0-9]{16}$"
        },
        "timezone": {
          "type": "string",
          "description": "A string containing an IANA timezone descriptor.",
          "minLength": 1
        },
        "currency": {
          "type": "string",
          "description": "A string describing a default currency for new customer sessions.",
          "minLength": 1
        }
      },
      "additionalProperties": false
    },
    "NewCampaign": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A friendly name for this campaign.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the campaign."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the campaign will become active."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the campaign will become in-active."
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this campaign",
          "additionalProperties": true
        },
        "state": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled",
            "archived"
          ],
          "default": "enabled",
          "description": "A disabled or archived campaign is not evaluated for rules or coupons.\n"
        },
        "activeRulesetId": {
          "type": "integer",
          "description": "ID of Ruleset this campaign applies on customer session evaluation."
        },
        "tags": {
          "type": "array",
          "description": "A list of tags for the campaign.",
          "maxItems": 50,
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "couponSettings": {
          "$ref": "#/definitions/CodeGeneratorSettings"
        },
        "referralSettings": {
          "$ref": "#/definitions/CodeGeneratorSettings"
        },
        "limits": {
          "type": "array",
          "description": "The set of limits that will operate for this campaign",
          "items": {
            "$ref": "#/definitions/LimitConfig"
          }
        }
      },
      "required": [
        "name",
        "state",
        "tags",
        "limits"
      ]
    },
    "Campaign": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "applicationId",
        "userId",
        "name",
        "state",
        "tags",
        "limits",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "userId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "name": {
          "type": "string",
          "description": "A friendly name for this campaign.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the campaign."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the campaign will become active."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the campaign will become in-active."
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this campaign",
          "additionalProperties": true
        },
        "state": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled",
            "archived"
          ],
          "default": "enabled",
          "description": "A disabled or archived campaign is not evaluated for rules or coupons.\n"
        },
        "activeRulesetId": {
          "type": "integer",
          "description": "ID of Ruleset this campaign applies on customer session evaluation."
        },
        "tags": {
          "type": "array",
          "description": "A list of tags for the campaign.",
          "maxItems": 50,
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "couponSettings": {
          "$ref": "#/definitions/CodeGeneratorSettings"
        },
        "referralSettings": {
          "$ref": "#/definitions/CodeGeneratorSettings"
        },
        "limits": {
          "type": "array",
          "description": "The set of limits that will operate for this campaign",
          "items": {
            "$ref": "#/definitions/LimitConfig"
          }
        },
        "couponRedemptionCount": {
          "type": "integer",
          "description": "Number of coupons redeemed in the campaign."
        },
        "discountCount": {
          "type": "integer",
          "description": "Total amount of discounts redeemed in the campaign."
        },
        "lastActivity": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the most recent event received by this campaign."
        }
      },
      "additionalProperties": false
    },
    "NewRuleset": {
      "type": "object",
      "required": [
        "rules"
      ],
      "properties": {
        "rules": {
          "type": "array",
          "description": "Set of rules to apply.",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        }
      }
    },
    "Ruleset": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "campaignId",
        "userId",
        "rules"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "campaignId": {
          "type": "integer",
          "description": "The ID of the campaign that owns this entity."
        },
        "userId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "rules": {
          "type": "array",
          "description": "Set of rules to apply.",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        },
        "activatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating when this Ruleset was activated."
        }
      },
      "additionalProperties": false
    },
    "NewApplicationStorage": {
      "type": "object",
      "required": [
        "name",
        "datatype"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier for the information to be saved, e.g. \"Loyalty points for SKU\"."
        },
        "datatype": {
          "type": "object",
          "description": "A JSON Schema describing the information to be saved in the storage",
          "additionalProperties": true
        },
        "description": {
          "type": "string",
          "description": "Description of the application store"
        }
      }
    },
    "ApplicationStorage": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "applicationId",
        "name",
        "datatype",
        "usedAt"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "name": {
          "type": "string",
          "description": "Identifier for the information to be saved, e.g. \"Loyalty points for SKU\"."
        },
        "datatype": {
          "type": "object",
          "description": "A JSON Schema describing the information to be saved in the storage",
          "additionalProperties": true
        },
        "description": {
          "type": "string",
          "description": "Description of the application store"
        },
        "usedAt": {
          "type": "array",
          "description": "array of rulesets where the application storage is used",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ApplicationStorageData": {
      "type": "array",
      "description": "Array of ApplicationStorageData.",
      "items": {
        "$ref": "#/definitions/ApplicationStorageTuple"
      }
    },
    "NewApplicationStorageData": {
      "type": "array",
      "description": "Array of ApplicationStorageData to be created.",
      "items": {
        "$ref": "#/definitions/NewApplicationStorageTuple"
      }
    },
    "NewApplicationStorageTuple": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "Key information that will map to a value, e.g. SKU number \"LEV-JN-SL-36-GN\".",
          "minLength": 1
        },
        "value": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "object",
              "additionalProperties": true
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ApplicationStorageTuple": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "key",
        "value",
        "storageId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "key": {
          "type": "string",
          "description": "Key information that will map to a value, e.g. SKU number \"LEV-JN-SL-36-GN\".",
          "minLength": 1
        },
        "value": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "object",
              "additionalProperties": true
            }
          ]
        },
        "storageId": {
          "type": "integer",
          "description": "ID of the storage in which the data resides"
        }
      },
      "additionalProperties": false
    },
    "NewProductLoyaltyPoints": {
      "type": "object",
      "description": "",
      "required": [
        "item"
      ],
      "properties": {
        "cartItem": {
          "$ref": "#/definitions/CartItem"
        }
      },
      "additionalProperties": false
    },
    "ProductLoyaltyPoints": {
      "type": "object",
      "description": "",
      "required": [
        "cartItem",
        "pointPrices"
      ],
      "properties": {
        "cartItem": {
          "$ref": "#/definitions/CartItem"
        },
        "pointPrices": {
          "type": "object",
          "description": "Prices in loyalty points.",
          "additionalProperties": {
            "type": "integer"
          }
        }
      },
      "additionalProperties": false
    },
    "Binding": {
      "type": "object",
      "required": [
        "name",
        "expression"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "A descriptive name for the value to be bound."
        },
        "expression": {
          "type": "array",
          "description": "A Talang expression that will be evaluated and its result attached to the name of the binding."
        }
      }
    },
    "Rule": {
      "type": "object",
      "required": [
        "title",
        "condition",
        "effects"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "A short description of the rule."
        },
        "description": {
          "type": "string",
          "description": "A longer, more detailed description of the rule."
        },
        "bindings": {
          "type": "array",
          "description": "An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.",
          "items": {
            "$ref": "#/definitions/Binding"
          }
        },
        "condition": {
          "type": "array",
          "description": "A Talang expression that will be evaluated in the context of the given event.",
          "minItems": 1
        },
        "effects": {
          "type": "array",
          "description": "An array of effectful Talang expressions in arrays that will be evaluated when a rule matches.",
          "items": {
            "type": "array"
          }
        }
      }
    },
    "LimitEntityEnum": {
      "type": "string",
      "enum": [
        "Coupon",
        "Referral",
        "Profile"
      ]
    },
    "LimitConfig": {
      "type": "object",
      "required": [
        "action",
        "limit",
        "entities"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "redeemCoupon",
            "redeemReferral",
            "setDiscount"
          ],
          "description": "The limitable action to which this limit will be applied"
        },
        "limit": {
          "type": "number",
          "minimum": 0,
          "description": "The value to set for the limit"
        },
        "entities": {
          "type": "array",
          "description": "The entities that make the address of this limit",
          "items": {
            "$ref": "#/definitions/LimitEntityEnum"
          }
        }
      }
    },
    "CampaignSet": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "applicationId",
        "set"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "set": {
          "$ref": "#/definitions/CampaignSetBranchNode"
        }
      },
      "additionalProperties": false
    },
    "CampaignSetNode": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "oneOf": [
        {
          "$ref": "#/definitions/CampaignSetBranchNode"
        },
        {
          "$ref": "#/definitions/CampaignSetLeafNode"
        }
      ]
    },
    "CampaignSetBranchNode": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "name",
        "operator",
        "elements"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Indicates the node type",
          "enum": [
            "SET"
          ]
        },
        "name": {
          "type": "string",
          "description": "Name of the set"
        },
        "operator": {
          "type": "string",
          "description": "How does the set operates on its elements",
          "enum": [
            "ALL",
            "FIRST"
          ]
        },
        "elements": {
          "type": "array",
          "description": "Child elements of this set",
          "items": {
            "$ref": "#/definitions/CampaignSetNode"
          }
        }
      }
    },
    "CampaignSetLeafNode": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "campaignId"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Indicates the node type",
          "enum": [
            "CAMPAIGN"
          ]
        },
        "campaignId": {
          "type": "integer",
          "description": "Id of the campaign"
        }
      }
    },
    "NewCampaignSet": {
      "type": "object",
      "description": "",
      "required": [
        "applicationId",
        "set"
      ],
      "properties": {
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "set": {
          "$ref": "#/definitions/CampaignSetBranchNode"
        }
      },
      "additionalProperties": false
    },
    "NewReferral": {
      "type": "object",
      "properties": {
        "campaignId": {
          "type": "integer",
          "description": "Id of the referral's Campaign"
        },
        "advocateProfileIntegrationId": {
          "type": "string",
          "description": "The Integration Id of the Advocate's Profile"
        },
        "friendProfileIntegrationId": {
          "type": "string",
          "description": "An optional Integration Id of the Friend's Profile"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Timestamp at which point the referral code becomes valid."
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative."
        }
      },
      "required": [
        "campaignId",
        "advocateProfileIntegrationId"
      ]
    },
    "Referral": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "campaignId",
        "advocateProfileIntegrationId",
        "code",
        "usageCounter",
        "usageLimit"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "campaignId": {
          "type": "integer",
          "description": "Id of the referral's Campaign"
        },
        "advocateProfileIntegrationId": {
          "type": "string",
          "description": "The Integration Id of the Advocate's Profile"
        },
        "friendProfileIntegrationId": {
          "type": "string",
          "description": "An optional Integration Id of the Friend's Profile"
        },
        "startDate": {
          "type": "string",
          "description": "Timestamp at which point the referral code becomes valid. Timestamp at which point the referral code becomes valid.",
          "format": "date-time"
        },
        "expiryDate": {
          "type": "string",
          "description": "Expiry date of the referral code. A referral code never expires if this is omitted, zero, or negative. Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.",
          "format": "date-time"
        },
        "code": {
          "type": "string",
          "description": "The referral code.",
          "minLength": 4
        },
        "usageCounter": {
          "type": "integer",
          "description": "The number of times this referral code has been successfully used."
        },
        "usageLimit": {
          "type": "integer",
          "minimum": 0,
          "description": "The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply.\n"
        }
      },
      "additionalProperties": false
    },
    "Tier": {
      "type": "object",
      "required": [
        "name",
        "minPoints",
        "collectMultiplier"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tier",
          "minLength": 1
        },
        "minPoints": {
          "type": "integer",
          "description": "Points needed to reach this level",
          "minimum": 0
        },
        "collectMultiplier": {
          "type": "number",
          "description": "Collection multiplier"
        }
      }
    },
    "Tiers": {
      "type": "array",
      "description": "Tiers for this loyalty program",
      "items": {
        "$ref": "#/definitions/Tier"
      }
    },
    "LoyaltyMembership": {
      "type": "object",
      "required": [
        "loyaltyProgramId"
      ],
      "properties": {
        "joined": {
          "type": "string",
          "format": "date-time",
          "description": "The moment in which the loyalty program was joined."
        },
        "loyaltyProgramId": {
          "type": "integer",
          "description": "The ID of the loyalty program belonging to this entity."
        }
      }
    },
    "LoyaltyProgramActivation": {
      "type": "object",
      "required": [
        "applicationId",
        "collectStoreId",
        "spendStoreId"
      ],
      "properties": {
        "applicationId": {
          "type": "integer",
          "description": "The ID of an application that has the loyalty program activated."
        },
        "collectStoreId": {
          "type": "integer",
          "description": "The ID of the application storage for collection points for the loyalty program of an activated application."
        },
        "spendStoreId": {
          "type": "integer",
          "description": "The ID of the application storage for spending points for the loyalty program of an activated application."
        }
      }
    },
    "NewLoyaltyProgram": {
      "type": "object",
      "required": [
        "name",
        "pointValidity"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this loyalty program",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A longer description of the loyalty program"
        },
        "pointValidity": {
          "type": "integer",
          "description": "Validity of newly added points in months",
          "minimum": 1
        },
        "spendingRate": {
          "type": "integer",
          "description": "Exchange rate between loyalty points and currency for spending points"
        },
        "allowFallback": {
          "type": "boolean",
          "description": "Allow/disallow use of currency conversion rate for spending points"
        },
        "allowMixedPayment": {
          "type": "boolean",
          "description": "Allow/disallow partial payment in currency for products bought with loyalty points"
        },
        "tiers": {
          "$ref": "#/definitions/Tiers"
        }
      }
    },
    "LoyaltyProgram": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "accountId",
        "name",
        "pointValidity",
        "allowFallback",
        "allowMixedPayment"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "name": {
          "type": "string",
          "description": "The name of this loyalty program",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A longer description of the loyalty program"
        },
        "pointValidity": {
          "type": "integer",
          "description": "Validity of newly added points in months",
          "minimum": 1
        },
        "spendingRate": {
          "type": "integer",
          "description": "Exchange rate between loyalty points and currency for spending points"
        },
        "allowFallback": {
          "type": "boolean",
          "description": "Allow/disallow use of currency conversion rate for spending points"
        },
        "allowMixedPayment": {
          "type": "boolean",
          "description": "Allow/disallow partial payment in currency for products bought with loyalty points"
        },
        "tiers": {
          "$ref": "#/definitions/Tiers"
        },
        "activeApplications": {
          "type": "array",
          "description": "A list of applications that have this loyalty program active",
          "items": {
            "$ref": "#/definitions/LoyaltyProgramActivation"
          }
        }
      },
      "additionalProperties": false
    },
    "NewCoupons": {
      "type": "object",
      "description": "",
      "required": [
        "couponPattern",
        "validCharacters",
        "numberOfCoupons",
        "usageLimit"
      ],
      "properties": {
        "usageLimit": {
          "type": "integer",
          "minimum": 0,
          "description": "The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.\n"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Timestamp at which point the coupon becomes valid."
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative."
        },
        "validCharacters": {
          "type": "array",
          "description": "Set of characters to be used when generating random part of code. Defaults to [A-Z, 0-9] (in terms of RegExp).",
          "items": {
            "type": "string"
          }
        },
        "couponPattern": {
          "type": "string",
          "description": "The pattern that will be used to generate coupon codes. The character `#` acts as a placeholder and will be replaced by a random character from the `validCharacters` set.\n",
          "minLength": 3
        },
        "numberOfCoupons": {
          "type": "integer",
          "description": "The number of new coupon codes to generate for the campaign. Must be at least 1.",
          "min": 1
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this item",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "UpdateCoupon": {
      "type": "object",
      "description": "",
      "required": [
        "value",
        "usageLimit"
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "The coupon code.",
          "minLength": 4
        },
        "usageLimit": {
          "type": "integer",
          "minimum": 0,
          "description": "The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.\n"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Timestamp at which point the coupon becomes valid."
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative."
        }
      },
      "additionalProperties": false
    },
    "Coupon": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "campaignId",
        "value",
        "usageCounter",
        "usageLimit"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "campaignId": {
          "type": "integer",
          "description": "The ID of the campaign that owns this entity."
        },
        "value": {
          "type": "string",
          "description": "The coupon code.",
          "minLength": 4
        },
        "usageLimit": {
          "type": "integer",
          "minimum": 0,
          "description": "The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply.\n"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Timestamp at which point the coupon becomes valid."
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "minimum": 0,
          "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative."
        },
        "usageCounter": {
          "type": "integer",
          "description": "The number of times this coupon has been successfully used."
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this item",
          "additionalProperties": true
        },
        "referralId": {
          "type": "integer",
          "description": "The id of the referral (if any) from which this coupon was created as an effect."
        },
        "recipientIntegrationId": {
          "type": "string",
          "description": "The integration id for this coupon's beneficiary's profile"
        }
      },
      "additionalProperties": false
    },
    "CampaignAnalytics": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "campaignId",
        "couponRevenue",
        "couponDiscountCosts",
        "couponRedemptions",
        "campaignRedemptionLimit",
        "couponRedemptionLimit",
        "couponRedemptionsRemaining",
        "campaignRedemptionsRemaining",
        "couponsCount",
        "revenuePerRedemption",
        "unlimitedCoupons"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "campaignId": {
          "type": "integer",
          "description": "The ID of the campaign that owns this entity."
        },
        "couponRevenue": {
          "type": "number",
          "description": "Amount of revenue from campaign with coupons."
        },
        "couponDiscountCosts": {
          "type": "number",
          "description": "Amount of cost caused by discounts given in the campaign with sessions involving coupons."
        },
        "couponsCount": {
          "type": "integer",
          "description": "Number of coupons in the campaign."
        },
        "couponRedemptions": {
          "type": "integer",
          "description": "Number of redemptions in the campaign."
        },
        "campaignRedemptionLimit": {
          "type": "integer",
          "description": "Limit on overall redemptions in the campaign."
        },
        "couponRedemptionLimit": {
          "type": "integer",
          "description": "Possible redemptions calculated over all coupons."
        },
        "couponRedemptionsRemaining": {
          "type": "integer",
          "description": "Number of redemptions remaining on the coupon level in the campaign."
        },
        "campaignRedemptionsRemaining": {
          "type": "integer",
          "description": "Hard limit of redemptions remaining on the campaign level."
        },
        "revenuePerRedemption": {
          "type": "number",
          "description": "Composite to describe coupon performance."
        },
        "unlimitedCoupons": {
          "type": "integer",
          "description": "Number of unlimited coupons in the campaign."
        }
      },
      "additionalProperties": false
    },
    "ApplicationApiHealth": {
      "type": "object",
      "description": "Report of health of the API connection of an application",
      "required": [
        "summary",
        "lastUsed"
      ],
      "properties": {
        "summary": {
          "type": "string",
          "description": "One-word summary of the health of the API connection of an application",
          "enum": [
            "OK",
            "WARNING",
            "ERROR",
            "CRITICAL",
            "NONE"
          ]
        },
        "lastUsed": {
          "type": "string",
          "format": "date-time",
          "description": "time of last request relevant to the API health test"
        }
      }
    },
    "AccessLogEntry": {
      "type": "object",
      "description": "Log of application accesses",
      "required": [
        "uuid",
        "status",
        "method",
        "requestUri",
        "time",
        "requestPayload",
        "responsePayload"
      ],
      "properties": {
        "uuid": {
          "type": "string",
          "description": "UUID reference of request"
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code of response"
        },
        "method": {
          "type": "string",
          "description": "HTTP method of request"
        },
        "requestUri": {
          "type": "string",
          "description": "target URI of request"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "timestamp of request"
        },
        "requestPayload": {
          "type": "string",
          "description": "payload of request"
        },
        "responsePayload": {
          "type": "string",
          "description": "payload of response"
        }
      }
    },
    "WebhookLogEntry": {
      "type": "object",
      "description": "Log of webhook api calls",
      "required": [
        "id",
        "integrationRequestUuid",
        "webhookId",
        "url",
        "request",
        "requestTime"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "UUID reference of the webhook request"
        },
        "integrationRequestUuid": {
          "type": "string",
          "description": "UUID reference of the integration request linked to this webhook request"
        },
        "webhookId": {
          "type": "integer",
          "description": "Id of the webhook that triggered the request"
        },
        "applicationId": {
          "type": "integer",
          "description": "Id of the application that triggered the webhook"
        },
        "url": {
          "type": "string",
          "description": "Target url of request"
        },
        "request": {
          "type": "string",
          "description": "Request message"
        },
        "response": {
          "type": "string",
          "description": "Response message"
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code of response"
        },
        "requestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of request"
        },
        "responseTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of response"
        }
      }
    },
    "LedgerEntry": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "eventId",
        "accountId",
        "profileId",
        "loyaltyProgramId",
        "amount",
        "reason",
        "expiryDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "profileId": {
          "type": "string",
          "description": "Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the Talon.One account that owns this profile."
        },
        "loyaltyProgramId": {
          "type": "integer",
          "description": "ID of the ledger"
        },
        "eventId": {
          "type": "integer",
          "description": "ID of the related event"
        },
        "amount": {
          "type": "integer",
          "description": "Amount of points"
        },
        "reason": {
          "type": "string",
          "description": "reason for awarding/deducting points"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Expiry date of the points"
        },
        "referenceId": {
          "type": "integer",
          "description": "The ID of the balancing ledgerEntry"
        }
      },
      "additionalProperties": false
    },
    "LedgerBalance": {
      "type": "object",
      "description": "",
      "required": [
        "loyaltyProgramId",
        "balance",
        "tierName"
      ],
      "properties": {
        "loyaltyProgramId": {
          "type": "integer",
          "description": "ID of the ledger"
        },
        "balance": {
          "type": "integer",
          "description": "Amount of points"
        },
        "tierName": {
          "type": "string",
          "description": "Name of tier corresponding to the current balance"
        }
      },
      "additionalProperties": false
    },
    "User": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "email",
        "accountId",
        "inviteToken",
        "state",
        "name",
        "policy",
        "releaseUpdate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email address associated with your account."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "inviteToken": {
          "type": "string",
          "description": "Invite token, empty if the user as already accepted their invite."
        },
        "state": {
          "type": "string",
          "enum": [
            "invited",
            "active",
            "deactivated"
          ],
          "description": "Current user state."
        },
        "name": {
          "type": "string",
          "description": "Full name"
        },
        "lastActivity": {
          "type": "string",
          "format": "date-time",
          "description": "Last time user used management API"
        },
        "policy": {
          "type": "object",
          "description": "Access policy for the user as json object.",
          "additionalProperties": {
            "$ref": "#/definitions/Policy"
          }
        },
        "releaseUpdate": {
          "type": "boolean",
          "description": "Update the user via email"
        }
      },
      "additionalProperties": false
    },
    "NewInvitation": {
      "type": "object",
      "description": "Parameters for inviting a new user",
      "required": [
        "email",
        "acl"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the user being invited."
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "acl": {
          "$ref": "#/definitions/AccessControlList"
        }
      }
    },
    "Policy": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "AccessControlList": {
      "type": "object",
      "description": "A map of access privileges.",
      "additionalProperties": {
        "$ref": "#/definitions/Policy"
      }
    },
    "Change": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "userId",
        "entity"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "userId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "entity": {
          "type": "string",
          "description": "API endpoint on which the change was initiated."
        },
        "old": {
          "type": "object",
          "description": "Resource before the change occured.",
          "additionalProperties": true
        },
        "new": {
          "type": "object",
          "description": "Resource after the change occured.",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "CustomerProfileSearch": {
      "type": "object",
      "required": [
        "attributes"
      ],
      "properties": {
        "attributes": {
          "type": "object",
          "description": "Properties to match against a customer profile. All provided attributes will be exactly matched against profile attributes",
          "additionalProperties": true
        }
      }
    },
    "NewCustomerProfile": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this item",
          "additionalProperties": true
        }
      }
    },
    "CustomerProfile": {
      "type": "object",
      "description": "",
      "required": [
        "integrationId",
        "created",
        "accountId",
        "closedSessions",
        "totalSales",
        "loyaltyMemberships",
        "lastActivity",
        "attributes"
      ],
      "properties": {
        "integrationId": {
          "type": "string",
          "description": "The ID used for this entity in the application system."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this item",
          "additionalProperties": true
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the Talon.One account that owns this profile."
        },
        "closedSessions": {
          "type": "integer"
        },
        "totalSales": {
          "type": "number"
        },
        "loyaltyMemberships": {
          "type": "array",
          "description": "A list of loyalty programs joined by the customer",
          "items": {
            "$ref": "#/definitions/LoyaltyMembership"
          }
        },
        "lastActivity": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the most recent event received from this customer"
        }
      },
      "additionalProperties": false
    },
    "NewCustomerSession": {
      "type": "object",
      "description": "",
      "properties": {
        "profileId": {
          "type": "string",
          "description": "Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID."
        },
        "coupon": {
          "type": "string",
          "description": "Any coupon code entered."
        },
        "referral": {
          "type": "string",
          "description": "Any referral code entered."
        },
        "state": {
          "type": "string",
          "enum": [
            "open",
            "closed",
            "cancelled"
          ],
          "default": "open",
          "description": "Indicates the current state of the session. All sessions must\nstart in the \"open\" state, after which valid transitions are...\n\n1. open -> closed\n2. open -> cancelled\n3. closed -> cancelled\n"
        },
        "cartItems": {
          "type": "array",
          "description": "Serialized JSON representation.",
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "total": {
          "type": "number"
        },
        "attributes": {
          "type": "object",
          "description": "A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings. To learn more about how attributes work, please see [Attributes](#blah).\n",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "CustomerActivityReport": {
      "type": "object",
      "description": "",
      "required": [
        "integrationId",
        "created",
        "name",
        "customerId",
        "couponRedemptions",
        "couponUseAttempts",
        "couponFailedAttempts",
        "accruedDiscounts",
        "accruedRevenue",
        "totalOrders",
        "totalOrdersNoCoupon"
      ],
      "properties": {
        "integrationId": {
          "type": "string",
          "description": "The ID used for this entity in the application system. The ID used for this entity in the application system."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "name": {
          "type": "string",
          "description": "The name for this customer profile."
        },
        "customerId": {
          "type": "integer",
          "description": "The internal Talon.One ID of the customer."
        },
        "lastActivity": {
          "type": "string",
          "format": "date-time",
          "description": "The last activity of the customer."
        },
        "couponRedemptions": {
          "type": "integer",
          "description": "Number of coupon redemptions in all customer campaigns."
        },
        "couponUseAttempts": {
          "type": "integer",
          "description": "Number of coupon use attempts in all customer campaigns."
        },
        "couponFailedAttempts": {
          "type": "integer",
          "description": "Number of failed coupon use attempts in all customer campaigns."
        },
        "accruedDiscounts": {
          "type": "number",
          "description": "Number of accrued discounts in all customer campaigns."
        },
        "accruedRevenue": {
          "type": "number",
          "description": "Amount of accrued revenue in all customer campaigns."
        },
        "totalOrders": {
          "type": "integer",
          "description": "Number of orders in all customer campaigns."
        },
        "totalOrdersNoCoupon": {
          "type": "integer",
          "description": "Number of orders without coupon used in all customer campaigns."
        }
      },
      "additionalProperties": false
    },
    "CustomerSession": {
      "type": "object",
      "description": "",
      "required": [
        "integrationId",
        "created",
        "applicationId",
        "profileId",
        "firstSession",
        "coupon",
        "referral",
        "state",
        "cartItems",
        "attributes",
        "discounts",
        "total"
      ],
      "properties": {
        "integrationId": {
          "type": "string",
          "description": "The ID used for this entity in the application system."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "profileId": {
          "type": "string",
          "description": "Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID."
        },
        "coupon": {
          "type": "string",
          "description": "Any coupon code entered."
        },
        "referral": {
          "type": "string",
          "description": "Any referral code entered."
        },
        "state": {
          "type": "string",
          "enum": [
            "open",
            "closed",
            "cancelled"
          ],
          "default": "open",
          "description": "Indicates the current state of the session. All sessions must\nstart in the \"open\" state, after which valid transitions are...\n\n1. open -> closed\n2. open -> cancelled\n3. closed -> cancelled\n"
        },
        "cartItems": {
          "type": "array",
          "description": "Serialized JSON representation.",
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "total": {
          "type": "number"
        },
        "attributes": {
          "type": "object",
          "description": "A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings. To learn more about how attributes work, please see [Attributes](#blah).\n",
          "additionalProperties": true
        },
        "firstSession": {
          "type": "boolean",
          "description": "Indicates whether this is the first session for the profile. Will always be true for anonymous sessions."
        },
        "discounts": {
          "type": "object",
          "description": "A map of labelled discount values, values will be in the same currency as the application associated with the session.",
          "additionalProperties": {
            "type": "number"
          }
        }
      },
      "additionalProperties": false
    },
    "CartItemAdjustment": {
      "type": "object",
      "required": [
        "payFromLoyaltyProgram",
        "pointPayment"
      ],
      "properties": {
        "payFromLoyaltyProgram": {
          "type": "integer"
        },
        "pointPayment": {
          "type": "integer",
          "minimum": 1
        },
        "remainingPrice": {
          "type": "number",
          "minimum": 0
        }
      }
    },
    "CartItem": {
      "type": "object",
      "required": [
        "name",
        "sku",
        "quantity",
        "price"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "sku": {
          "type": "string",
          "minLength": 1
        },
        "quantity": {
          "type": "integer",
          "minimum": 1
        },
        "price": {
          "type": "number"
        },
        "category": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "description": "width in mm"
        },
        "height": {
          "type": "number",
          "description": "height in mm"
        },
        "width": {
          "type": "number",
          "description": "width in mm"
        },
        "length": {
          "type": "number",
          "description": "length in mm"
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this item",
          "additionalProperties": true
        },
        "adjustment": {
          "$ref": "#/definitions/CartItemAdjustment"
        }
      }
    },
    "NewEvent": {
      "type": "object",
      "description": "",
      "required": [
        "type",
        "attributes",
        "sessionId"
      ],
      "properties": {
        "profileId": {
          "type": "string",
          "description": "Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID."
        },
        "sessionId": {
          "type": "string",
          "description": "The ID of the session that this event occurred in.",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "description": "A string representing the event. Must not be a reserved event name.",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary additional JSON data associated with the event.",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "Event": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "applicationId",
        "type",
        "attributes",
        "sessionId",
        "effects",
        "ledgerEntries"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "profileId": {
          "type": "string",
          "description": "Account-internal ID of the customers profile. May be omitted or set to the empty string if the customer does not yet have a known profile ID."
        },
        "sessionId": {
          "type": "string",
          "description": "The ID of the session that this event occurred in.",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "description": "A string representing the event. Must not be a reserved event name.",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary additional JSON data associated with the event.",
          "additionalProperties": true
        },
        "effects": {
          "type": "array",
          "description": "An array of \"effects\" that must be applied in response to this event. Example effects include `addItemToCart` or `setDiscount`.\n",
          "items": {
            "type": "array"
          }
        },
        "ledgerEntries": {
          "type": "array",
          "description": "Ledger entries for the event.",
          "items": {
            "$ref": "#/definitions/LedgerEntry"
          }
        }
      },
      "additionalProperties": false
    },
    "IntegrationState": {
      "type": "object",
      "description": "Contains all state that might interest application integration plugins. This is the response type returned by all of the Integration API operations.\n",
      "properties": {
        "session": {
          "$ref": "#/definitions/CustomerSession"
        },
        "profile": {
          "$ref": "#/definitions/CustomerProfile"
        },
        "event": {
          "$ref": "#/definitions/Event"
        }
      },
      "required": [
        "session",
        "profile",
        "event"
      ]
    },
    "ApplicationProfile": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "integrationId",
        "accountId",
        "closedSessions",
        "totalSales",
        "loyaltyMemberships",
        "lastActivity",
        "attributes"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "description": "The exact moment this entity was created. The exact moment this entity was created. The exact moment this entity was created.",
          "format": "date-time"
        },
        "integrationId": {
          "type": "string",
          "description": "The ID used for this entity in the application system. The ID used for this entity in the application system."
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this item",
          "additionalProperties": true
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the Talon.One account that owns this profile. The ID of the Talon.One account that owns this profile."
        },
        "closedSessions": {
          "type": "integer"
        },
        "totalSales": {
          "type": "number"
        },
        "loyaltyMemberships": {
          "type": "array",
          "description": "A list of loyalty programs joined by the customer",
          "items": {
            "$ref": "#/definitions/LoyaltyMembership"
          }
        },
        "lastActivity": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the most recent event received from this customer"
        }
      },
      "additionalProperties": false
    },
    "ApplicationSession": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "applicationId",
        "integrationId",
        "coupon",
        "referral",
        "state",
        "cartItems",
        "discounts"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "description": "The exact moment this entity was created. The exact moment this entity was created.",
          "format": "date-time"
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "profileId": {
          "type": "integer",
          "description": "The globally unique Talon.One ID of the customer that created this entity."
        },
        "integrationId": {
          "type": "string",
          "description": "The ID used for this entity in the application system."
        },
        "coupon": {
          "type": "string",
          "description": "Any coupon code entered."
        },
        "referral": {
          "type": "string",
          "description": "Any referal code entered."
        },
        "state": {
          "type": "string",
          "enum": [
            "open",
            "closed",
            "cancelled"
          ],
          "description": "Indicating if the customer session is in progress (\"open\"), \"closed\", or \"cancelled\"."
        },
        "cartItems": {
          "type": "array",
          "description": "Serialized JSON representation.",
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "discounts": {
          "type": "object",
          "description": "A map of labelled discount values, in the same currency as the session.",
          "additionalProperties": {
            "type": "number"
          }
        },
        "attributes": {
          "type": "object",
          "description": "Arbitrary properties associated with this item",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "ApplicationEvent": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "applicationId",
        "type",
        "attributes",
        "effects"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "profileId": {
          "type": "integer",
          "description": "The globally unique Talon.One ID of the customer that created this entity."
        },
        "sessionId": {
          "type": "integer",
          "description": "The globally unique Talon.One ID of the session that contains this event."
        },
        "type": {
          "type": "string",
          "description": "A string representing the event. Must not be a reserved event name."
        },
        "attributes": {
          "type": "object",
          "description": "Additional JSON serialized data associated with the event.",
          "additionalProperties": true
        },
        "effects": {
          "type": "array",
          "description": "An array containing the effects that were applied as a result of this event.",
          "items": {
            "type": "array"
          }
        }
      },
      "additionalProperties": false
    },
    "ApplicationEventType": {
      "type": "string"
    },
    "NewAccount": {
      "type": "object",
      "required": [
        "companyName"
      ],
      "properties": {
        "companyName": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "UpdateAccount": {
      "type": "object",
      "required": [
        "companyName",
        "billingEmail"
      ],
      "properties": {
        "companyName": {
          "type": "string",
          "minLength": 1,
          "description": "Name of your company."
        },
        "billingEmail": {
          "type": "string",
          "format": "email",
          "description": "The billing email address associated with your company account."
        }
      }
    },
    "Account": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "companyName",
        "domainName",
        "state",
        "billingEmail"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "companyName": {
          "type": "string",
          "minLength": 1
        },
        "domainName": {
          "type": "string",
          "description": "Subdomain Name for yourcompany.talon.one"
        },
        "state": {
          "type": "string",
          "enum": [
            "trial",
            "active",
            "trial_expired"
          ],
          "description": "State of the account (trial, active, trial_expired)"
        },
        "billingEmail": {
          "type": "string",
          "format": "email",
          "description": "The billing email address associated with your company account."
        },
        "planName": {
          "type": "string",
          "description": "The name of your booked plan."
        },
        "planExpires": {
          "type": "string",
          "format": "date-time",
          "description": "The point in time at which your current plan expires."
        },
        "applicationLimit": {
          "type": "integer",
          "description": "The maximum number of Applications covered by your plan."
        },
        "userLimit": {
          "type": "integer",
          "description": "The maximum number of Campaign Manager Users covered by your plan."
        },
        "campaignLimit": {
          "type": "integer",
          "description": "The maximum number of Campaigns covered by your plan."
        },
        "apiLimit": {
          "type": "integer",
          "description": "The maximum number of Integration API calls covered by your plan per billing period."
        },
        "applicationCount": {
          "type": "integer",
          "description": "The current number of Applications in your account."
        },
        "userCount": {
          "type": "integer",
          "description": "The current number of Campaign Manager Users in your account."
        },
        "campaignsActiveCount": {
          "type": "integer",
          "description": "The current number of active Campaigns in your account."
        },
        "campaignsInactiveCount": {
          "type": "integer",
          "description": "The current number of inactive Campaigns in your account."
        },
        "apiCallCount": {
          "type": "integer",
          "description": "The number of Integration API calls that have been made."
        }
      },
      "additionalProperties": false
    },
    "NewAccountSignUp": {
      "type": "object",
      "description": "",
      "required": [
        "email",
        "password",
        "companyName"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email address associated with your account."
        },
        "password": {
          "type": "string",
          "description": "The password for your account."
        },
        "companyName": {
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false
    },
    "NewUser": {
      "type": "object",
      "description": "",
      "required": [
        "email",
        "password",
        "inviteToken"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email address associated with your account."
        },
        "password": {
          "type": "string",
          "description": "The password for your account."
        },
        "name": {
          "type": "string",
          "description": "Your name."
        },
        "inviteToken": {
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false
    },
    "UpdateUser": {
      "type": "object",
      "description": "",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email address associated with your account."
        },
        "name": {
          "type": "string",
          "description": "Your name."
        },
        "password": {
          "type": "string",
          "description": "Your old password."
        },
        "newPassword": {
          "type": "string",
          "description": "Your new password."
        },
        "policy": {
          "$ref": "#/definitions/AccessControlList"
        },
        "state": {
          "type": "string",
          "enum": [
            "deactivated",
            "activated"
          ],
          "description": "New state (\"deactivated\" or \"active\") for the user. Only usable by admins for the user."
        },
        "releaseUpdate": {
          "type": "boolean",
          "description": "Update the user via email"
        }
      },
      "additionalProperties": false
    },
    "NewInviteEmail": {
      "type": "object",
      "required": [
        "email",
        "token"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "token": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "NewPasswordEmail": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 1
        }
      }
    },
    "NewPassword": {
      "type": "object",
      "required": [
        "password",
        "resetToken"
      ],
      "properties": {
        "password": {
          "type": "string",
          "description": "The new password for your account."
        },
        "resetToken": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Environment": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "applicationId",
        "slots",
        "functions",
        "templates",
        "variables"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "slots": {
          "type": "array",
          "description": "The slots defined for this application.",
          "items": {
            "$ref": "#/definitions/SlotDef"
          }
        },
        "functions": {
          "type": "array",
          "description": "The functions defined for this application.",
          "items": {
            "$ref": "#/definitions/FunctionDef"
          }
        },
        "templates": {
          "type": "array",
          "description": "The templates defined for this application.",
          "items": {
            "$ref": "#/definitions/TemplateDef"
          }
        },
        "variables": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SlotDef": {
      "type": "object",
      "required": [
        "name",
        "type",
        "title",
        "writable"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The dot-separated path to this slot for use in Talang."
        },
        "type": {
          "type": "string",
          "description": "The type of this slot, one of string, number, boolean, or list[type]."
        },
        "title": {
          "type": "string",
          "description": "Campaigner-friendly name for the slot."
        },
        "description": {
          "type": "string",
          "description": "A short description of the slot."
        },
        "help": {
          "type": "string",
          "description": "Extended help text for the slot."
        },
        "writable": {
          "type": "boolean",
          "description": "Whether or not this slot can be updated by rule effects."
        }
      }
    },
    "FuncArgDef": {
      "type": "object",
      "required": [
        "type",
        "title",
        "description"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "boolean",
            "number"
          ],
          "description": "The type of value this argument expects.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A campaigner-friendly description of the argument, this will also be shown in the rule editor."
        }
      }
    },
    "TemplateArgDef": {
      "type": "object",
      "description": "",
      "required": [
        "type",
        "title",
        "description",
        "ui"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "boolean",
            "number"
          ],
          "description": "The type of value this argument expects.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A campaigner-friendly description of the argument, this will also be shown in the rule editor."
        },
        "title": {
          "type": "string",
          "description": "A campaigner friendly name for the argument, this will be shown in the rule editor.",
          "minLength": 1
        },
        "ui": {
          "type": "object",
          "description": "Arbitrary metadata that may be used to render an input for this argument.",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "FunctionDef": {
      "type": "object",
      "required": [
        "name",
        "type",
        "args"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The function name used in Talang.",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "description": "The type of this function argument."
        },
        "description": {
          "type": "string",
          "description": "A short description of the function."
        },
        "help": {
          "type": "string",
          "description": "Extended help text for the function."
        },
        "args": {
          "type": "array",
          "description": "An array of argument definitions.",
          "items": {
            "$ref": "#/definitions/FuncArgDef"
          }
        }
      }
    },
    "NewTemplateDef": {
      "type": "object",
      "required": [
        "title",
        "category",
        "args",
        "expr"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "Campaigner-friendly name for the template that will be shown in the rule editor.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A short description of the template that will be shown in the rule editor."
        },
        "help": {
          "type": "string",
          "description": "Extended help text for the template."
        },
        "category": {
          "description": "Used for grouping templates in the rule editor sidebar.",
          "type": "string",
          "minLength": 1
        },
        "expr": {
          "type": "array",
          "description": "A Talang expression that contains variable bindings referring to args."
        },
        "args": {
          "type": "array",
          "description": "An array of argument definitions.",
          "items": {
            "$ref": "#/definitions/TemplateArgDef"
          }
        }
      }
    },
    "TemplateDef": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "applicationId",
        "title",
        "category",
        "args",
        "expr",
        "name",
        "description",
        "help"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "applicationId": {
          "type": "integer",
          "description": "The ID of the application that owns this entity."
        },
        "title": {
          "type": "string",
          "description": "Campaigner-friendly name for the template that will be shown in the rule editor.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "A short description of the template that will be shown in the rule editor."
        },
        "help": {
          "type": "string",
          "description": "Extended help text for the template."
        },
        "category": {
          "description": "Used for grouping templates in the rule editor sidebar.",
          "type": "string",
          "minLength": 1
        },
        "expr": {
          "type": "array",
          "description": "A Talang expression that contains variable bindings referring to args."
        },
        "args": {
          "type": "array",
          "description": "An array of argument definitions.",
          "items": {
            "$ref": "#/definitions/TemplateArgDef"
          }
        },
        "name": {
          "type": "string",
          "description": "The template name used in Talang.",
          "minLength": 1
        }
      },
      "additionalProperties": false
    },
    "NewAttribute": {
      "type": "object",
      "description": "",
      "required": [
        "entity",
        "name",
        "title",
        "type",
        "description",
        "tags",
        "editable"
      ],
      "properties": {
        "entity": {
          "type": "string",
          "description": "The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.",
          "enum": [
            "Application",
            "Campaign",
            "CustomerProfile",
            "CustomerSession",
            "CartItem",
            "Coupon",
            "Event"
          ]
        },
        "eventType": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.\n"
        },
        "title": {
          "type": "string",
          "description": "The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "time"
          ],
          "description": "The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format."
        },
        "description": {
          "type": "string",
          "description": "A description of this attribute."
        },
        "tags": {
          "type": "array",
          "description": "A list of tags for the attribute.",
          "maxItems": 50,
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "editable": {
          "type": "boolean",
          "description": "Whether or not this attribute can be edited."
        }
      },
      "additionalProperties": false
    },
    "Attribute": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "accountId",
        "entity",
        "name",
        "title",
        "type",
        "description",
        "tags",
        "editable",
        "locked",
        "usedAt"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "entity": {
          "type": "string",
          "description": "The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.",
          "enum": [
            "Application",
            "Campaign",
            "CustomerProfile",
            "CustomerSession",
            "CartItem",
            "Coupon",
            "Event"
          ]
        },
        "eventType": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.\n"
        },
        "title": {
          "type": "string",
          "description": "The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "time"
          ],
          "description": "The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format."
        },
        "description": {
          "type": "string",
          "description": "A description of this attribute."
        },
        "tags": {
          "type": "array",
          "description": "A list of tags for the attribute.",
          "maxItems": 50,
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "editable": {
          "type": "boolean",
          "description": "Whether or not this attribute can be edited."
        },
        "locked": {
          "type": "boolean",
          "default": false,
          "description": "Indicates whether this attribute is in use. If in use only title can be changed and other operations are prohibited."
        },
        "lastUsed": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp that indicates last time this attribute was used by integration API call."
        },
        "lastUsedRequestUuid": {
          "type": "string",
          "description": "Unique id of integration API request that contained this attribute."
        },
        "lastUsedApplicationId": {
          "type": "integer",
          "description": "Indicates which application used this attribute in integration API call."
        },
        "usedAt": {
          "type": "array",
          "description": "array of rulesets where the attribute is used",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "NewEventType": {
      "type": "object",
      "description": "",
      "required": [
        "applicationIds",
        "title",
        "name",
        "description",
        "mimeType",
        "handler",
        "version"
      ],
      "properties": {
        "applicationIds": {
          "type": "array",
          "minCount": 1,
          "description": "The IDs of the applications that are related to this entity.",
          "items": {
            "type": "integer"
          }
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "description": "The human-friendly display name for this event type. Use a short, past-tense, description of the event."
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "description": "The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created."
        },
        "description": {
          "type": "string",
          "description": "An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:\n\n> The \"Payment Accepted\" event is triggered after successful processing of a payment by our payment gateway.\n"
        },
        "mimeType": {
          "type": "string",
          "enum": [
            "application/json",
            "application/x-www-form-urlencoded",
            "none"
          ],
          "description": "This defines how the request payload will be parsed before your handler code is run."
        },
        "examplePayload": {
          "type": "string",
          "description": "It is often helpful to include an example payload with the event type definition for documentation purposes."
        },
        "schema": {
          "type": "object",
          "additionalProperties": true,
          "description": "It is strongly recommended to define a JSON schema that will be used to perform structural validation of request payloads after parsing.\n"
        },
        "handlerLanguage": {
          "type": "string",
          "enum": [
            "talang"
          ],
          "description": "The language of the handler code. Currently only `\"talang\"` is supported."
        },
        "handler": {
          "type": "string",
          "description": "Code that will be run after successful parsing & validation of the payload for this event.\nThis code _may_ choose to evaluate campaign rules.\n"
        },
        "version": {
          "type": "integer",
          "description": "The version of this event type. When updating an existing event type this must be **exactly** `currentVersion + 1`.\n"
        }
      },
      "additionalProperties": false
    },
    "EventType": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "applicationIds",
        "title",
        "name",
        "description",
        "mimeType",
        "handler",
        "version"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "applicationIds": {
          "type": "array",
          "minCount": 1,
          "description": "The IDs of the applications that are related to this entity.",
          "items": {
            "type": "integer"
          }
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "description": "The human-friendly display name for this event type. Use a short, past-tense, description of the event."
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "description": "The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created."
        },
        "description": {
          "type": "string",
          "description": "An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:\n\n> The \"Payment Accepted\" event is triggered after successful processing of a payment by our payment gateway.\n"
        },
        "mimeType": {
          "type": "string",
          "enum": [
            "application/json",
            "application/x-www-form-urlencoded",
            "none"
          ],
          "description": "This defines how the request payload will be parsed before your handler code is run."
        },
        "examplePayload": {
          "type": "string",
          "description": "It is often helpful to include an example payload with the event type definition for documentation purposes."
        },
        "schema": {
          "type": "object",
          "additionalProperties": true,
          "description": "It is strongly recommended to define a JSON schema that will be used to perform structural validation of request payloads after parsing.\n"
        },
        "handlerLanguage": {
          "type": "string",
          "enum": [
            "talang"
          ],
          "description": "The language of the handler code. Currently only `\"talang\"` is supported."
        },
        "handler": {
          "type": "string",
          "description": "Code that will be run after successful parsing & validation of the payload for this event.\nThis code _may_ choose to evaluate campaign rules.\n"
        },
        "version": {
          "type": "integer",
          "description": "The version of this event type. When updating an existing event type this must be **exactly** `currentVersion + 1`.\n"
        }
      },
      "additionalProperties": false
    },
    "NewWebhook": {
      "type": "object",
      "description": "",
      "required": [
        "applicationIds",
        "title",
        "verb",
        "url",
        "headers",
        "params",
        "enabled"
      ],
      "properties": {
        "applicationIds": {
          "type": "array",
          "minCount": 1,
          "description": "The IDs of the applications that are related to this entity.",
          "items": {
            "type": "integer"
          }
        },
        "title": {
          "type": "string",
          "description": "Friendly title for this webhook"
        },
        "verb": {
          "type": "string",
          "enum": [
            "POST",
            "PUT",
            "GET",
            "DELETE",
            "PATCH"
          ],
          "description": "API method for this webhook"
        },
        "url": {
          "type": "string",
          "description": "API url (supports templating using parameters) for this webhook"
        },
        "headers": {
          "type": "array",
          "description": "List of API HTTP headers for this webhook",
          "items": {
            "type": "string",
            "pattern": "^([^:,]*):([^]*|[^,]*)$"
          }
        },
        "payload": {
          "type": "string",
          "description": "API payload (supports templating using parameters) for this webhook"
        },
        "params": {
          "type": "array",
          "description": "Array of template argument definitions",
          "items": {
            "$ref": "#/definitions/TemplateArgDef"
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "Enables or disables webhook from showing in rule builder"
        }
      },
      "additionalProperties": false
    },
    "Webhook": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "modified",
        "applicationIds",
        "title",
        "verb",
        "url",
        "headers",
        "params",
        "enabled",
        "usedAt"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was last modified."
        },
        "applicationIds": {
          "type": "array",
          "description": "The IDs of the applications that are related to this entity. The IDs of the applications that are related to this entity.",
          "items": {
            "type": "integer",
            "description": ""
          }
        },
        "title": {
          "type": "string",
          "description": "Friendly title for this webhook"
        },
        "verb": {
          "type": "string",
          "enum": [
            "POST",
            "PUT",
            "GET",
            "DELETE",
            "PATCH"
          ],
          "description": "API method for this webhook"
        },
        "url": {
          "type": "string",
          "description": "API url (supports templating using parameters) for this webhook"
        },
        "headers": {
          "type": "array",
          "description": "List of API HTTP headers for this webhook",
          "items": {
            "type": "string",
            "pattern": "^([^:,]*):([^]*|[^,]*)$"
          }
        },
        "payload": {
          "type": "string",
          "description": "API payload (supports templating using parameters) for this webhook"
        },
        "params": {
          "type": "array",
          "description": "Array of template argument definitions",
          "items": {
            "$ref": "#/definitions/TemplateArgDef"
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "Enables or disables webhook from showing in rule builder"
        },
        "usedAt": {
          "type": "array",
          "description": "array of rulesets where webhook is used",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ManagerConfig": {
      "type": "object",
      "required": [
        "schemaVersion"
      ],
      "properties": {
        "schemaVersion": {
          "type": "integer"
        }
      },
      "additionalProperties": true
    },
    "NewExport": {
      "type": "object",
      "description": "",
      "required": [
        "entity",
        "filter"
      ],
      "properties": {
        "entity": {
          "type": "string",
          "enum": [
            "Coupon"
          ],
          "description": "The name of the entity type being exported."
        },
        "filter": {
          "type": "object",
          "description": "Map of keys and values that were used to filter the exported rows",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "Export": {
      "type": "object",
      "description": "",
      "required": [
        "id",
        "created",
        "accountId",
        "userId",
        "entity",
        "filter"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID for this entity."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The exact moment this entity was created."
        },
        "accountId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "userId": {
          "type": "integer",
          "description": "The ID of the account that owns this entity."
        },
        "entity": {
          "type": "string",
          "enum": [
            "Coupon"
          ],
          "description": "The name of the entity type being exported."
        },
        "filter": {
          "type": "object",
          "description": "Map of keys and values that were used to filter the exported rows",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "LibraryAttribute": {
      "type": "object",
      "description": "",
      "required": [
        "entity",
        "name",
        "title",
        "type",
        "description",
        "presets",
        "tags"
      ],
      "properties": {
        "entity": {
          "type": "string",
          "description": "The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.",
          "enum": [
            "Application",
            "Campaign",
            "CustomerProfile",
            "CustomerSession",
            "CartItem",
            "Coupon",
            "Event"
          ]
        },
        "name": {
          "type": "string",
          "description": "The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.\n"
        },
        "title": {
          "type": "string",
          "description": "The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "time"
          ],
          "description": "The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format."
        },
        "description": {
          "type": "string",
          "description": "A description of the attribute."
        },
        "presets": {
          "type": "array",
          "description": "The presets that indicate to which industry the attribute applies to.",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "description": "Short tags that are used to group attributes.",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
